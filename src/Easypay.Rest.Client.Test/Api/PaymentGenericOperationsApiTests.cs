/*
 * Easypay Payments API
 *
 * <a href='https://www.easypay.pt/en/legal-terms-and-conditions/' class='item'>Terms conditions and legal terms</a><br><a href='https://www.easypay.pt/en/privacy-and-data-protection-policy/' class='item'>Privacy Policy</a>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: tec@easypay.pt
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Easypay.Rest.Client.Client;
using Easypay.Rest.Client.Api;
// uncomment below to import models
//using Easypay.Rest.Client.Model;

namespace Easypay.Rest.Client.Test.Api
{
    /// <summary>
    ///  Class for testing PaymentGenericOperationsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class PaymentGenericOperationsApiTests : IDisposable
    {
        private PaymentGenericOperationsApi instance;

        public PaymentGenericOperationsApiTests()
        {
            instance = new PaymentGenericOperationsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of PaymentGenericOperationsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' PaymentGenericOperationsApi
            //Assert.IsType<PaymentGenericOperationsApi>(instance);
        }

        /// <summary>
        /// Test AuthorisationIdGet
        /// </summary>
        [Fact]
        public void AuthorisationIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //var response = instance.AuthorisationIdGet(id);
            //Assert.IsType<AuthorisationIdGet200Response>(response);
        }

        /// <summary>
        /// Test CaptureCaptureUuidSplitsCaptureSplitUuidPatch
        /// </summary>
        [Fact]
        public void CaptureCaptureUuidSplitsCaptureSplitUuidPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid captureUuid = null;
            //Guid captureSplitUuid = null;
            //CaptureCaptureUuidSplitsCaptureSplitUuidPatchRequest? captureCaptureUuidSplitsCaptureSplitUuidPatchRequest = null;
            //var response = instance.CaptureCaptureUuidSplitsCaptureSplitUuidPatch(captureUuid, captureSplitUuid, captureCaptureUuidSplitsCaptureSplitUuidPatchRequest);
            //Assert.IsType<CaptureCaptureUuidSplitsCaptureSplitUuidPatch201Response>(response);
        }

        /// <summary>
        /// Test CaptureGet
        /// </summary>
        [Fact]
        public void CaptureGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? cursor = null;
            //decimal? limit = null;
            //string? createdAt = null;
            //string? updatedAt = null;
            //var response = instance.CaptureGet(cursor, limit, createdAt, updatedAt);
            //Assert.IsType<InlineObject11>(response);
        }

        /// <summary>
        /// Test CaptureIdGet
        /// </summary>
        [Fact]
        public void CaptureIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //var response = instance.CaptureIdGet(id);
            //Assert.IsType<InlineObject12>(response);
        }

        /// <summary>
        /// Test CaptureIdPost
        /// </summary>
        [Fact]
        public void CaptureIdPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //CaptureIdPostRequest captureIdPostRequest = null;
            //var response = instance.CaptureIdPost(id, captureIdPostRequest);
            //Assert.IsType<CaptureIdPost201Response>(response);
        }

        /// <summary>
        /// Test ListChargeback
        /// </summary>
        [Fact]
        public void ListChargebackTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? cursor = null;
            //decimal? limit = null;
            //string? createdAt = null;
            //var response = instance.ListChargeback(cursor, limit, createdAt);
            //Assert.IsType<InlineObject14>(response);
        }

        /// <summary>
        /// Test ListRefund
        /// </summary>
        [Fact]
        public void ListRefundTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? cursor = null;
            //decimal? limit = null;
            //string? createdAt = null;
            //string? updatedAt = null;
            //var response = instance.ListRefund(cursor, limit, createdAt, updatedAt);
            //Assert.IsType<InlineObject13>(response);
        }

        /// <summary>
        /// Test RefundIdGet
        /// </summary>
        [Fact]
        public void RefundIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //var response = instance.RefundIdGet(id);
            //Assert.IsType<RefundIdGet200Response>(response);
        }

        /// <summary>
        /// Test RefundIdPost
        /// </summary>
        [Fact]
        public void RefundIdPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //RefundIdPostRequest body = null;
            //var response = instance.RefundIdPost(id, body);
            //Assert.IsType<CaptureIdPost201Response>(response);
        }

        /// <summary>
        /// Test VoidIdGet
        /// </summary>
        [Fact]
        public void VoidIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //var response = instance.VoidIdGet(id);
            //Assert.IsType<VoidIdGet200Response>(response);
        }

        /// <summary>
        /// Test VoidIdPost
        /// </summary>
        [Fact]
        public void VoidIdPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //VoidIdPostRequest body = null;
            //var response = instance.VoidIdPost(id, body);
            //Assert.IsType<CaptureIdPost201Response>(response);
        }
    }
}
