/*
 * Easypay Payments API
 *
 * <a href='https://www.easypay.pt/en/legal-terms-and-conditions/' class='item'>Terms conditions and legal terms</a><br><a href='https://www.easypay.pt/en/privacy-and-data-protection-policy/' class='item'>Privacy Policy</a>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: tec@easypay.pt
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Easypay.Rest.Client.Client.OpenAPIDateConverter;

namespace Easypay.Rest.Client.Model
{
    /// <summary>
    /// PayByLinkSingle
    /// </summary>
    [DataContract(Name = "PayByLinkSingle")]
    public partial class PayByLinkSingle : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PayByLinkSingle" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PayByLinkSingle() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PayByLinkSingle" /> class.
        /// </summary>
        /// <param name="requestedAmount">string representing a decimal number with up to two places after the decimal point (but not more) (required).</param>
        public PayByLinkSingle(string requestedAmount = default(string))
        {
            // to ensure "requestedAmount" is required (not null)
            if (requestedAmount == null)
            {
                throw new ArgumentNullException("requestedAmount is a required property for PayByLinkSingle and cannot be null");
            }
            this.RequestedAmount = requestedAmount;
        }

        /// <summary>
        /// string representing a decimal number with up to two places after the decimal point (but not more)
        /// </summary>
        /// <value>string representing a decimal number with up to two places after the decimal point (but not more)</value>
        [DataMember(Name = "requested_amount", IsRequired = true, EmitDefaultValue = true)]
        public string RequestedAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PayByLinkSingle {\n");
            sb.Append("  RequestedAmount: ").Append(RequestedAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.RequestedAmount != null)
            {
                // RequestedAmount (string) pattern
                Regex regexRequestedAmount = new Regex(@"^\d+(\.\d{1,2})?$", RegexOptions.CultureInvariant);
                if (!regexRequestedAmount.Match(this.RequestedAmount).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RequestedAmount, must match a pattern of " + regexRequestedAmount, new[] { "RequestedAmount" });
                }
            }

            yield break;
        }
    }

}
