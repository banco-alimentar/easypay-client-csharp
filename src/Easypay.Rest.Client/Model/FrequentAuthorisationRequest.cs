/*
 * Easypay Payments API
 *
 * <a href='https://www.easypay.pt/en/legal-terms-and-conditions/' class='item'>Terms conditions and legal terms</a><br><a href='https://www.easypay.pt/en/privacy-and-data-protection-policy/' class='item'>Privacy Policy</a>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: tec@easypay.pt
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Easypay.Rest.Client.Client.OpenAPIDateConverter;

namespace Easypay.Rest.Client.Model
{
    /// <summary>
    /// FrequentAuthorisationRequest
    /// </summary>
    [DataContract(Name = "frequent_authorisation_request")]
    public partial class FrequentAuthorisationRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FrequentAuthorisationRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FrequentAuthorisationRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FrequentAuthorisationRequest" /> class.
        /// </summary>
        /// <param name="mbwaySdk">mbwaySdk.</param>
        /// <param name="transactionKey">Your internal key identifying this authorisation..</param>
        /// <param name="force3ds">Whether or not you want to force the 3DS authentication. (default to false).</param>
        /// <param name="descriptive">This will appear in the bank statement/mbway application. (required).</param>
        /// <param name="value">Value will be rounded to 2 decimals. (required).</param>
        public FrequentAuthorisationRequest(MbwaySdk mbwaySdk = default(MbwaySdk), string transactionKey = default(string), bool force3ds = false, string descriptive = default(string), double value = default(double))
        {
            // to ensure "descriptive" is required (not null)
            if (descriptive == null)
            {
                throw new ArgumentNullException("descriptive is a required property for FrequentAuthorisationRequest and cannot be null");
            }
            this.Descriptive = descriptive;
            this.Value = value;
            this.MbwaySdk = mbwaySdk;
            this.TransactionKey = transactionKey;
            this.Force3ds = force3ds;
        }

        /// <summary>
        /// Gets or Sets MbwaySdk
        /// </summary>
        [DataMember(Name = "mbway_sdk", EmitDefaultValue = false)]
        public MbwaySdk MbwaySdk { get; set; }

        /// <summary>
        /// Your internal key identifying this authorisation.
        /// </summary>
        /// <value>Your internal key identifying this authorisation.</value>
        [DataMember(Name = "transaction_key", EmitDefaultValue = false)]
        public string TransactionKey { get; set; }

        /// <summary>
        /// Whether or not you want to force the 3DS authentication.
        /// </summary>
        /// <value>Whether or not you want to force the 3DS authentication.</value>
        [DataMember(Name = "force_3ds", EmitDefaultValue = true)]
        public bool Force3ds { get; set; }

        /// <summary>
        /// This will appear in the bank statement/mbway application.
        /// </summary>
        /// <value>This will appear in the bank statement/mbway application.</value>
        /*
        <example>Descriptive Example</example>
        */
        [DataMember(Name = "descriptive", IsRequired = true, EmitDefaultValue = true)]
        public string Descriptive { get; set; }

        /// <summary>
        /// Value will be rounded to 2 decimals.
        /// </summary>
        /// <value>Value will be rounded to 2 decimals.</value>
        /*
        <example>10.5</example>
        */
        [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = true)]
        public double Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FrequentAuthorisationRequest {\n");
            sb.Append("  MbwaySdk: ").Append(MbwaySdk).Append("\n");
            sb.Append("  TransactionKey: ").Append(TransactionKey).Append("\n");
            sb.Append("  Force3ds: ").Append(Force3ds).Append("\n");
            sb.Append("  Descriptive: ").Append(Descriptive).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // TransactionKey (string) maxLength
            if (this.TransactionKey != null && this.TransactionKey.Length > 255)
            {
                yield return new ValidationResult("Invalid value for TransactionKey, length must be less than 255.", new[] { "TransactionKey" });
            }

            // Descriptive (string) maxLength
            if (this.Descriptive != null && this.Descriptive.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Descriptive, length must be less than 255.", new[] { "Descriptive" });
            }

            // Value (double) minimum
            if (this.Value < (double)0.5)
            {
                yield return new ValidationResult("Invalid value for Value, must be a value greater than or equal to 0.5.", new[] { "Value" });
            }

            yield break;
        }
    }

}
