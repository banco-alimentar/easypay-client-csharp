/*
 * Easypay Payments API
 *
 * <a href='https://www.easypay.pt/en/legal-terms-and-conditions/' class='item'>Terms conditions and legal terms</a><br><a href='https://www.easypay.pt/en/privacy-and-data-protection-policy/' class='item'>Privacy Policy</a>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: tec@easypay.pt
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Easypay.Rest.Client.Client.OpenAPIDateConverter;

namespace Easypay.Rest.Client.Model
{
    /// <summary>
    /// The Customer object contains detailed information about the customer involved in the transaction.
    /// </summary>
    [DataContract(Name = "Customer")]
    public partial class Customer : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Customer" /> class.
        /// </summary>
        /// <param name="id">A unique identifier for the resource. While typically formatted as a UUID (Universally Unique Identifier), it can also be in other formats as defined by the user. This field ensures the resource can be distinctly recognized and referenced..</param>
        /// <param name="name">The full name of the customer. This field is used to identify the customer and personalize interactions. It typically includes the customer&#39;s first name and last name..</param>
        /// <param name="email">The email address of the customer. This field is used for communication purposes, including sending transaction confirmations, receipts, and other notifications related to the customer&#39;s activities..</param>
        /// <param name="phone">The contact phone number of the customer, excluding the country code indicator (e.g., \&quot;+351\&quot;). This field is used for communication purposes. If the payment method is MBWAY, the phone_number is required and is used to send the MBWAY push notification..</param>
        /// <param name="phoneIndicative">The country code indicator for the customer&#39;s phone number (e.g., \&quot;351\&quot; for Portugal). This field is used in conjunction with the phone number to ensure proper international dialing and communication. (default to &quot;351&quot;).</param>
        /// <param name="fiscalNumber">The customer&#39;s fiscal number (prefixed by the country code)..</param>
        /// <param name="key">A customizable text field for users to input their own identifier for the resource. This can be any string that helps the user uniquely identify or reference the resource in their own system..</param>
        /// <param name="language">The language preference of the customer, specified in the ISO 639-1 Alpha-2 format (e.g., \&quot;EN\&quot; for English, \&quot;PT\&quot; for Portuguese). This field is used to indicate the customer&#39;s preferred language for communication and documentation.  (default to &quot;PT&quot;).</param>
        public Customer(string id = default(string), string name = default(string), string email = default(string), string phone = default(string), string phoneIndicative = @"351", string fiscalNumber = default(string), string key = default(string), string language = @"PT")
        {
            this.Id = id;
            this.Name = name;
            this.Email = email;
            this.Phone = phone;
            // use default value if no "phoneIndicative" provided
            this.PhoneIndicative = phoneIndicative ?? @"351";
            this.FiscalNumber = fiscalNumber;
            this.Key = key;
            // use default value if no "language" provided
            this.Language = language ?? @"PT";
        }

        /// <summary>
        /// A unique identifier for the resource. While typically formatted as a UUID (Universally Unique Identifier), it can also be in other formats as defined by the user. This field ensures the resource can be distinctly recognized and referenced.
        /// </summary>
        /// <value>A unique identifier for the resource. While typically formatted as a UUID (Universally Unique Identifier), it can also be in other formats as defined by the user. This field ensures the resource can be distinctly recognized and referenced.</value>
        /*
        <example>c6056234-a3f9-42de-b944-3ed793fcb6bb</example>
        */
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The full name of the customer. This field is used to identify the customer and personalize interactions. It typically includes the customer&#39;s first name and last name.
        /// </summary>
        /// <value>The full name of the customer. This field is used to identify the customer and personalize interactions. It typically includes the customer&#39;s first name and last name.</value>
        /*
        <example>Jonh Doe</example>
        */
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The email address of the customer. This field is used for communication purposes, including sending transaction confirmations, receipts, and other notifications related to the customer&#39;s activities.
        /// </summary>
        /// <value>The email address of the customer. This field is used for communication purposes, including sending transaction confirmations, receipts, and other notifications related to the customer&#39;s activities.</value>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// The contact phone number of the customer, excluding the country code indicator (e.g., \&quot;+351\&quot;). This field is used for communication purposes. If the payment method is MBWAY, the phone_number is required and is used to send the MBWAY push notification.
        /// </summary>
        /// <value>The contact phone number of the customer, excluding the country code indicator (e.g., \&quot;+351\&quot;). This field is used for communication purposes. If the payment method is MBWAY, the phone_number is required and is used to send the MBWAY push notification.</value>
        /*
        <example>962496235</example>
        */
        [DataMember(Name = "phone", EmitDefaultValue = false)]
        public string Phone { get; set; }

        /// <summary>
        /// The country code indicator for the customer&#39;s phone number (e.g., \&quot;351\&quot; for Portugal). This field is used in conjunction with the phone number to ensure proper international dialing and communication.
        /// </summary>
        /// <value>The country code indicator for the customer&#39;s phone number (e.g., \&quot;351\&quot; for Portugal). This field is used in conjunction with the phone number to ensure proper international dialing and communication.</value>
        /*
        <example>351</example>
        */
        [DataMember(Name = "phone_indicative", EmitDefaultValue = false)]
        public string PhoneIndicative { get; set; }

        /// <summary>
        /// The customer&#39;s fiscal number (prefixed by the country code).
        /// </summary>
        /// <value>The customer&#39;s fiscal number (prefixed by the country code).</value>
        /*
        <example>PT277712580</example>
        */
        [DataMember(Name = "fiscal_number", EmitDefaultValue = false)]
        public string FiscalNumber { get; set; }

        /// <summary>
        /// A customizable text field for users to input their own identifier for the resource. This can be any string that helps the user uniquely identify or reference the resource in their own system.
        /// </summary>
        /// <value>A customizable text field for users to input their own identifier for the resource. This can be any string that helps the user uniquely identify or reference the resource in their own system.</value>
        /*
        <example>01J1PKR2RPHJNJQGFWGDYXY0KM</example>
        */
        [DataMember(Name = "key", EmitDefaultValue = false)]
        public string Key { get; set; }

        /// <summary>
        /// The language preference of the customer, specified in the ISO 639-1 Alpha-2 format (e.g., \&quot;EN\&quot; for English, \&quot;PT\&quot; for Portuguese). This field is used to indicate the customer&#39;s preferred language for communication and documentation. 
        /// </summary>
        /// <value>The language preference of the customer, specified in the ISO 639-1 Alpha-2 format (e.g., \&quot;EN\&quot; for English, \&quot;PT\&quot; for Portuguese). This field is used to indicate the customer&#39;s preferred language for communication and documentation. </value>
        /*
        <example>PT</example>
        */
        [DataMember(Name = "language", EmitDefaultValue = false)]
        public string Language { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Customer {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  PhoneIndicative: ").Append(PhoneIndicative).Append("\n");
            sb.Append("  FiscalNumber: ").Append(FiscalNumber).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Name, length must be less than 255.", new[] { "Name" });
            }

            // Email (string) maxLength
            if (this.Email != null && this.Email.Length > 70)
            {
                yield return new ValidationResult("Invalid value for Email, length must be less than 70.", new[] { "Email" });
            }

            // Phone (string) maxLength
            if (this.Phone != null && this.Phone.Length > 15)
            {
                yield return new ValidationResult("Invalid value for Phone, length must be less than 15.", new[] { "Phone" });
            }

            // PhoneIndicative (string) maxLength
            if (this.PhoneIndicative != null && this.PhoneIndicative.Length > 5)
            {
                yield return new ValidationResult("Invalid value for PhoneIndicative, length must be less than 5.", new[] { "PhoneIndicative" });
            }

            // FiscalNumber (string) maxLength
            if (this.FiscalNumber != null && this.FiscalNumber.Length > 20)
            {
                yield return new ValidationResult("Invalid value for FiscalNumber, length must be less than 20.", new[] { "FiscalNumber" });
            }

            // Key (string) maxLength
            if (this.Key != null && this.Key.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Key, length must be less than 255.", new[] { "Key" });
            }

            // Language (string) maxLength
            if (this.Language != null && this.Language.Length > 2)
            {
                yield return new ValidationResult("Invalid value for Language, length must be less than 2.", new[] { "Language" });
            }

            // Language (string) minLength
            if (this.Language != null && this.Language.Length < 2)
            {
                yield return new ValidationResult("Invalid value for Language, length must be greater than 2.", new[] { "Language" });
            }

            yield break;
        }
    }

}
