/*
 * Easypay Payments API
 *
 * <a href='https://www.easypay.pt/en/legal-terms-and-conditions/' class='item'>Terms conditions and legal terms</a><br><a href='https://www.easypay.pt/en/privacy-and-data-protection-policy/' class='item'>Privacy Policy</a>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: tec@easypay.pt
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Easypay.Rest.Client.Client.OpenAPIDateConverter;

namespace Easypay.Rest.Client.Model
{
    /// <summary>
    /// OutPaymentPostRequest
    /// </summary>
    [DataContract(Name = "_out_payment_post_request")]
    public partial class OutPaymentPostRequest : IValidatableObject
    {
        /// <summary>
        /// Optional - only applicable to method transfer
        /// </summary>
        /// <value>Optional - only applicable to method transfer</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Normal for value: normal
            /// </summary>
            [EnumMember(Value = "normal")]
            Normal = 1,

            /// <summary>
            /// Enum Instant for value: instant
            /// </summary>
            [EnumMember(Value = "instant")]
            Instant = 2
        }


        /// <summary>
        /// Optional - only applicable to method transfer
        /// </summary>
        /// <value>Optional - only applicable to method transfer</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OutPaymentPostRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OutPaymentPostRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OutPaymentPostRequest" /> class.
        /// </summary>
        /// <param name="customer">customer (required).</param>
        /// <param name="key">Merchant identification key.</param>
        /// <param name="value">Value will be rounded to 2 decimals (required).</param>
        /// <param name="type">Optional - only applicable to method transfer (default to TypeEnum.Normal).</param>
        /// <param name="scheduleAt">Schedule date to execute the payment.</param>
        /// <param name="descriptive">descriptive.</param>
        /// <param name="account">account.</param>
        /// <param name="outAccount">outAccount (required).</param>
        /// <param name="method">method (required) (default to &quot;transfer&quot;).</param>
        /// <param name="timestamp">Unix timestamp UTC, must be no more than 1 minute before or after real time, if not the strong authentication signature will not be valid (required).</param>
        public OutPaymentPostRequest(CustomerCreateOrUpdate customer = default(CustomerCreateOrUpdate), string key = default(string), double value = default(double), TypeEnum? type = TypeEnum.Normal, DateTime scheduleAt = default(DateTime), string descriptive = default(string), Account account = default(Account), OutAccount outAccount = default(OutAccount), string method = @"transfer", string timestamp = default(string))
        {
            // to ensure "customer" is required (not null)
            if (customer == null)
            {
                throw new ArgumentNullException("customer is a required property for OutPaymentPostRequest and cannot be null");
            }
            this.Customer = customer;
            this.Value = value;
            // to ensure "outAccount" is required (not null)
            if (outAccount == null)
            {
                throw new ArgumentNullException("outAccount is a required property for OutPaymentPostRequest and cannot be null");
            }
            this.OutAccount = outAccount;
            // to ensure "method" is required (not null)
            if (method == null)
            {
                throw new ArgumentNullException("method is a required property for OutPaymentPostRequest and cannot be null");
            }
            this.Method = method;
            // to ensure "timestamp" is required (not null)
            if (timestamp == null)
            {
                throw new ArgumentNullException("timestamp is a required property for OutPaymentPostRequest and cannot be null");
            }
            this.Timestamp = timestamp;
            this.Key = key;
            this.Type = type;
            this.ScheduleAt = scheduleAt;
            this.Descriptive = descriptive;
            this.Account = account;
        }

        /// <summary>
        /// Gets or Sets Customer
        /// </summary>
        [DataMember(Name = "customer", IsRequired = true, EmitDefaultValue = true)]
        public CustomerCreateOrUpdate Customer { get; set; }

        /// <summary>
        /// Merchant identification key
        /// </summary>
        /// <value>Merchant identification key</value>
        [DataMember(Name = "key", EmitDefaultValue = false)]
        public string Key { get; set; }

        /// <summary>
        /// Value will be rounded to 2 decimals
        /// </summary>
        /// <value>Value will be rounded to 2 decimals</value>
        [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = true)]
        public double Value { get; set; }

        /// <summary>
        /// Schedule date to execute the payment
        /// </summary>
        /// <value>Schedule date to execute the payment</value>
        [DataMember(Name = "schedule_at", EmitDefaultValue = false)]
        public DateTime ScheduleAt { get; set; }

        /// <summary>
        /// Gets or Sets Descriptive
        /// </summary>
        [DataMember(Name = "descriptive", EmitDefaultValue = false)]
        public string Descriptive { get; set; }

        /// <summary>
        /// Gets or Sets Account
        /// </summary>
        [DataMember(Name = "account", EmitDefaultValue = false)]
        public Account Account { get; set; }

        /// <summary>
        /// Gets or Sets OutAccount
        /// </summary>
        [DataMember(Name = "out_account", IsRequired = true, EmitDefaultValue = true)]
        public OutAccount OutAccount { get; set; }

        /// <summary>
        /// Gets or Sets Method
        /// </summary>
        /*
        <example>transfer</example>
        */
        [DataMember(Name = "method", IsRequired = true, EmitDefaultValue = true)]
        public string Method { get; set; }

        /// <summary>
        /// Unix timestamp UTC, must be no more than 1 minute before or after real time, if not the strong authentication signature will not be valid
        /// </summary>
        /// <value>Unix timestamp UTC, must be no more than 1 minute before or after real time, if not the strong authentication signature will not be valid</value>
        [DataMember(Name = "timestamp", IsRequired = true, EmitDefaultValue = true)]
        public string Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OutPaymentPostRequest {\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ScheduleAt: ").Append(ScheduleAt).Append("\n");
            sb.Append("  Descriptive: ").Append(Descriptive).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  OutAccount: ").Append(OutAccount).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Key (string) maxLength
            if (this.Key != null && this.Key.Length > 50)
            {
                yield return new ValidationResult("Invalid value for Key, length must be less than 50.", new[] { "Key" });
            }

            // Value (double) minimum
            if (this.Value < (double)0.5)
            {
                yield return new ValidationResult("Invalid value for Value, must be a value greater than or equal to 0.5.", new[] { "Value" });
            }

            // Descriptive (string) maxLength
            if (this.Descriptive != null && this.Descriptive.Length > 140)
            {
                yield return new ValidationResult("Invalid value for Descriptive, length must be less than 140.", new[] { "Descriptive" });
            }

            if (this.Descriptive != null)
            {
                // Descriptive (string) pattern
                Regex regexDescriptive = new Regex(@"^[a-zA-Z0-9 .,/+*$%]+$", RegexOptions.CultureInvariant);
                if (!regexDescriptive.Match(this.Descriptive).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Descriptive, must match a pattern of " + regexDescriptive, new[] { "Descriptive" });
                }
            }

            yield break;
        }
    }

}
