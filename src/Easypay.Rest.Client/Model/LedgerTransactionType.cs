/*
 * Easypay Payments API
 *
 * <a href='https://www.easypay.pt/en/legal-terms-and-conditions/' class='item'>Terms conditions and legal terms</a><br><a href='https://www.easypay.pt/en/privacy-and-data-protection-policy/' class='item'>Privacy Policy</a>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: tec@easypay.pt
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Easypay.Rest.Client.Client.OpenAPIDateConverter;

namespace Easypay.Rest.Client.Model
{
    /// <summary>
    /// **LedgerTransactionType** is a string enum that represents various types of financial transactions recorded in a ledger.  Each transaction type is abbreviated with a code and corresponds to a specific financial operation.  The following are the possible values and their descriptions:     **CP**: capture     Represents the capture of funds, typically after a payment authorization. This transaction finalizes a payment and moves the funds from the payer&#39;s account to the payee&#39;s account.     **RF**: refund     Represents a refund transaction where previously captured funds are returned to the payer&#39;s account. This transaction often occurs when a customer returns goods or services.     **RV**: revert     Indicates a revert transaction that undoes a previously made transaction, often used to correct errors or reverse transactions.     **SP**: split_payment     Represents a split payment transaction, where a payment is divided among multiple recipients or for different purposes within the same transaction.     **FEE**: fee     Represents a fee transaction, which is a charge applied for a specific service or transaction. This could include service fees, processing fees, or other types of charges.     **MAN**: a manual movement     Represents a manual movement of funds, typically entered manually by an administrator or accountant to adjust balances or correct errors.     **TB**: bank transfer     Represents a bank transfer transaction, where funds are moved between different bank accounts. This can be a transfer within the same bank or across different banks.     **OT**: out transfer     Indicates an out transfer transaction, where funds are transferred out of the current ledger or account to another external account or ledger.     **CB**: chargeback     Represents a chargeback transaction, typically initiated by the payer&#39;s bank to reverse a disputed or fraudulent transaction. This transaction withdraws the funds from the payee&#39;s account and returns them to the payer.     **OP**: out payment     Represents an out payment transaction, where funds are paid out from the ledger to an external party or account. This transaction is usually used to settle debts or make external payments.
    /// </summary>
    /// <value>**LedgerTransactionType** is a string enum that represents various types of financial transactions recorded in a ledger.  Each transaction type is abbreviated with a code and corresponds to a specific financial operation.  The following are the possible values and their descriptions:     **CP**: capture     Represents the capture of funds, typically after a payment authorization. This transaction finalizes a payment and moves the funds from the payer&#39;s account to the payee&#39;s account.     **RF**: refund     Represents a refund transaction where previously captured funds are returned to the payer&#39;s account. This transaction often occurs when a customer returns goods or services.     **RV**: revert     Indicates a revert transaction that undoes a previously made transaction, often used to correct errors or reverse transactions.     **SP**: split_payment     Represents a split payment transaction, where a payment is divided among multiple recipients or for different purposes within the same transaction.     **FEE**: fee     Represents a fee transaction, which is a charge applied for a specific service or transaction. This could include service fees, processing fees, or other types of charges.     **MAN**: a manual movement     Represents a manual movement of funds, typically entered manually by an administrator or accountant to adjust balances or correct errors.     **TB**: bank transfer     Represents a bank transfer transaction, where funds are moved between different bank accounts. This can be a transfer within the same bank or across different banks.     **OT**: out transfer     Indicates an out transfer transaction, where funds are transferred out of the current ledger or account to another external account or ledger.     **CB**: chargeback     Represents a chargeback transaction, typically initiated by the payer&#39;s bank to reverse a disputed or fraudulent transaction. This transaction withdraws the funds from the payee&#39;s account and returns them to the payer.     **OP**: out payment     Represents an out payment transaction, where funds are paid out from the ledger to an external party or account. This transaction is usually used to settle debts or make external payments.</value>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum LedgerTransactionType
    {
        /// <summary>
        /// Enum CP for value: CP
        /// </summary>
        [EnumMember(Value = "CP")]
        CP = 1,

        /// <summary>
        /// Enum RF for value: RF
        /// </summary>
        [EnumMember(Value = "RF")]
        RF = 2,

        /// <summary>
        /// Enum RV for value: RV
        /// </summary>
        [EnumMember(Value = "RV")]
        RV = 3,

        /// <summary>
        /// Enum FEE for value: FEE
        /// </summary>
        [EnumMember(Value = "FEE")]
        FEE = 4,

        /// <summary>
        /// Enum SP for value: SP
        /// </summary>
        [EnumMember(Value = "SP")]
        SP = 5,

        /// <summary>
        /// Enum MAN for value: MAN
        /// </summary>
        [EnumMember(Value = "MAN")]
        MAN = 6,

        /// <summary>
        /// Enum TB for value: TB
        /// </summary>
        [EnumMember(Value = "TB")]
        TB = 7,

        /// <summary>
        /// Enum OT for value: OT
        /// </summary>
        [EnumMember(Value = "OT")]
        OT = 8,

        /// <summary>
        /// Enum CB for value: CB
        /// </summary>
        [EnumMember(Value = "CB")]
        CB = 9,

        /// <summary>
        /// Enum OP for value: OP
        /// </summary>
        [EnumMember(Value = "OP")]
        OP = 10
    }

}
