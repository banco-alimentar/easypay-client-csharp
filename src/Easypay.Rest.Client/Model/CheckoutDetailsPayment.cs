/*
 * Easypay Payments API
 *
 * <a href='https://www.easypay.pt/en/legal-terms-and-conditions/' class='item'>Terms conditions and legal terms</a><br><a href='https://www.easypay.pt/en/privacy-and-data-protection-policy/' class='item'>Privacy Policy</a>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: tec@easypay.pt
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Easypay.Rest.Client.Client.OpenAPIDateConverter;

namespace Easypay.Rest.Client.Model
{
    /// <summary>
    /// CheckoutDetailsPayment
    /// </summary>
    [DataContract(Name = "Checkout_Details_payment")]
    public partial class CheckoutDetailsPayment : IValidatableObject
    {
        /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Waiting for value: waiting
            /// </summary>
            [EnumMember(Value = "waiting")]
            Waiting = 1,

            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            [EnumMember(Value = "pending")]
            Pending = 2,

            /// <summary>
            /// Enum Active for value: active
            /// </summary>
            [EnumMember(Value = "active")]
            Active = 3,

            /// <summary>
            /// Enum Deleted for value: deleted
            /// </summary>
            [EnumMember(Value = "deleted")]
            Deleted = 4
        }


        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Defines Methods
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MethodsEnum
        {
            /// <summary>
            /// Enum Mb for value: mb
            /// </summary>
            [EnumMember(Value = "mb")]
            Mb = 1,

            /// <summary>
            /// Enum Cc for value: cc
            /// </summary>
            [EnumMember(Value = "cc")]
            Cc = 2,

            /// <summary>
            /// Enum Mbw for value: mbw
            /// </summary>
            [EnumMember(Value = "mbw")]
            Mbw = 3,

            /// <summary>
            /// Enum Dd for value: dd
            /// </summary>
            [EnumMember(Value = "dd")]
            Dd = 4,

            /// <summary>
            /// Enum Vi for value: vi
            /// </summary>
            [EnumMember(Value = "vi")]
            Vi = 5,

            /// <summary>
            /// Enum Uf for value: uf
            /// </summary>
            [EnumMember(Value = "uf")]
            Uf = 6,

            /// <summary>
            /// Enum Sc for value: sc
            /// </summary>
            [EnumMember(Value = "sc")]
            Sc = 7,

            /// <summary>
            /// Enum Ap for value: ap
            /// </summary>
            [EnumMember(Value = "ap")]
            Ap = 8
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutDetailsPayment" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="status">status.</param>
        /// <param name="methods">methods.</param>
        /// <param name="expirationTime">expirationTime.</param>
        /// <param name="currency">currency.</param>
        /// <param name="key">key.</param>
        /// <param name="maxValue">maxValue.</param>
        /// <param name="minValue">minValue.</param>
        /// <param name="frequency">frequency.</param>
        /// <param name="maxCaptures">maxCaptures.</param>
        /// <param name="startTime">startTime.</param>
        /// <param name="failover">failover.</param>
        /// <param name="captureNow">captureNow.</param>
        /// <param name="retries">retries.</param>
        public CheckoutDetailsPayment(string id = default(string), StatusEnum? status = default(StatusEnum?), Collection<MethodsEnum> methods = default(Collection<MethodsEnum>), string expirationTime = default(string), string currency = default(string), string key = default(string), int maxValue = default(int), int minValue = default(int), string frequency = default(string), int maxCaptures = default(int), string startTime = default(string), bool failover = default(bool), bool captureNow = default(bool), int retries = default(int))
        {
            this.Id = id;
            this.Status = status;
            this.Methods = methods;
            this.ExpirationTime = expirationTime;
            this.Currency = currency;
            this.Key = key;
            this.MaxValue = maxValue;
            this.MinValue = minValue;
            this.Frequency = frequency;
            this.MaxCaptures = maxCaptures;
            this.StartTime = startTime;
            this.Failover = failover;
            this.CaptureNow = captureNow;
            this.Retries = retries;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Methods
        /// </summary>
        [DataMember(Name = "methods", EmitDefaultValue = false)]
        public Collection<CheckoutDetailsPayment.MethodsEnum> Methods { get; set; }

        /// <summary>
        /// Gets or Sets ExpirationTime
        /// </summary>
        [DataMember(Name = "expiration_time", EmitDefaultValue = false)]
        public string ExpirationTime { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        [DataMember(Name = "key", EmitDefaultValue = false)]
        public string Key { get; set; }

        /// <summary>
        /// Gets or Sets MaxValue
        /// </summary>
        [DataMember(Name = "max_value", EmitDefaultValue = false)]
        public int MaxValue { get; set; }

        /// <summary>
        /// Gets or Sets MinValue
        /// </summary>
        [DataMember(Name = "min_value", EmitDefaultValue = false)]
        public int MinValue { get; set; }

        /// <summary>
        /// Gets or Sets Frequency
        /// </summary>
        [DataMember(Name = "frequency", EmitDefaultValue = false)]
        public string Frequency { get; set; }

        /// <summary>
        /// Gets or Sets MaxCaptures
        /// </summary>
        [DataMember(Name = "max_captures", EmitDefaultValue = false)]
        public int MaxCaptures { get; set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [DataMember(Name = "start_time", EmitDefaultValue = false)]
        public string StartTime { get; set; }

        /// <summary>
        /// Gets or Sets Failover
        /// </summary>
        [DataMember(Name = "failover", EmitDefaultValue = true)]
        public bool Failover { get; set; }

        /// <summary>
        /// Gets or Sets CaptureNow
        /// </summary>
        [DataMember(Name = "capture_now", EmitDefaultValue = true)]
        public bool CaptureNow { get; set; }

        /// <summary>
        /// Gets or Sets Retries
        /// </summary>
        [DataMember(Name = "retries", EmitDefaultValue = false)]
        public int Retries { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CheckoutDetailsPayment {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Methods: ").Append(Methods).Append("\n");
            sb.Append("  ExpirationTime: ").Append(ExpirationTime).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  MaxValue: ").Append(MaxValue).Append("\n");
            sb.Append("  MinValue: ").Append(MinValue).Append("\n");
            sb.Append("  Frequency: ").Append(Frequency).Append("\n");
            sb.Append("  MaxCaptures: ").Append(MaxCaptures).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  Failover: ").Append(Failover).Append("\n");
            sb.Append("  CaptureNow: ").Append(CaptureNow).Append("\n");
            sb.Append("  Retries: ").Append(Retries).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
