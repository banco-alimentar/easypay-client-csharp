/*
 * Easypay Payments API
 *
 * <a href='https://www.easypay.pt/en/legal-terms-and-conditions/' class='item'>Terms conditions and legal terms</a><br><a href='https://www.easypay.pt/en/privacy-and-data-protection-policy/' class='item'>Privacy Policy</a>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: tec@easypay.pt
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Easypay.Rest.Client.Client.OpenAPIDateConverter;

namespace Easypay.Rest.Client.Model
{
    /// <summary>
    /// Frequent
    /// </summary>
    [DataContract(Name = "Frequent")]
    public partial class Frequent : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Frequent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Frequent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Frequent" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="key">key.</param>
        /// <param name="expirationTime">expirationTime.</param>
        /// <param name="customer">customer.</param>
        /// <param name="method">method.</param>
        /// <param name="currency">currency.</param>
        /// <param name="maxValue">maxValue (required).</param>
        /// <param name="minValue">minValue (required).</param>
        /// <param name="unlimitedPayments">unlimitedPayments.</param>
        /// <param name="createdAt">Date when payment was created. (required).</param>
        public Frequent(Guid id = default(Guid), string key = default(string), string expirationTime = default(string), FrequentCustomer customer = default(FrequentCustomer), FrequentMethod method = default(FrequentMethod), string currency = default(string), decimal maxValue = default(decimal), decimal minValue = default(decimal), bool unlimitedPayments = default(bool), string createdAt = default(string))
        {
            this.Id = id;
            this.MaxValue = maxValue;
            this.MinValue = minValue;
            // to ensure "createdAt" is required (not null)
            if (createdAt == null)
            {
                throw new ArgumentNullException("createdAt is a required property for Frequent and cannot be null");
            }
            this.CreatedAt = createdAt;
            this.Key = key;
            this.ExpirationTime = expirationTime;
            this.Customer = customer;
            this.Method = method;
            this.Currency = currency;
            this.UnlimitedPayments = unlimitedPayments;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        [DataMember(Name = "key", EmitDefaultValue = false)]
        public string Key { get; set; }

        /// <summary>
        /// Gets or Sets ExpirationTime
        /// </summary>
        [DataMember(Name = "expiration_time", EmitDefaultValue = false)]
        public string ExpirationTime { get; set; }

        /// <summary>
        /// Gets or Sets Customer
        /// </summary>
        [DataMember(Name = "customer", EmitDefaultValue = false)]
        public FrequentCustomer Customer { get; set; }

        /// <summary>
        /// Gets or Sets Method
        /// </summary>
        [DataMember(Name = "method", EmitDefaultValue = false)]
        public FrequentMethod Method { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets MaxValue
        /// </summary>
        [DataMember(Name = "max_value", IsRequired = true, EmitDefaultValue = true)]
        public decimal MaxValue { get; set; }

        /// <summary>
        /// Gets or Sets MinValue
        /// </summary>
        [DataMember(Name = "min_value", IsRequired = true, EmitDefaultValue = true)]
        public decimal MinValue { get; set; }

        /// <summary>
        /// Gets or Sets UnlimitedPayments
        /// </summary>
        [DataMember(Name = "unlimited_payments", EmitDefaultValue = true)]
        public bool UnlimitedPayments { get; set; }

        /// <summary>
        /// Date when payment was created.
        /// </summary>
        /// <value>Date when payment was created.</value>
        /*
        <example>2017-12-12 16:05:02</example>
        */
        [DataMember(Name = "created_at", IsRequired = true, EmitDefaultValue = true)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Frequent {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  ExpirationTime: ").Append(ExpirationTime).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  MaxValue: ").Append(MaxValue).Append("\n");
            sb.Append("  MinValue: ").Append(MinValue).Append("\n");
            sb.Append("  UnlimitedPayments: ").Append(UnlimitedPayments).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
