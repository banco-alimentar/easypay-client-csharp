/*
 * Easypay Payments API
 *
 * <a href='https://www.easypay.pt/en/legal-terms-and-conditions/' class='item'>Terms conditions and legal terms</a><br><a href='https://www.easypay.pt/en/privacy-and-data-protection-policy/' class='item'>Privacy Policy</a>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: tec@easypay.pt
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Easypay.Rest.Client.Client.OpenAPIDateConverter;

namespace Easypay.Rest.Client.Model
{
    /// <summary>
    /// NotificationGeneric
    /// </summary>
    [DataContract(Name = "Notification_Generic")]
    public partial class NotificationGeneric : IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Authorisation for value: authorisation
            /// </summary>
            [EnumMember(Value = "authorisation")]
            Authorisation = 1,

            /// <summary>
            /// Enum Capture for value: capture
            /// </summary>
            [EnumMember(Value = "capture")]
            Capture = 2,

            /// <summary>
            /// Enum FrequentCreate for value: frequent_create
            /// </summary>
            [EnumMember(Value = "frequent_create")]
            FrequentCreate = 3,

            /// <summary>
            /// Enum Void for value: void
            /// </summary>
            [EnumMember(Value = "void")]
            Void = 4,

            /// <summary>
            /// Enum Refund for value: refund
            /// </summary>
            [EnumMember(Value = "refund")]
            Refund = 5,

            /// <summary>
            /// Enum Chargeback for value: chargeback
            /// </summary>
            [EnumMember(Value = "chargeback")]
            Chargeback = 6,

            /// <summary>
            /// Enum SubscriptionCreate for value: subscription_create
            /// </summary>
            [EnumMember(Value = "subscription_create")]
            SubscriptionCreate = 7,

            /// <summary>
            /// Enum SubscriptionCapture for value: subscription_capture
            /// </summary>
            [EnumMember(Value = "subscription_capture")]
            SubscriptionCapture = 8,

            /// <summary>
            /// Enum OutPayment for value: out_payment
            /// </summary>
            [EnumMember(Value = "out_payment")]
            OutPayment = 9
        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        /*
        <example>capture</example>
        */
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Failed for value: failed
            /// </summary>
            [EnumMember(Value = "failed")]
            Failed = 1,

            /// <summary>
            /// Enum Success for value: success
            /// </summary>
            [EnumMember(Value = "success")]
            Success = 2
        }


        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        /*
        <example>success</example>
        */
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationGeneric" /> class.
        /// </summary>
        /// <param name="id">ID of the related notified resource.</param>
        /// <param name="key">Merchant identification key.</param>
        /// <param name="type">type.</param>
        /// <param name="status">status.</param>
        /// <param name="messages">messages.</param>
        /// <param name="date">date.</param>
        public NotificationGeneric(Guid id = default(Guid), string key = default(string), TypeEnum? type = default(TypeEnum?), StatusEnum? status = default(StatusEnum?), Collection<string> messages = default(Collection<string>), string date = default(string))
        {
            this.Id = id;
            this.Key = key;
            this.Type = type;
            this.Status = status;
            this.Messages = messages;
            this.Date = date;
        }

        /// <summary>
        /// ID of the related notified resource
        /// </summary>
        /// <value>ID of the related notified resource</value>
        /*
        <example>1bbc14c3-8ca8-492c-887d-1ca86400e4fa</example>
        */
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Merchant identification key
        /// </summary>
        /// <value>Merchant identification key</value>
        /*
        <example>Example Key</example>
        */
        [DataMember(Name = "key", EmitDefaultValue = false)]
        public string Key { get; set; }

        /// <summary>
        /// Gets or Sets Messages
        /// </summary>
        [DataMember(Name = "messages", EmitDefaultValue = false)]
        public Collection<string> Messages { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        /*
        <example>2022-01-01 10:20:30</example>
        */
        [DataMember(Name = "date", EmitDefaultValue = false)]
        public string Date { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NotificationGeneric {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Messages: ").Append(Messages).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
