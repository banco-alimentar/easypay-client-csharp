/*
 * Easypay Payments API
 *
 * <a href='https://www.easypay.pt/en/legal-terms-and-conditions/' class='item'>Terms conditions and legal terms</a><br><a href='https://www.easypay.pt/en/privacy-and-data-protection-policy/' class='item'>Privacy Policy</a>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: tec@easypay.pt
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Easypay.Rest.Client.Client.OpenAPIDateConverter;

namespace Easypay.Rest.Client.Model
{
    /// <summary>
    /// SubscriptionPost201ResponseMethodSddMandate
    /// </summary>
    [DataContract(Name = "_subscription_post_201_response_method_sdd_mandate")]
    public partial class SubscriptionPost201ResponseMethodSddMandate : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionPost201ResponseMethodSddMandate" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="billingEntity">billingEntity.</param>
        /// <param name="iban">iban.</param>
        /// <param name="key">key.</param>
        /// <param name="name">name.</param>
        /// <param name="email">email.</param>
        /// <param name="phone">phone.</param>
        /// <param name="accountHolder">accountHolder.</param>
        /// <param name="countryCode">countryCode.</param>
        /// <param name="referenceAdc">referenceAdc.</param>
        public SubscriptionPost201ResponseMethodSddMandate(string id = default(string), string billingEntity = default(string), string iban = default(string), string key = default(string), string name = default(string), string email = default(string), string phone = default(string), string accountHolder = default(string), string countryCode = default(string), string referenceAdc = default(string))
        {
            this.Id = id;
            this.BillingEntity = billingEntity;
            this.Iban = iban;
            this.Key = key;
            this.Name = name;
            this.Email = email;
            this.Phone = phone;
            this.AccountHolder = accountHolder;
            this.CountryCode = countryCode;
            this.ReferenceAdc = referenceAdc;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets BillingEntity
        /// </summary>
        [DataMember(Name = "billing_entity", EmitDefaultValue = false)]
        public string BillingEntity { get; set; }

        /// <summary>
        /// Gets or Sets Iban
        /// </summary>
        [DataMember(Name = "iban", EmitDefaultValue = false)]
        public string Iban { get; set; }

        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        [DataMember(Name = "key", EmitDefaultValue = false)]
        public string Key { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets Phone
        /// </summary>
        [DataMember(Name = "phone", EmitDefaultValue = false)]
        public string Phone { get; set; }

        /// <summary>
        /// Gets or Sets AccountHolder
        /// </summary>
        [DataMember(Name = "account_holder", EmitDefaultValue = false)]
        public string AccountHolder { get; set; }

        /// <summary>
        /// Gets or Sets CountryCode
        /// </summary>
        [DataMember(Name = "country_code", EmitDefaultValue = false)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceAdc
        /// </summary>
        [DataMember(Name = "reference_adc", EmitDefaultValue = false)]
        public string ReferenceAdc { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SubscriptionPost201ResponseMethodSddMandate {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BillingEntity: ").Append(BillingEntity).Append("\n");
            sb.Append("  Iban: ").Append(Iban).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  AccountHolder: ").Append(AccountHolder).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  ReferenceAdc: ").Append(ReferenceAdc).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
