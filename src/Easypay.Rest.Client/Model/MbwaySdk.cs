/*
 * Easypay API
 *
 * <a href='https://www.easypay.pt/en/terms-conditions-and-legal-terms' class='item'>Terms conditions and legal terms</a><br><a href='https://www.easypay.pt/en/privacy-policy' class='item'>Privacy Policy</a><br><br><b>EasyPay</b> API allows you to query payment meta-data, receive payment notifications and generate payment references. Since EasyPay API is based on REST principles, itÂ´s very easy to write and test applications. You can use our code examples in PHP/CURL to test all the JSON payloads for Easypay Payment Service API.<br><br> We have two distinct environments on our API Services:<br> - If you are looking to receive payments, please use the <a href='https://api.prod.easypay.pt/docs#' class='item'><b>Production Documentation</b></a>.<br> - If you are looking to test or integrate, please use the <a href='https://goo.gl/CPxQnM' class='item'><b>Sandbox Documentation</b></a>. This environment will always have the latest road map deployments, usually all deployments are sent to production within 10 days. This environment is not meant for <b>Load Tests</b>, please do not use for this purpose, you might be blocked. <br><br> All communications have to include two headers for authentication, if fails it will always respond 403.<br> On <a href='https://backoffice.easypay.pt' class='item'><b>Easypay Backoffice</b></a> please create your authentication AccountId and ApiKey on menu: <i><b>Web Services->Configuration API 2.0->Keys</b></i>.<br><br> Our default response produces a <i><b>application/json</b></i>, but the <b>Accept</b> request-header field can be used to specify certain media types which are acceptable for the response. <br>Our available options are: <i>application/json</i>, <i>application/xml</i>, <i>text/csv</i>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: tec@easypay.pt
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Easypay.Rest.Client.Client.OpenAPIDateConverter;

namespace Easypay.Rest.Client.Model
{
    /// <summary>
    /// MbwaySdk
    /// </summary>
    [DataContract(Name = "Mbway_sdk")]
    public partial class MbwaySdk : IEquatable<MbwaySdk>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MbwaySdk" /> class.
        /// </summary>
        /// <param name="purchaseToken">purchaseToken.</param>
        /// <param name="initialTimestamp">initialTimestamp.</param>
        /// <param name="merchantOperationId">unique-concatenation between client identifier and client operation id (total max 20 chars).</param>
        /// <param name="payload">payload.</param>
        public MbwaySdk(string purchaseToken = default(string), string initialTimestamp = default(string), string merchantOperationId = default(string), string payload = default(string))
        {
            this.PurchaseToken = purchaseToken;
            this.InitialTimestamp = initialTimestamp;
            this.MerchantOperationId = merchantOperationId;
            this.Payload = payload;
        }

        /// <summary>
        /// Gets or Sets PurchaseToken
        /// </summary>
        [DataMember(Name = "purchase_token", EmitDefaultValue = false)]
        public string PurchaseToken { get; set; }

        /// <summary>
        /// Gets or Sets InitialTimestamp
        /// </summary>
        [DataMember(Name = "initial_timestamp", EmitDefaultValue = false)]
        public string InitialTimestamp { get; set; }

        /// <summary>
        /// unique-concatenation between client identifier and client operation id (total max 20 chars)
        /// </summary>
        /// <value>unique-concatenation between client identifier and client operation id (total max 20 chars)</value>
        [DataMember(Name = "merchant_operation_id", EmitDefaultValue = false)]
        public string MerchantOperationId { get; set; }

        /// <summary>
        /// Gets or Sets Payload
        /// </summary>
        [DataMember(Name = "payload", EmitDefaultValue = false)]
        public string Payload { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MbwaySdk {\n");
            sb.Append("  PurchaseToken: ").Append(PurchaseToken).Append("\n");
            sb.Append("  InitialTimestamp: ").Append(InitialTimestamp).Append("\n");
            sb.Append("  MerchantOperationId: ").Append(MerchantOperationId).Append("\n");
            sb.Append("  Payload: ").Append(Payload).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MbwaySdk);
        }

        /// <summary>
        /// Returns true if MbwaySdk instances are equal
        /// </summary>
        /// <param name="input">Instance of MbwaySdk to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MbwaySdk input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PurchaseToken == input.PurchaseToken ||
                    (this.PurchaseToken != null &&
                    this.PurchaseToken.Equals(input.PurchaseToken))
                ) && 
                (
                    this.InitialTimestamp == input.InitialTimestamp ||
                    (this.InitialTimestamp != null &&
                    this.InitialTimestamp.Equals(input.InitialTimestamp))
                ) && 
                (
                    this.MerchantOperationId == input.MerchantOperationId ||
                    (this.MerchantOperationId != null &&
                    this.MerchantOperationId.Equals(input.MerchantOperationId))
                ) && 
                (
                    this.Payload == input.Payload ||
                    (this.Payload != null &&
                    this.Payload.Equals(input.Payload))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PurchaseToken != null)
                    hashCode = hashCode * 59 + this.PurchaseToken.GetHashCode();
                if (this.InitialTimestamp != null)
                    hashCode = hashCode * 59 + this.InitialTimestamp.GetHashCode();
                if (this.MerchantOperationId != null)
                    hashCode = hashCode * 59 + this.MerchantOperationId.GetHashCode();
                if (this.Payload != null)
                    hashCode = hashCode * 59 + this.Payload.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
