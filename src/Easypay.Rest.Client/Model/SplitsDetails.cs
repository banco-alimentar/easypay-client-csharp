/*
 * Easypay API
 *
 * EasyPay - API allows you to query payment meta-data, receive payment notifications and generate payment references. Two distinct environments - [Sandbox environment](https://api.test.easypay.pt/docs) and [Production environment](https://api.prod.easypay.pt/docs).
 *
 * The version of the OpenAPI document: 2.0.2
 * Contact: tec@easypay.pt
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Easypay.Rest.Client.Client.OpenAPIDateConverter;

namespace Easypay.Rest.Client.Model
{
    /// <summary>
    /// SplitsDetails
    /// </summary>
    [DataContract(Name = "Splits_Details")]
    public partial class SplitsDetails : IEquatable<SplitsDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SplitsDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SplitsDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SplitsDetails" /> class.
        /// </summary>
        /// <param name="splitKey">Your internal key identifying this split.</param>
        /// <param name="splitDescriptive">A small observation for this split.</param>
        /// <param name="value">Total split funds, rounded with 2 decimals (required).</param>
        /// <param name="account">account.</param>
        /// <param name="marginValue">Total margin funds, rounded with 2 decimals.</param>
        /// <param name="marginAccount">marginAccount.</param>
        public SplitsDetails(string splitKey = default(string), string splitDescriptive = default(string), double value = default(double), SplitsDetailsAccount account = default(SplitsDetailsAccount), double marginValue = default(double), SplitsDetailsMarginAccount marginAccount = default(SplitsDetailsMarginAccount))
        {
            this.Value = value;
            this.SplitKey = splitKey;
            this.SplitDescriptive = splitDescriptive;
            this.Account = account;
            this.MarginValue = marginValue;
            this.MarginAccount = marginAccount;
        }

        /// <summary>
        /// Your internal key identifying this split
        /// </summary>
        /// <value>Your internal key identifying this split</value>
        [DataMember(Name = "split_key", EmitDefaultValue = false)]
        public string SplitKey { get; set; }

        /// <summary>
        /// A small observation for this split
        /// </summary>
        /// <value>A small observation for this split</value>
        [DataMember(Name = "split_descriptive", EmitDefaultValue = false)]
        public string SplitDescriptive { get; set; }

        /// <summary>
        /// Total split funds, rounded with 2 decimals
        /// </summary>
        /// <value>Total split funds, rounded with 2 decimals</value>
        [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = false)]
        public double Value { get; set; }

        /// <summary>
        /// Gets or Sets Account
        /// </summary>
        [DataMember(Name = "account", EmitDefaultValue = false)]
        public SplitsDetailsAccount Account { get; set; }

        /// <summary>
        /// Total margin funds, rounded with 2 decimals
        /// </summary>
        /// <value>Total margin funds, rounded with 2 decimals</value>
        [DataMember(Name = "margin_value", EmitDefaultValue = false)]
        public double MarginValue { get; set; }

        /// <summary>
        /// Gets or Sets MarginAccount
        /// </summary>
        [DataMember(Name = "margin_account", EmitDefaultValue = false)]
        public SplitsDetailsMarginAccount MarginAccount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SplitsDetails {\n");
            sb.Append("  SplitKey: ").Append(SplitKey).Append("\n");
            sb.Append("  SplitDescriptive: ").Append(SplitDescriptive).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  MarginValue: ").Append(MarginValue).Append("\n");
            sb.Append("  MarginAccount: ").Append(MarginAccount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SplitsDetails);
        }

        /// <summary>
        /// Returns true if SplitsDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of SplitsDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SplitsDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SplitKey == input.SplitKey ||
                    (this.SplitKey != null &&
                    this.SplitKey.Equals(input.SplitKey))
                ) && 
                (
                    this.SplitDescriptive == input.SplitDescriptive ||
                    (this.SplitDescriptive != null &&
                    this.SplitDescriptive.Equals(input.SplitDescriptive))
                ) && 
                (
                    this.Value == input.Value ||
                    this.Value.Equals(input.Value)
                ) && 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                ) && 
                (
                    this.MarginValue == input.MarginValue ||
                    this.MarginValue.Equals(input.MarginValue)
                ) && 
                (
                    this.MarginAccount == input.MarginAccount ||
                    (this.MarginAccount != null &&
                    this.MarginAccount.Equals(input.MarginAccount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SplitKey != null)
                    hashCode = hashCode * 59 + this.SplitKey.GetHashCode();
                if (this.SplitDescriptive != null)
                    hashCode = hashCode * 59 + this.SplitDescriptive.GetHashCode();
                hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Account != null)
                    hashCode = hashCode * 59 + this.Account.GetHashCode();
                hashCode = hashCode * 59 + this.MarginValue.GetHashCode();
                if (this.MarginAccount != null)
                    hashCode = hashCode * 59 + this.MarginAccount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // SplitKey (string) maxLength
            if(this.SplitKey != null && this.SplitKey.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SplitKey, length must be less than 50.", new [] { "SplitKey" });
            }

            // SplitDescriptive (string) maxLength
            if(this.SplitDescriptive != null && this.SplitDescriptive.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SplitDescriptive, length must be less than 255.", new [] { "SplitDescriptive" });
            }

            // Value (double) minimum
            if(this.Value < (double)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Value, must be a value greater than or equal to 0.", new [] { "Value" });
            }

            // MarginValue (double) minimum
            if(this.MarginValue < (double)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MarginValue, must be a value greater than or equal to 0.", new [] { "MarginValue" });
            }

            yield break;
        }
    }

}
