/*
 * Easypay Payments API
 *
 * <a href='https://www.easypay.pt/en/legal-terms-and-conditions/' class='item'>Terms conditions and legal terms</a><br><a href='https://www.easypay.pt/en/privacy-and-data-protection-policy/' class='item'>Privacy Policy</a>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: tec@easypay.pt
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Easypay.Rest.Client.Client.OpenAPIDateConverter;

namespace Easypay.Rest.Client.Model
{
    /// <summary>
    /// ConfigDetails
    /// </summary>
    [DataContract(Name = "Config_Details")]
    public partial class ConfigDetails : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigDetails" /> class.
        /// </summary>
        /// <param name="generic">generic.</param>
        /// <param name="authorisation">authorisation.</param>
        /// <param name="transaction">transaction.</param>
        /// <param name="visaFwd">visaFwd.</param>
        /// <param name="visaDetail">visaDetail.</param>
        /// <param name="account">account.</param>
        /// <param name="clientId">clientId.</param>
        /// <param name="paymentMethods">paymentMethods.</param>
        public ConfigDetails(string generic = default(string), string authorisation = default(string), string transaction = default(string), string visaFwd = default(string), string visaDetail = default(string), string account = default(string), string clientId = default(string), Collection<string> paymentMethods = default(Collection<string>))
        {
            this.Generic = generic;
            this.Authorisation = authorisation;
            this.Transaction = transaction;
            this.VisaFwd = visaFwd;
            this.VisaDetail = visaDetail;
            this.Account = account;
            this.ClientId = clientId;
            this.PaymentMethods = paymentMethods;
        }

        /// <summary>
        /// Gets or Sets Generic
        /// </summary>
        [DataMember(Name = "generic", EmitDefaultValue = false)]
        public string Generic { get; set; }

        /// <summary>
        /// Gets or Sets Authorisation
        /// </summary>
        [DataMember(Name = "authorisation", EmitDefaultValue = false)]
        public string Authorisation { get; set; }

        /// <summary>
        /// Gets or Sets Transaction
        /// </summary>
        [DataMember(Name = "transaction", EmitDefaultValue = false)]
        public string Transaction { get; set; }

        /// <summary>
        /// Gets or Sets VisaFwd
        /// </summary>
        [DataMember(Name = "visa_fwd", EmitDefaultValue = false)]
        public string VisaFwd { get; set; }

        /// <summary>
        /// Gets or Sets VisaDetail
        /// </summary>
        [DataMember(Name = "visa_detail", EmitDefaultValue = false)]
        public string VisaDetail { get; set; }

        /// <summary>
        /// Gets or Sets Account
        /// </summary>
        [DataMember(Name = "account", EmitDefaultValue = false)]
        public string Account { get; set; }

        /// <summary>
        /// Gets or Sets ClientId
        /// </summary>
        [DataMember(Name = "client_id", EmitDefaultValue = false)]
        public string ClientId { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethods
        /// </summary>
        [DataMember(Name = "payment_methods", EmitDefaultValue = false)]
        public Collection<string> PaymentMethods { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConfigDetails {\n");
            sb.Append("  Generic: ").Append(Generic).Append("\n");
            sb.Append("  Authorisation: ").Append(Authorisation).Append("\n");
            sb.Append("  Transaction: ").Append(Transaction).Append("\n");
            sb.Append("  VisaFwd: ").Append(VisaFwd).Append("\n");
            sb.Append("  VisaDetail: ").Append(VisaDetail).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  PaymentMethods: ").Append(PaymentMethods).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
