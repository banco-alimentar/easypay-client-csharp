/*
 * Easypay Payments API
 *
 * <a href='https://www.easypay.pt/en/legal-terms-and-conditions/' class='item'>Terms conditions and legal terms</a><br><a href='https://www.easypay.pt/en/privacy-and-data-protection-policy/' class='item'>Privacy Policy</a>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: tec@easypay.pt
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Easypay.Rest.Client.Client.OpenAPIDateConverter;

namespace Easypay.Rest.Client.Model
{
    /// <summary>
    /// OutAccount
    /// </summary>
    [DataContract(Name = "Out-Account")]
    public partial class OutAccount : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OutAccount" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OutAccount() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OutAccount" /> class.
        /// </summary>
        /// <param name="accountHolder">Bank account holder name (required).</param>
        /// <param name="iban">Only IBANS from SEPA zones are supported (required).</param>
        /// <param name="email">email (required).</param>
        /// <param name="phone">phone (required).</param>
        /// <param name="key">Custom string controlled by our clients.</param>
        /// <param name="countryCode">Bank account country code.</param>
        public OutAccount(string accountHolder = default(string), string iban = default(string), string email = default(string), string phone = default(string), string key = default(string), string countryCode = default(string))
        {
            // to ensure "accountHolder" is required (not null)
            if (accountHolder == null)
            {
                throw new ArgumentNullException("accountHolder is a required property for OutAccount and cannot be null");
            }
            this.AccountHolder = accountHolder;
            // to ensure "iban" is required (not null)
            if (iban == null)
            {
                throw new ArgumentNullException("iban is a required property for OutAccount and cannot be null");
            }
            this.Iban = iban;
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new ArgumentNullException("email is a required property for OutAccount and cannot be null");
            }
            this.Email = email;
            // to ensure "phone" is required (not null)
            if (phone == null)
            {
                throw new ArgumentNullException("phone is a required property for OutAccount and cannot be null");
            }
            this.Phone = phone;
            this.Key = key;
            this.CountryCode = countryCode;
        }

        /// <summary>
        /// Bank account holder name
        /// </summary>
        /// <value>Bank account holder name</value>
        [DataMember(Name = "account_holder", IsRequired = true, EmitDefaultValue = true)]
        public string AccountHolder { get; set; }

        /// <summary>
        /// Only IBANS from SEPA zones are supported
        /// </summary>
        /// <value>Only IBANS from SEPA zones are supported</value>
        [DataMember(Name = "iban", IsRequired = true, EmitDefaultValue = true)]
        public string Iban { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name = "email", IsRequired = true, EmitDefaultValue = true)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets Phone
        /// </summary>
        [DataMember(Name = "phone", IsRequired = true, EmitDefaultValue = true)]
        public string Phone { get; set; }

        /// <summary>
        /// Custom string controlled by our clients
        /// </summary>
        /// <value>Custom string controlled by our clients</value>
        [DataMember(Name = "key", EmitDefaultValue = false)]
        public string Key { get; set; }

        /// <summary>
        /// Bank account country code
        /// </summary>
        /// <value>Bank account country code</value>
        [DataMember(Name = "country_code", EmitDefaultValue = false)]
        [Obsolete]
        public string CountryCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OutAccount {\n");
            sb.Append("  AccountHolder: ").Append(AccountHolder).Append("\n");
            sb.Append("  Iban: ").Append(Iban).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AccountHolder (string) maxLength
            if (this.AccountHolder != null && this.AccountHolder.Length > 100)
            {
                yield return new ValidationResult("Invalid value for AccountHolder, length must be less than 100.", new[] { "AccountHolder" });
            }

            // Iban (string) maxLength
            if (this.Iban != null && this.Iban.Length > 34)
            {
                yield return new ValidationResult("Invalid value for Iban, length must be less than 34.", new[] { "Iban" });
            }

            // Email (string) maxLength
            if (this.Email != null && this.Email.Length > 50)
            {
                yield return new ValidationResult("Invalid value for Email, length must be less than 50.", new[] { "Email" });
            }

            // Phone (string) maxLength
            if (this.Phone != null && this.Phone.Length > 20)
            {
                yield return new ValidationResult("Invalid value for Phone, length must be less than 20.", new[] { "Phone" });
            }

            // Key (string) maxLength
            if (this.Key != null && this.Key.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Key, length must be less than 255.", new[] { "Key" });
            }

            yield break;
        }
    }

}
