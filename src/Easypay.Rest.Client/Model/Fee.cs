/*
 * Easypay Payments API
 *
 * <a href='https://www.easypay.pt/en/legal-terms-and-conditions/' class='item'>Terms conditions and legal terms</a><br><a href='https://www.easypay.pt/en/privacy-and-data-protection-policy/' class='item'>Privacy Policy</a>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: tec@easypay.pt
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Easypay.Rest.Client.Client.OpenAPIDateConverter;

namespace Easypay.Rest.Client.Model
{
    /// <summary>
    ///   An object that represents a set of amounts in different categories such as fixed, variable, and VAT,   each with an associated currency. The structure includes:   - **fixed_amount**: Represents a fixed fee applied to the transaction.   - **variable_amount**: Represents a variable fee, usually dependent on the transaction amount.   - **vat_amount**: Represents the value-added tax (VAT) applied to the fees.   All amounts are represented in a specific currency.
    /// </summary>
    [DataContract(Name = "Fee")]
    public partial class Fee : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Fee" /> class.
        /// </summary>
        /// <param name="fixedAmount">The fixed fee amount applied to a transaction..</param>
        /// <param name="variableAmount">The variable fee amount applied to this transaction.</param>
        /// <param name="vatAmount">The vat amount applied to this transaction..</param>
        public Fee(Money fixedAmount = default(Money), Money variableAmount = default(Money), Money vatAmount = default(Money))
        {
            this.FixedAmount = fixedAmount;
            this.VariableAmount = variableAmount;
            this.VatAmount = vatAmount;
        }

        /// <summary>
        /// The fixed fee amount applied to a transaction.
        /// </summary>
        /// <value>The fixed fee amount applied to a transaction.</value>
        [DataMember(Name = "fixed_amount", EmitDefaultValue = false)]
        public Money FixedAmount { get; set; }

        /// <summary>
        /// The variable fee amount applied to this transaction
        /// </summary>
        /// <value>The variable fee amount applied to this transaction</value>
        [DataMember(Name = "variable_amount", EmitDefaultValue = false)]
        public Money VariableAmount { get; set; }

        /// <summary>
        /// The vat amount applied to this transaction.
        /// </summary>
        /// <value>The vat amount applied to this transaction.</value>
        [DataMember(Name = "vat_amount", EmitDefaultValue = false)]
        public Money VatAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Fee {\n");
            sb.Append("  FixedAmount: ").Append(FixedAmount).Append("\n");
            sb.Append("  VariableAmount: ").Append(VariableAmount).Append("\n");
            sb.Append("  VatAmount: ").Append(VatAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
