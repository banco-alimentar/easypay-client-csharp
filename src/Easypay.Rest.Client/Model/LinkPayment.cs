/*
 * Easypay Payments API
 *
 * <a href='https://www.easypay.pt/en/legal-terms-and-conditions/' class='item'>Terms conditions and legal terms</a><br><a href='https://www.easypay.pt/en/privacy-and-data-protection-policy/' class='item'>Privacy Policy</a>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: tec@easypay.pt
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Easypay.Rest.Client.Client.OpenAPIDateConverter;

namespace Easypay.Rest.Client.Model
{
    /// <summary>
    /// LinkPayment
    /// </summary>
    [DataContract(Name = "Link_payment")]
    public partial class LinkPayment : IValidatableObject
    {
        /// <summary>
        /// Defines Methods
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MethodsEnum
        {
            /// <summary>
            /// Enum MB for value: MB
            /// </summary>
            [EnumMember(Value = "MB")]
            MB = 1,

            /// <summary>
            /// Enum MBW for value: MBW
            /// </summary>
            [EnumMember(Value = "MBW")]
            MBW = 2,

            /// <summary>
            /// Enum DD for value: DD
            /// </summary>
            [EnumMember(Value = "DD")]
            DD = 3,

            /// <summary>
            /// Enum CC for value: CC
            /// </summary>
            [EnumMember(Value = "CC")]
            CC = 4,

            /// <summary>
            /// Enum SC for value: SC
            /// </summary>
            [EnumMember(Value = "SC")]
            SC = 5,

            /// <summary>
            /// Enum UF for value: UF
            /// </summary>
            [EnumMember(Value = "UF")]
            UF = 6,

            /// <summary>
            /// Enum VI for value: VI
            /// </summary>
            [EnumMember(Value = "VI")]
            VI = 7
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LinkPayment" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="expirationTime">expirationTime.</param>
        /// <param name="methods">the payment methods available to some pay-by-link payment.</param>
        /// <param name="capture">capture.</param>
        /// <param name="single">single.</param>
        /// <param name="frequent">frequent.</param>
        /// <param name="subscription">subscription.</param>
        public LinkPayment(Guid id = default(Guid), DateTime expirationTime = default(DateTime), Collection<MethodsEnum> methods = default(Collection<MethodsEnum>), PayByLinkCapture capture = default(PayByLinkCapture), PayByLinkSingle single = default(PayByLinkSingle), PayByLinkFrequent frequent = default(PayByLinkFrequent), Subscription subscription = default(Subscription))
        {
            this.Id = id;
            this.ExpirationTime = expirationTime;
            this.Methods = methods;
            this.Capture = capture;
            this.Single = single;
            this.Frequent = frequent;
            this.Subscription = subscription;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets ExpirationTime
        /// </summary>
        [DataMember(Name = "expiration_time", EmitDefaultValue = false)]
        public DateTime ExpirationTime { get; set; }

        /// <summary>
        /// the payment methods available to some pay-by-link payment
        /// </summary>
        /// <value>the payment methods available to some pay-by-link payment</value>
        [DataMember(Name = "methods", EmitDefaultValue = false)]
        public Collection<LinkPayment.MethodsEnum> Methods { get; set; }

        /// <summary>
        /// Gets or Sets Capture
        /// </summary>
        [DataMember(Name = "capture", EmitDefaultValue = false)]
        public PayByLinkCapture Capture { get; set; }

        /// <summary>
        /// Gets or Sets Single
        /// </summary>
        [DataMember(Name = "single", EmitDefaultValue = false)]
        public PayByLinkSingle Single { get; set; }

        /// <summary>
        /// Gets or Sets Frequent
        /// </summary>
        [DataMember(Name = "frequent", EmitDefaultValue = false)]
        public PayByLinkFrequent Frequent { get; set; }

        /// <summary>
        /// Gets or Sets Subscription
        /// </summary>
        [DataMember(Name = "subscription", EmitDefaultValue = false)]
        public Subscription Subscription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LinkPayment {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ExpirationTime: ").Append(ExpirationTime).Append("\n");
            sb.Append("  Methods: ").Append(Methods).Append("\n");
            sb.Append("  Capture: ").Append(Capture).Append("\n");
            sb.Append("  Single: ").Append(Single).Append("\n");
            sb.Append("  Frequent: ").Append(Frequent).Append("\n");
            sb.Append("  Subscription: ").Append(Subscription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
