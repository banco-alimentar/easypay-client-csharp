/*
 * Easypay Payments API
 *
 * <a href='https://www.easypay.pt/en/legal-terms-and-conditions/' class='item'>Terms conditions and legal terms</a><br><a href='https://www.easypay.pt/en/privacy-and-data-protection-policy/' class='item'>Privacy Policy</a>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: tec@easypay.pt
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Easypay.Rest.Client.Client.OpenAPIDateConverter;

namespace Easypay.Rest.Client.Model
{
    /// <summary>
    /// An object containing detailed information about a specific operation and payment.     This includes unique identifiers, the method used for the payment, and the type of payment.
    /// </summary>
    [DataContract(Name = "LedgerEntryDetails")]
    public partial class LedgerEntryDetails : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LedgerEntryDetails" /> class.
        /// </summary>
        /// <param name="operationId">A unique identifier for the operation, represented as a UUID..</param>
        /// <param name="operationKey">A merchant-specific identification key for the operation..</param>
        /// <param name="method">The payment method used for the transaction (e.g., CC for credit card)..</param>
        /// <param name="paymentId">A unique identifier for the payment, represented as a UUID..</param>
        /// <param name="paymentType">The type of payment, such as &#39;single&#39; for a one-time payment..</param>
        /// <param name="paymentKey"> A merchant-specific identification key for the payment..</param>
        public LedgerEntryDetails(string operationId = default(string), string operationKey = default(string), string method = default(string), string paymentId = default(string), string paymentType = default(string), string paymentKey = default(string))
        {
            this.OperationId = operationId;
            this.OperationKey = operationKey;
            this.Method = method;
            this.PaymentId = paymentId;
            this.PaymentType = paymentType;
            this.PaymentKey = paymentKey;
        }

        /// <summary>
        /// A unique identifier for the operation, represented as a UUID.
        /// </summary>
        /// <value>A unique identifier for the operation, represented as a UUID.</value>
        /*
        <example>502b0844-13a8-4788-b775-5e4cc8194a50</example>
        */
        [DataMember(Name = "operation_id", EmitDefaultValue = false)]
        public string OperationId { get; set; }

        /// <summary>
        /// A merchant-specific identification key for the operation.
        /// </summary>
        /// <value>A merchant-specific identification key for the operation.</value>
        [DataMember(Name = "operation_key", EmitDefaultValue = false)]
        public string OperationKey { get; set; }

        /// <summary>
        /// The payment method used for the transaction (e.g., CC for credit card).
        /// </summary>
        /// <value>The payment method used for the transaction (e.g., CC for credit card).</value>
        /*
        <example>CC</example>
        */
        [DataMember(Name = "method", EmitDefaultValue = false)]
        public string Method { get; set; }

        /// <summary>
        /// A unique identifier for the payment, represented as a UUID.
        /// </summary>
        /// <value>A unique identifier for the payment, represented as a UUID.</value>
        /*
        <example>235934c2-467d-44fa-9e81-9cbd9d1a6f61</example>
        */
        [DataMember(Name = "payment_id", EmitDefaultValue = false)]
        public string PaymentId { get; set; }

        /// <summary>
        /// The type of payment, such as &#39;single&#39; for a one-time payment.
        /// </summary>
        /// <value>The type of payment, such as &#39;single&#39; for a one-time payment.</value>
        /*
        <example>single</example>
        */
        [DataMember(Name = "payment_type", EmitDefaultValue = false)]
        public string PaymentType { get; set; }

        /// <summary>
        ///  A merchant-specific identification key for the payment.
        /// </summary>
        /// <value> A merchant-specific identification key for the payment.</value>
        [DataMember(Name = "payment_key", EmitDefaultValue = false)]
        public string PaymentKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LedgerEntryDetails {\n");
            sb.Append("  OperationId: ").Append(OperationId).Append("\n");
            sb.Append("  OperationKey: ").Append(OperationKey).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  PaymentId: ").Append(PaymentId).Append("\n");
            sb.Append("  PaymentType: ").Append(PaymentType).Append("\n");
            sb.Append("  PaymentKey: ").Append(PaymentKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
