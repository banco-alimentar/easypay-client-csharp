/*
 * Easypay Payments API
 *
 * <a href='https://www.easypay.pt/en/legal-terms-and-conditions/' class='item'>Terms conditions and legal terms</a><br><a href='https://www.easypay.pt/en/privacy-and-data-protection-policy/' class='item'>Privacy Policy</a>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: tec@easypay.pt
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Easypay.Rest.Client.Client.OpenAPIDateConverter;

namespace Easypay.Rest.Client.Model
{
    /// <summary>
    /// ListRefundModel
    /// </summary>
    [DataContract(Name = "ListRefundModel")]
    public partial class ListRefundModel : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public RefundStatus? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ListRefundModel" /> class.
        /// </summary>
        /// <param name="id">A unique identifier for the resource. While typically formatted as a UUID (Universally Unique Identifier), it can also be in other formats as defined by the user. This field ensures the resource can be distinctly recognized and referenced..</param>
        /// <param name="status">status.</param>
        /// <param name="transactionKey">A customizable text field for users to input their own identifier for the resource. This can be any string that helps the user uniquely identify or reference the resource in their own system..</param>
        /// <param name="value">The monetary amount requested for the transaction. This field is formatted as a double, and will be rounded to two decimal places (e.g., \&quot;100.00\&quot;). The value must be greater than or equal to 0.5..</param>
        /// <param name="iban">(Required for fallback): The International Bank Account Number of the account to which the refund will be sent. This field is used to uniquely identify the recipient&#39;s bank account across international borders..</param>
        /// <param name="email">(Required for fallback): The email address of the account holder. This field is used for communication purposes, including sending notifications about the refund stat..</param>
        /// <param name="phone">(Required for fallback): The contact phone number of the account holder, including the country code indicator (e.g., \&quot;+351\&quot;). This field is used for communication purposes, such as contacting the account holder for verification..</param>
        /// <param name="accountHolder">(Required for fallback): The name of the person or entity that holds the bank account. This field ensures that the refund is directed to the correct recipient..</param>
        /// <param name="capture">capture.</param>
        /// <param name="createdAt">The timestamp indicating when the resource was created. It is formatted as \&quot;YYYY-MM-DD HH:MM\&quot;..</param>
        /// <param name="updatedAt">The timestamp indicating when the resource was updated. It is formatted as \&quot;YYYY-MM-DD HH:MM\&quot;..</param>
        public ListRefundModel(string id = default(string), RefundStatus? status = default(RefundStatus?), string transactionKey = default(string), double value = default(double), string iban = default(string), string email = default(string), string phone = default(string), string accountHolder = default(string), RefundScopedCapture capture = default(RefundScopedCapture), string createdAt = default(string), string updatedAt = default(string))
        {
            this.Id = id;
            this.Status = status;
            this.TransactionKey = transactionKey;
            this.Value = value;
            this.Iban = iban;
            this.Email = email;
            this.Phone = phone;
            this.AccountHolder = accountHolder;
            this.Capture = capture;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
        }

        /// <summary>
        /// A unique identifier for the resource. While typically formatted as a UUID (Universally Unique Identifier), it can also be in other formats as defined by the user. This field ensures the resource can be distinctly recognized and referenced.
        /// </summary>
        /// <value>A unique identifier for the resource. While typically formatted as a UUID (Universally Unique Identifier), it can also be in other formats as defined by the user. This field ensures the resource can be distinctly recognized and referenced.</value>
        /*
        <example>c6056234-a3f9-42de-b944-3ed793fcb6bb</example>
        */
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// A customizable text field for users to input their own identifier for the resource. This can be any string that helps the user uniquely identify or reference the resource in their own system.
        /// </summary>
        /// <value>A customizable text field for users to input their own identifier for the resource. This can be any string that helps the user uniquely identify or reference the resource in their own system.</value>
        /*
        <example>01J1PKR2RPHJNJQGFWGDYXY0KM</example>
        */
        [DataMember(Name = "transaction_key", EmitDefaultValue = false)]
        public string TransactionKey { get; set; }

        /// <summary>
        /// The monetary amount requested for the transaction. This field is formatted as a double, and will be rounded to two decimal places (e.g., \&quot;100.00\&quot;). The value must be greater than or equal to 0.5.
        /// </summary>
        /// <value>The monetary amount requested for the transaction. This field is formatted as a double, and will be rounded to two decimal places (e.g., \&quot;100.00\&quot;). The value must be greater than or equal to 0.5.</value>
        /*
        <example>15.32</example>
        */
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public double Value { get; set; }

        /// <summary>
        /// (Required for fallback): The International Bank Account Number of the account to which the refund will be sent. This field is used to uniquely identify the recipient&#39;s bank account across international borders.
        /// </summary>
        /// <value>(Required for fallback): The International Bank Account Number of the account to which the refund will be sent. This field is used to uniquely identify the recipient&#39;s bank account across international borders.</value>
        [DataMember(Name = "iban", EmitDefaultValue = false)]
        public string Iban { get; set; }

        /// <summary>
        /// (Required for fallback): The email address of the account holder. This field is used for communication purposes, including sending notifications about the refund stat.
        /// </summary>
        /// <value>(Required for fallback): The email address of the account holder. This field is used for communication purposes, including sending notifications about the refund stat.</value>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// (Required for fallback): The contact phone number of the account holder, including the country code indicator (e.g., \&quot;+351\&quot;). This field is used for communication purposes, such as contacting the account holder for verification.
        /// </summary>
        /// <value>(Required for fallback): The contact phone number of the account holder, including the country code indicator (e.g., \&quot;+351\&quot;). This field is used for communication purposes, such as contacting the account holder for verification.</value>
        [DataMember(Name = "phone", EmitDefaultValue = false)]
        public string Phone { get; set; }

        /// <summary>
        /// (Required for fallback): The name of the person or entity that holds the bank account. This field ensures that the refund is directed to the correct recipient.
        /// </summary>
        /// <value>(Required for fallback): The name of the person or entity that holds the bank account. This field ensures that the refund is directed to the correct recipient.</value>
        [DataMember(Name = "account_holder", EmitDefaultValue = false)]
        public string AccountHolder { get; set; }

        /// <summary>
        /// Gets or Sets Capture
        /// </summary>
        [DataMember(Name = "capture", EmitDefaultValue = false)]
        public RefundScopedCapture Capture { get; set; }

        /// <summary>
        /// The timestamp indicating when the resource was created. It is formatted as \&quot;YYYY-MM-DD HH:MM\&quot;.
        /// </summary>
        /// <value>The timestamp indicating when the resource was created. It is formatted as \&quot;YYYY-MM-DD HH:MM\&quot;.</value>
        /*
        <example>2006-01-02 15:04</example>
        */
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// The timestamp indicating when the resource was updated. It is formatted as \&quot;YYYY-MM-DD HH:MM\&quot;.
        /// </summary>
        /// <value>The timestamp indicating when the resource was updated. It is formatted as \&quot;YYYY-MM-DD HH:MM\&quot;.</value>
        /*
        <example>2006-01-02 15:04</example>
        */
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ListRefundModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TransactionKey: ").Append(TransactionKey).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Iban: ").Append(Iban).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  AccountHolder: ").Append(AccountHolder).Append("\n");
            sb.Append("  Capture: ").Append(Capture).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // TransactionKey (string) maxLength
            if (this.TransactionKey != null && this.TransactionKey.Length > 255)
            {
                yield return new ValidationResult("Invalid value for TransactionKey, length must be less than 255.", new[] { "TransactionKey" });
            }

            // Value (double) minimum
            if (this.Value < (double)0.5)
            {
                yield return new ValidationResult("Invalid value for Value, must be a value greater than or equal to 0.5.", new[] { "Value" });
            }

            yield break;
        }
    }

}
