/*
 * Easypay Payments API
 *
 * <a href='https://www.easypay.pt/en/legal-terms-and-conditions/' class='item'>Terms conditions and legal terms</a><br><a href='https://www.easypay.pt/en/privacy-and-data-protection-policy/' class='item'>Privacy Policy</a>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: tec@easypay.pt
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Easypay.Rest.Client.Client.OpenAPIDateConverter;

namespace Easypay.Rest.Client.Model
{
    /// <summary>
    /// The **LedgerEntry** object represents a single entry in the financial ledger of Easypay reconciliation system. It captures detailed information about a specific financial transaction, including its type, category, and associated monetary details. This object serves as a comprehensive record of all activities impacting an accountâ€™s balance, providing an audit trail for both debits and credits.  Each **LedgerEntry** includes metadata such as unique identifiers and timestamps to track when the entry was created and when the transaction occurred. It also encompasses financial breakdowns like fees, taxes, and transferred amounts, all contextualized with currency information. Additionally, the object can link to specific operations or payment methods, detailing the source and nature of each transaction.
    /// </summary>
    [DataContract(Name = "LedgerEntry")]
    public partial class LedgerEntry : IValidatableObject
    {

        /// <summary>
        /// LedgerTransactionType is a string enum that represents various types of financial transactions recorded in a ledger.  Each transaction type is abbreviated with a code and corresponds to a specific financial operation. The following are the possible values:  - **CP** (capture): Represents the capture of funds, typically after a payment authorization. This transaction finalizes a payment and moves the funds from the payer&#39;s account to the payee&#39;s account.  - **RF** (refund): Represents a refund transaction where previously captured funds are returned to the payer&#39;s account. Often occurs when a customer returns goods or services.  - **RV** (revert): Indicates a revert transaction that undoes a previously made transaction, often used to correct errors or reverse transactions.  - **SP** (split_payment): Represents a split payment transaction, where a payment is divided among multiple recipients or for different purposes within the same transaction.  - **FEE** (fee): Represents a fee transaction, a charge applied for a specific service or transaction such as service fees or processing fees.  - **MAN** (manual movement): Represents a manual movement of funds, typically entered by an administrator or accountant to adjust balances or correct errors.  - **TB** (bank transfer): Represents a bank transfer transaction, where funds are moved between different bank accounts, either within the same bank or across different banks.  - **OT** (out transfer): Indicates an out transfer transaction, where funds are transferred out of the current ledger or account to another external account or ledger.  - **CB** (chargeback): Represents a chargeback transaction, typically initiated by the payer&#39;s bank to reverse a disputed or fraudulent transaction. This transaction withdraws the funds from the payee&#39;s account and returns them to the payer.  - **OP** (out payment): Represents an out payment transaction, where funds are paid out from the ledger to an external party or account, usually to settle debts or make external payments. 
        /// </summary>
        /// <value>LedgerTransactionType is a string enum that represents various types of financial transactions recorded in a ledger.  Each transaction type is abbreviated with a code and corresponds to a specific financial operation. The following are the possible values:  - **CP** (capture): Represents the capture of funds, typically after a payment authorization. This transaction finalizes a payment and moves the funds from the payer&#39;s account to the payee&#39;s account.  - **RF** (refund): Represents a refund transaction where previously captured funds are returned to the payer&#39;s account. Often occurs when a customer returns goods or services.  - **RV** (revert): Indicates a revert transaction that undoes a previously made transaction, often used to correct errors or reverse transactions.  - **SP** (split_payment): Represents a split payment transaction, where a payment is divided among multiple recipients or for different purposes within the same transaction.  - **FEE** (fee): Represents a fee transaction, a charge applied for a specific service or transaction such as service fees or processing fees.  - **MAN** (manual movement): Represents a manual movement of funds, typically entered by an administrator or accountant to adjust balances or correct errors.  - **TB** (bank transfer): Represents a bank transfer transaction, where funds are moved between different bank accounts, either within the same bank or across different banks.  - **OT** (out transfer): Indicates an out transfer transaction, where funds are transferred out of the current ledger or account to another external account or ledger.  - **CB** (chargeback): Represents a chargeback transaction, typically initiated by the payer&#39;s bank to reverse a disputed or fraudulent transaction. This transaction withdraws the funds from the payee&#39;s account and returns them to the payer.  - **OP** (out payment): Represents an out payment transaction, where funds are paid out from the ledger to an external party or account, usually to settle debts or make external payments. </value>
        [DataMember(Name = "transaction_type", EmitDefaultValue = false)]
        public LedgerTransactionType? TransactionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LedgerEntry" /> class.
        /// </summary>
        /// <param name="id">A unique identifier for the ledger entry, represented as a UUID. This ID is used to     uniquely track and reference individual entries within the ledger system..</param>
        /// <param name="createdAt">The timestamp indicating when the resource was created. It is formatted as \&quot;YYYY-MM-DD HH:MM\&quot;..</param>
        /// <param name="transactionTimestamp">The exact timestamp of when the associated transaction occurred. It is formatted as \&quot;YYYY-MM-DD HH:MM\&quot;..</param>
        /// <param name="transactionType">LedgerTransactionType is a string enum that represents various types of financial transactions recorded in a ledger.  Each transaction type is abbreviated with a code and corresponds to a specific financial operation. The following are the possible values:  - **CP** (capture): Represents the capture of funds, typically after a payment authorization. This transaction finalizes a payment and moves the funds from the payer&#39;s account to the payee&#39;s account.  - **RF** (refund): Represents a refund transaction where previously captured funds are returned to the payer&#39;s account. Often occurs when a customer returns goods or services.  - **RV** (revert): Indicates a revert transaction that undoes a previously made transaction, often used to correct errors or reverse transactions.  - **SP** (split_payment): Represents a split payment transaction, where a payment is divided among multiple recipients or for different purposes within the same transaction.  - **FEE** (fee): Represents a fee transaction, a charge applied for a specific service or transaction such as service fees or processing fees.  - **MAN** (manual movement): Represents a manual movement of funds, typically entered by an administrator or accountant to adjust balances or correct errors.  - **TB** (bank transfer): Represents a bank transfer transaction, where funds are moved between different bank accounts, either within the same bank or across different banks.  - **OT** (out transfer): Indicates an out transfer transaction, where funds are transferred out of the current ledger or account to another external account or ledger.  - **CB** (chargeback): Represents a chargeback transaction, typically initiated by the payer&#39;s bank to reverse a disputed or fraudulent transaction. This transaction withdraws the funds from the payee&#39;s account and returns them to the payer.  - **OP** (out payment): Represents an out payment transaction, where funds are paid out from the ledger to an external party or account, usually to settle debts or make external payments. .</param>
        /// <param name="amountDetails">An object containing detailed financial information related to the transaction. The financial_details object provides a breakdown of various components of the transaction, such as fees and transferred amounts..</param>
        /// <param name="transferBatchDate">  The date when the transfer batch is scheduled or processed. The date is represented     in ISO 8601 format (YYYY-MM-DD), indicating the year, month, and day..</param>
        /// <param name="transferBatch">A unique identifier for the transfer batch, typically represented as a string.     This value is used to track and reference a specific batch of transfers within the system..</param>
        /// <param name="descriptive">A brief, user-friendly description of the ledger entry. This is used to provide additional context or notes that describe the nature of the transaction in plain language..</param>
        /// <param name="details">details.</param>
        /// <param name="amount">The transferred amount from this transaction..</param>
        public LedgerEntry(string id = default(string), string createdAt = default(string), string transactionTimestamp = default(string), LedgerTransactionType? transactionType = default(LedgerTransactionType?), FinantialTransactionDetails amountDetails = default(FinantialTransactionDetails), string transferBatchDate = default(string), string transferBatch = default(string), string descriptive = default(string), LedgerEntryDetails details = default(LedgerEntryDetails), Money amount = default(Money))
        {
            this.Id = id;
            this.CreatedAt = createdAt;
            this.TransactionTimestamp = transactionTimestamp;
            this.TransactionType = transactionType;
            this.AmountDetails = amountDetails;
            this.TransferBatchDate = transferBatchDate;
            this.TransferBatch = transferBatch;
            this.Descriptive = descriptive;
            this.Details = details;
            this.Amount = amount;
        }

        /// <summary>
        /// A unique identifier for the ledger entry, represented as a UUID. This ID is used to     uniquely track and reference individual entries within the ledger system.
        /// </summary>
        /// <value>A unique identifier for the ledger entry, represented as a UUID. This ID is used to     uniquely track and reference individual entries within the ledger system.</value>
        /*
        <example>&quot;38c65c65-6b66-42e8-b3db-3a3361ef23e4&quot;</example>
        */
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The timestamp indicating when the resource was created. It is formatted as \&quot;YYYY-MM-DD HH:MM\&quot;.
        /// </summary>
        /// <value>The timestamp indicating when the resource was created. It is formatted as \&quot;YYYY-MM-DD HH:MM\&quot;.</value>
        /*
        <example>2006-01-02 15:04</example>
        */
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// The exact timestamp of when the associated transaction occurred. It is formatted as \&quot;YYYY-MM-DD HH:MM\&quot;.
        /// </summary>
        /// <value>The exact timestamp of when the associated transaction occurred. It is formatted as \&quot;YYYY-MM-DD HH:MM\&quot;.</value>
        [DataMember(Name = "transaction_timestamp", EmitDefaultValue = false)]
        public string TransactionTimestamp { get; set; }

        /// <summary>
        /// An object containing detailed financial information related to the transaction. The financial_details object provides a breakdown of various components of the transaction, such as fees and transferred amounts.
        /// </summary>
        /// <value>An object containing detailed financial information related to the transaction. The financial_details object provides a breakdown of various components of the transaction, such as fees and transferred amounts.</value>
        [DataMember(Name = "amount_details", EmitDefaultValue = false)]
        public FinantialTransactionDetails AmountDetails { get; set; }

        /// <summary>
        ///   The date when the transfer batch is scheduled or processed. The date is represented     in ISO 8601 format (YYYY-MM-DD), indicating the year, month, and day.
        /// </summary>
        /// <value>  The date when the transfer batch is scheduled or processed. The date is represented     in ISO 8601 format (YYYY-MM-DD), indicating the year, month, and day.</value>
        [DataMember(Name = "transfer_batch_date", EmitDefaultValue = false)]
        public string TransferBatchDate { get; set; }

        /// <summary>
        /// A unique identifier for the transfer batch, typically represented as a string.     This value is used to track and reference a specific batch of transfers within the system.
        /// </summary>
        /// <value>A unique identifier for the transfer batch, typically represented as a string.     This value is used to track and reference a specific batch of transfers within the system.</value>
        /*
        <example>&quot;584&quot;</example>
        */
        [DataMember(Name = "transfer_batch", EmitDefaultValue = false)]
        public string TransferBatch { get; set; }

        /// <summary>
        /// A brief, user-friendly description of the ledger entry. This is used to provide additional context or notes that describe the nature of the transaction in plain language.
        /// </summary>
        /// <value>A brief, user-friendly description of the ledger entry. This is used to provide additional context or notes that describe the nature of the transaction in plain language.</value>
        [DataMember(Name = "descriptive", EmitDefaultValue = false)]
        public string Descriptive { get; set; }

        /// <summary>
        /// Gets or Sets Details
        /// </summary>
        [DataMember(Name = "details", EmitDefaultValue = false)]
        public LedgerEntryDetails Details { get; set; }

        /// <summary>
        /// The transferred amount from this transaction.
        /// </summary>
        /// <value>The transferred amount from this transaction.</value>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public Money Amount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LedgerEntry {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  TransactionTimestamp: ").Append(TransactionTimestamp).Append("\n");
            sb.Append("  TransactionType: ").Append(TransactionType).Append("\n");
            sb.Append("  AmountDetails: ").Append(AmountDetails).Append("\n");
            sb.Append("  TransferBatchDate: ").Append(TransferBatchDate).Append("\n");
            sb.Append("  TransferBatch: ").Append(TransferBatch).Append("\n");
            sb.Append("  Descriptive: ").Append(Descriptive).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
