/*
 * Easypay Payments API
 *
 * <a href='https://www.easypay.pt/en/legal-terms-and-conditions/' class='item'>Terms conditions and legal terms</a><br><a href='https://www.easypay.pt/en/privacy-and-data-protection-policy/' class='item'>Privacy Policy</a>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: tec@easypay.pt
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Easypay.Rest.Client.Client.OpenAPIDateConverter;

namespace Easypay.Rest.Client.Model
{
    /// <summary>
    /// Describing the payment configuration.
    /// </summary>
    [DataContract(Name = "checkout_post_request_payment")]
    public partial class CheckoutPostRequestPayment : IValidatableObject
    {
        /// <summary>
        /// Defines Methods
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MethodsEnum
        {
            /// <summary>
            /// Enum Cc for value: cc
            /// </summary>
            [EnumMember(Value = "cc")]
            Cc = 1,

            /// <summary>
            /// Enum Mbw for value: mbw
            /// </summary>
            [EnumMember(Value = "mbw")]
            Mbw = 2,

            /// <summary>
            /// Enum Mb for value: mb
            /// </summary>
            [EnumMember(Value = "mb")]
            Mb = 3,

            /// <summary>
            /// Enum Dd for value: dd
            /// </summary>
            [EnumMember(Value = "dd")]
            Dd = 4,

            /// <summary>
            /// Enum Vi for value: vi
            /// </summary>
            [EnumMember(Value = "vi")]
            Vi = 5,

            /// <summary>
            /// Enum Uf for value: uf
            /// </summary>
            [EnumMember(Value = "uf")]
            Uf = 6,

            /// <summary>
            /// Enum Sc for value: sc
            /// </summary>
            [EnumMember(Value = "sc")]
            Sc = 7,

            /// <summary>
            /// Enum Ap for value: ap
            /// </summary>
            [EnumMember(Value = "ap")]
            Ap = 8
        }

        /// <summary>
        /// The type of payment for Credit Card and MB WAY operations.
        /// </summary>
        /// <value>The type of payment for Credit Card and MB WAY operations.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Sale for value: sale
            /// </summary>
            [EnumMember(Value = "sale")]
            Sale = 1,

            /// <summary>
            /// Enum Authorisation for value: authorisation
            /// </summary>
            [EnumMember(Value = "authorisation")]
            Authorisation = 2
        }


        /// <summary>
        /// The type of payment for Credit Card and MB WAY operations.
        /// </summary>
        /// <value>The type of payment for Credit Card and MB WAY operations.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public Currency? Currency { get; set; }
        /// <summary>
        /// &lt;font color&#x3D;\&quot;#FF0000\&quot;&gt;Required property for subscription payments.&lt;/font&gt;
        /// </summary>
        /// <value>&lt;font color&#x3D;\&quot;#FF0000\&quot;&gt;Required property for subscription payments.&lt;/font&gt;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FrequencyEnum
        {
            /// <summary>
            /// Enum _1D for value: 1D
            /// </summary>
            [EnumMember(Value = "1D")]
            _1D = 1,

            /// <summary>
            /// Enum _1W for value: 1W
            /// </summary>
            [EnumMember(Value = "1W")]
            _1W = 2,

            /// <summary>
            /// Enum _2W for value: 2W
            /// </summary>
            [EnumMember(Value = "2W")]
            _2W = 3,

            /// <summary>
            /// Enum _1M for value: 1M
            /// </summary>
            [EnumMember(Value = "1M")]
            _1M = 4,

            /// <summary>
            /// Enum _2M for value: 2M
            /// </summary>
            [EnumMember(Value = "2M")]
            _2M = 5,

            /// <summary>
            /// Enum _3M for value: 3M
            /// </summary>
            [EnumMember(Value = "3M")]
            _3M = 6,

            /// <summary>
            /// Enum _4M for value: 4M
            /// </summary>
            [EnumMember(Value = "4M")]
            _4M = 7,

            /// <summary>
            /// Enum _6M for value: 6M
            /// </summary>
            [EnumMember(Value = "6M")]
            _6M = 8,

            /// <summary>
            /// Enum _1Y for value: 1Y
            /// </summary>
            [EnumMember(Value = "1Y")]
            _1Y = 9,

            /// <summary>
            /// Enum _2Y for value: 2Y
            /// </summary>
            [EnumMember(Value = "2Y")]
            _2Y = 10,

            /// <summary>
            /// Enum _3Y for value: 3Y
            /// </summary>
            [EnumMember(Value = "3Y")]
            _3Y = 11
        }


        /// <summary>
        /// &lt;font color&#x3D;\&quot;#FF0000\&quot;&gt;Required property for subscription payments.&lt;/font&gt;
        /// </summary>
        /// <value>&lt;font color&#x3D;\&quot;#FF0000\&quot;&gt;Required property for subscription payments.&lt;/font&gt;</value>
        [DataMember(Name = "frequency", EmitDefaultValue = false)]
        public FrequencyEnum? Frequency { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutPostRequestPayment" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CheckoutPostRequestPayment() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutPostRequestPayment" /> class.
        /// </summary>
        /// <param name="methods">The available methods are different according to the chosen payment type:  Available for single, frequent or subscription payment type:  * &#39;CC&#39; (Credit Card) * &#39;DD&#39; (Direct Debit)  Available for single or frequent payment type: * &#39;MBW&#39; (MB WAY)  * &#39;AP&#39; (Apple Pay)  * &#39;GP&#39; (Google Pay)  * &#39;MB&#39; (Multibanco)  * &#39;VI&#39; (Virtual IBAN)  * &#39;UF&#39; (Universo Flex)  * &#39;SC&#39; (Santander Consumer)  * &#39;AP&#39; (Apple Pay) (required).</param>
        /// <param name="type">The type of payment for Credit Card and MB WAY operations. (default to TypeEnum.Sale).</param>
        /// <param name="capture">capture.</param>
        /// <param name="expirationTime">The last possible time to make the payment. Applicable in Multibanco payments.  Note: If the expiration time is less than the default checkout session expiration (which is 30 minutes),&lt;/br&gt; the user won&#39;t be able to interact with the Checkout after that time..</param>
        /// <param name="currency">currency.</param>
        /// <param name="key">The merchant&#39;s key for identifying the payment..</param>
        /// <param name="maxValue">&lt;font color&#x3D;\&quot;#FF0000\&quot;&gt;Additional property for frequent payments.&lt;/font&gt;.</param>
        /// <param name="minValue">&lt;font color&#x3D;\&quot;#FF0000\&quot;&gt;Additional property for frequent payments.&lt;/font&gt;.</param>
        /// <param name="unlimitedPayments">&lt;font color&#x3D;\&quot;#FF0000\&quot;&gt;Additional property for frequent payments.&lt;/font&gt;  Unlimited transactions.&lt;/br&gt;Uses &#39;max_value&#39; and &#39;min_value&#39; as limits per transaction instead. (default to true).</param>
        /// <param name="frequency">&lt;font color&#x3D;\&quot;#FF0000\&quot;&gt;Required property for subscription payments.&lt;/font&gt;.</param>
        /// <param name="maxCaptures">&lt;font color&#x3D;\&quot;#FF0000\&quot;&gt;Additional property for subscription payments.&lt;/font&gt;  Number of payments (required when no expiration_time is set)..</param>
        /// <param name="startTime">&lt;font color&#x3D;\&quot;#FF0000\&quot;&gt;Required property for subscription payments.&lt;/font&gt;  Defining the start of billing cycles..</param>
        /// <param name="failover">&lt;font color&#x3D;\&quot;#FF0000\&quot;&gt;Additional property for subscription payments.&lt;/font&gt;  After all retries failed, the payment cycle can have another try with another single method. (default to false).</param>
        /// <param name="captureNow">&lt;font color&#x3D;\&quot;#FF0000\&quot;&gt;Additional property for subscription payments.&lt;/font&gt;  Whether to schedule an immediate capture and schedule the second one for start_time. (default to false).</param>
        /// <param name="retries">&lt;font color&#x3D;\&quot;#FF0000\&quot;&gt;Additional property for subscription payments.&lt;/font&gt;  Number of retries in each payment cycle.&lt;/br&gt; The chosen frequency will define the max number of possible retries. (default to 0M).</param>
        public CheckoutPostRequestPayment(Collection<MethodsEnum> methods = default(Collection<MethodsEnum>), TypeEnum? type = TypeEnum.Sale, CheckoutPostRequestPaymentCapture capture = default(CheckoutPostRequestPaymentCapture), string expirationTime = default(string), Currency? currency = default(Currency?), string key = default(string), double maxValue = default(double), double minValue = default(double), bool unlimitedPayments = true, FrequencyEnum? frequency = default(FrequencyEnum?), int maxCaptures = default(int), string startTime = default(string), bool failover = false, bool captureNow = false, decimal retries = 0M)
        {
            // to ensure "methods" is required (not null)
            if (methods == null)
            {
                throw new ArgumentNullException("methods is a required property for CheckoutPostRequestPayment and cannot be null");
            }
            this.Methods = methods;
            this.Type = type;
            this.Capture = capture;
            this.ExpirationTime = expirationTime;
            this.Currency = currency;
            this.Key = key;
            this.MaxValue = maxValue;
            this.MinValue = minValue;
            this.UnlimitedPayments = unlimitedPayments;
            this.Frequency = frequency;
            this.MaxCaptures = maxCaptures;
            this.StartTime = startTime;
            this.Failover = failover;
            this.CaptureNow = captureNow;
            this.Retries = retries;
        }

        /// <summary>
        /// The available methods are different according to the chosen payment type:  Available for single, frequent or subscription payment type:  * &#39;CC&#39; (Credit Card) * &#39;DD&#39; (Direct Debit)  Available for single or frequent payment type: * &#39;MBW&#39; (MB WAY)  * &#39;AP&#39; (Apple Pay)  * &#39;GP&#39; (Google Pay)  * &#39;MB&#39; (Multibanco)  * &#39;VI&#39; (Virtual IBAN)  * &#39;UF&#39; (Universo Flex)  * &#39;SC&#39; (Santander Consumer)  * &#39;AP&#39; (Apple Pay)
        /// </summary>
        /// <value>The available methods are different according to the chosen payment type:  Available for single, frequent or subscription payment type:  * &#39;CC&#39; (Credit Card) * &#39;DD&#39; (Direct Debit)  Available for single or frequent payment type: * &#39;MBW&#39; (MB WAY)  * &#39;AP&#39; (Apple Pay)  * &#39;GP&#39; (Google Pay)  * &#39;MB&#39; (Multibanco)  * &#39;VI&#39; (Virtual IBAN)  * &#39;UF&#39; (Universo Flex)  * &#39;SC&#39; (Santander Consumer)  * &#39;AP&#39; (Apple Pay)</value>
        [DataMember(Name = "methods", IsRequired = true, EmitDefaultValue = true)]
        public Collection<CheckoutPostRequestPayment.MethodsEnum> Methods { get; set; }

        /// <summary>
        /// Gets or Sets Capture
        /// </summary>
        [DataMember(Name = "capture", EmitDefaultValue = false)]
        public CheckoutPostRequestPaymentCapture Capture { get; set; }

        /// <summary>
        /// The last possible time to make the payment. Applicable in Multibanco payments.  Note: If the expiration time is less than the default checkout session expiration (which is 30 minutes),&lt;/br&gt; the user won&#39;t be able to interact with the Checkout after that time.
        /// </summary>
        /// <value>The last possible time to make the payment. Applicable in Multibanco payments.  Note: If the expiration time is less than the default checkout session expiration (which is 30 minutes),&lt;/br&gt; the user won&#39;t be able to interact with the Checkout after that time.</value>
        /*
        <example>2017-12-12 16:05</example>
        */
        [DataMember(Name = "expiration_time", EmitDefaultValue = false)]
        public string ExpirationTime { get; set; }

        /// <summary>
        /// The merchant&#39;s key for identifying the payment.
        /// </summary>
        /// <value>The merchant&#39;s key for identifying the payment.</value>
        [DataMember(Name = "key", EmitDefaultValue = false)]
        public string Key { get; set; }

        /// <summary>
        /// &lt;font color&#x3D;\&quot;#FF0000\&quot;&gt;Additional property for frequent payments.&lt;/font&gt;
        /// </summary>
        /// <value>&lt;font color&#x3D;\&quot;#FF0000\&quot;&gt;Additional property for frequent payments.&lt;/font&gt;</value>
        [DataMember(Name = "max_value", EmitDefaultValue = false)]
        public double MaxValue { get; set; }

        /// <summary>
        /// &lt;font color&#x3D;\&quot;#FF0000\&quot;&gt;Additional property for frequent payments.&lt;/font&gt;
        /// </summary>
        /// <value>&lt;font color&#x3D;\&quot;#FF0000\&quot;&gt;Additional property for frequent payments.&lt;/font&gt;</value>
        [DataMember(Name = "min_value", EmitDefaultValue = false)]
        public double MinValue { get; set; }

        /// <summary>
        /// &lt;font color&#x3D;\&quot;#FF0000\&quot;&gt;Additional property for frequent payments.&lt;/font&gt;  Unlimited transactions.&lt;/br&gt;Uses &#39;max_value&#39; and &#39;min_value&#39; as limits per transaction instead.
        /// </summary>
        /// <value>&lt;font color&#x3D;\&quot;#FF0000\&quot;&gt;Additional property for frequent payments.&lt;/font&gt;  Unlimited transactions.&lt;/br&gt;Uses &#39;max_value&#39; and &#39;min_value&#39; as limits per transaction instead.</value>
        [DataMember(Name = "unlimited_payments", EmitDefaultValue = true)]
        public bool UnlimitedPayments { get; set; }

        /// <summary>
        /// &lt;font color&#x3D;\&quot;#FF0000\&quot;&gt;Additional property for subscription payments.&lt;/font&gt;  Number of payments (required when no expiration_time is set).
        /// </summary>
        /// <value>&lt;font color&#x3D;\&quot;#FF0000\&quot;&gt;Additional property for subscription payments.&lt;/font&gt;  Number of payments (required when no expiration_time is set).</value>
        [DataMember(Name = "max_captures", EmitDefaultValue = false)]
        public int MaxCaptures { get; set; }

        /// <summary>
        /// &lt;font color&#x3D;\&quot;#FF0000\&quot;&gt;Required property for subscription payments.&lt;/font&gt;  Defining the start of billing cycles.
        /// </summary>
        /// <value>&lt;font color&#x3D;\&quot;#FF0000\&quot;&gt;Required property for subscription payments.&lt;/font&gt;  Defining the start of billing cycles.</value>
        /*
        <example>2017-12-12 16:05</example>
        */
        [DataMember(Name = "start_time", EmitDefaultValue = false)]
        public string StartTime { get; set; }

        /// <summary>
        /// &lt;font color&#x3D;\&quot;#FF0000\&quot;&gt;Additional property for subscription payments.&lt;/font&gt;  After all retries failed, the payment cycle can have another try with another single method.
        /// </summary>
        /// <value>&lt;font color&#x3D;\&quot;#FF0000\&quot;&gt;Additional property for subscription payments.&lt;/font&gt;  After all retries failed, the payment cycle can have another try with another single method.</value>
        [DataMember(Name = "failover", EmitDefaultValue = true)]
        public bool Failover { get; set; }

        /// <summary>
        /// &lt;font color&#x3D;\&quot;#FF0000\&quot;&gt;Additional property for subscription payments.&lt;/font&gt;  Whether to schedule an immediate capture and schedule the second one for start_time.
        /// </summary>
        /// <value>&lt;font color&#x3D;\&quot;#FF0000\&quot;&gt;Additional property for subscription payments.&lt;/font&gt;  Whether to schedule an immediate capture and schedule the second one for start_time.</value>
        [DataMember(Name = "capture_now", EmitDefaultValue = true)]
        public bool CaptureNow { get; set; }

        /// <summary>
        /// &lt;font color&#x3D;\&quot;#FF0000\&quot;&gt;Additional property for subscription payments.&lt;/font&gt;  Number of retries in each payment cycle.&lt;/br&gt; The chosen frequency will define the max number of possible retries.
        /// </summary>
        /// <value>&lt;font color&#x3D;\&quot;#FF0000\&quot;&gt;Additional property for subscription payments.&lt;/font&gt;  Number of retries in each payment cycle.&lt;/br&gt; The chosen frequency will define the max number of possible retries.</value>
        [DataMember(Name = "retries", EmitDefaultValue = false)]
        public decimal Retries { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CheckoutPostRequestPayment {\n");
            sb.Append("  Methods: ").Append(Methods).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Capture: ").Append(Capture).Append("\n");
            sb.Append("  ExpirationTime: ").Append(ExpirationTime).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  MaxValue: ").Append(MaxValue).Append("\n");
            sb.Append("  MinValue: ").Append(MinValue).Append("\n");
            sb.Append("  UnlimitedPayments: ").Append(UnlimitedPayments).Append("\n");
            sb.Append("  Frequency: ").Append(Frequency).Append("\n");
            sb.Append("  MaxCaptures: ").Append(MaxCaptures).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  Failover: ").Append(Failover).Append("\n");
            sb.Append("  CaptureNow: ").Append(CaptureNow).Append("\n");
            sb.Append("  Retries: ").Append(Retries).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Key (string) maxLength
            if (this.Key != null && this.Key.Length > 50)
            {
                yield return new ValidationResult("Invalid value for Key, length must be less than 50.", new[] { "Key" });
            }

            // MaxValue (double) minimum
            if (this.MaxValue < (double)0.01)
            {
                yield return new ValidationResult("Invalid value for MaxValue, must be a value greater than or equal to 0.01.", new[] { "MaxValue" });
            }

            // MinValue (double) minimum
            if (this.MinValue < (double)0.01)
            {
                yield return new ValidationResult("Invalid value for MinValue, must be a value greater than or equal to 0.01.", new[] { "MinValue" });
            }

            yield break;
        }
    }

}
