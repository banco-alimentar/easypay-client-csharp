/*
 * Easypay Payments API
 *
 * <a href='https://www.easypay.pt/en/legal-terms-and-conditions/' class='item'>Terms conditions and legal terms</a><br><a href='https://www.easypay.pt/en/privacy-and-data-protection-policy/' class='item'>Privacy Policy</a>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: tec@easypay.pt
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Easypay.Rest.Client.Client.OpenAPIDateConverter;

namespace Easypay.Rest.Client.Model
{
    /// <summary>
    /// CheckoutPostRequest
    /// </summary>
    [DataContract(Name = "checkout_post_request")]
    public partial class CheckoutPostRequest : IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Single for value: single
            /// </summary>
            [EnumMember(Value = "single")]
            Single = 1,

            /// <summary>
            /// Enum Frequent for value: frequent
            /// </summary>
            [EnumMember(Value = "frequent")]
            Frequent = 2,

            /// <summary>
            /// Enum Subscription for value: subscription
            /// </summary>
            [EnumMember(Value = "subscription")]
            Subscription = 3
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutPostRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CheckoutPostRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutPostRequest" /> class.
        /// </summary>
        /// <param name="type">Only the first value in the Array is considered (e.g. [&#39;single&#39;, &#39;frequent&#39;] would be equivalent to [&#39;single&#39;]). (required).</param>
        /// <param name="payment">payment (required).</param>
        /// <param name="order">order.</param>
        /// <param name="customer">customer (required).</param>
        public CheckoutPostRequest(Collection<TypeEnum> type = default(Collection<TypeEnum>), CheckoutPostRequestPayment payment = default(CheckoutPostRequestPayment), CheckoutPostRequestOrder order = default(CheckoutPostRequestOrder), CheckoutPostRequestCustomer customer = default(CheckoutPostRequestCustomer))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for CheckoutPostRequest and cannot be null");
            }
            this.Type = type;
            // to ensure "payment" is required (not null)
            if (payment == null)
            {
                throw new ArgumentNullException("payment is a required property for CheckoutPostRequest and cannot be null");
            }
            this.Payment = payment;
            // to ensure "customer" is required (not null)
            if (customer == null)
            {
                throw new ArgumentNullException("customer is a required property for CheckoutPostRequest and cannot be null");
            }
            this.Customer = customer;
            this.Order = order;
        }

        /// <summary>
        /// Only the first value in the Array is considered (e.g. [&#39;single&#39;, &#39;frequent&#39;] would be equivalent to [&#39;single&#39;]).
        /// </summary>
        /// <value>Only the first value in the Array is considered (e.g. [&#39;single&#39;, &#39;frequent&#39;] would be equivalent to [&#39;single&#39;]).</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public Collection<CheckoutPostRequest.TypeEnum> Type { get; set; }

        /// <summary>
        /// Gets or Sets Payment
        /// </summary>
        [DataMember(Name = "payment", IsRequired = true, EmitDefaultValue = true)]
        public CheckoutPostRequestPayment Payment { get; set; }

        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name = "order", EmitDefaultValue = false)]
        public CheckoutPostRequestOrder Order { get; set; }

        /// <summary>
        /// Gets or Sets Customer
        /// </summary>
        [DataMember(Name = "customer", IsRequired = true, EmitDefaultValue = true)]
        public CheckoutPostRequestCustomer Customer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CheckoutPostRequest {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Payment: ").Append(Payment).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
