/*
 * Easypay Payments API
 *
 * <a href='https://www.easypay.pt/en/legal-terms-and-conditions/' class='item'>Terms conditions and legal terms</a><br><a href='https://www.easypay.pt/en/privacy-and-data-protection-policy/' class='item'>Privacy Policy</a>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: tec@easypay.pt
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Easypay.Rest.Client.Client.OpenAPIDateConverter;

namespace Easypay.Rest.Client.Model
{
    /// <summary>
    /// The Capture object contains all the necessary information for executing a fund capture action. It defines how and where the funds should be routed upon capturing a transaction. This object is essential for finalizing transactions and ensuring the correct allocation of funds. Object required when the operation type is Sale.
    /// </summary>
    [DataContract(Name = "CreateCapture")]
    public partial class CreateCapture : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCapture" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateCapture() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCapture" /> class.
        /// </summary>
        /// <param name="descriptive">A text field that describes the transaction as it will appear on the end user&#39;s account statement. This is typically used to provide clear, recognizable information about the payment, such as \&quot;Payment of Invoice Nº 1982652\&quot; or \&quot;Ticket for Queen\&quot;. (required).</param>
        /// <param name="transactionKey">A customizable text field for users to input their own identifier for the resource. This can be any string that helps the user uniquely identify or reference the resource in their own system..</param>
        /// <param name="captureDate">The date when the action should be executed. This field specifies the exact day for capturing the transaction, formatted as \&quot;YYYY-MM-DD\&quot; (e.g., \&quot;2024-06-30\&quot;). It is optional and defaults to the current date if not specified..</param>
        /// <param name="account">An object within the capture request that specifies the details of the account to which the funds should be routed, different from the initially requested account. This ensures that the captured funds are directed to the correct destination as per the specific routing requirements..</param>
        /// <param name="splits">splits.</param>
        public CreateCapture(string descriptive = default(string), string transactionKey = default(string), DateOnly captureDate = default(DateOnly), CaptureAccount account = default(CaptureAccount), Collection<CaptureSplitCreate> splits = default(Collection<CaptureSplitCreate>))
        {
            // to ensure "descriptive" is required (not null)
            if (descriptive == null)
            {
                throw new ArgumentNullException("descriptive is a required property for CreateCapture and cannot be null");
            }
            this.Descriptive = descriptive;
            this.TransactionKey = transactionKey;
            this.CaptureDate = captureDate;
            this.Account = account;
            this.Splits = splits;
        }

        /// <summary>
        /// A text field that describes the transaction as it will appear on the end user&#39;s account statement. This is typically used to provide clear, recognizable information about the payment, such as \&quot;Payment of Invoice Nº 1982652\&quot; or \&quot;Ticket for Queen\&quot;.
        /// </summary>
        /// <value>A text field that describes the transaction as it will appear on the end user&#39;s account statement. This is typically used to provide clear, recognizable information about the payment, such as \&quot;Payment of Invoice Nº 1982652\&quot; or \&quot;Ticket for Queen\&quot;.</value>
        /*
        <example>Payment of Invoice Nº 1982652</example>
        */
        [DataMember(Name = "descriptive", IsRequired = true, EmitDefaultValue = true)]
        public string Descriptive { get; set; }

        /// <summary>
        /// A customizable text field for users to input their own identifier for the resource. This can be any string that helps the user uniquely identify or reference the resource in their own system.
        /// </summary>
        /// <value>A customizable text field for users to input their own identifier for the resource. This can be any string that helps the user uniquely identify or reference the resource in their own system.</value>
        /*
        <example>01J1PKR2RPHJNJQGFWGDYXY0KM</example>
        */
        [DataMember(Name = "transaction_key", EmitDefaultValue = false)]
        public string TransactionKey { get; set; }

        /// <summary>
        /// The date when the action should be executed. This field specifies the exact day for capturing the transaction, formatted as \&quot;YYYY-MM-DD\&quot; (e.g., \&quot;2024-06-30\&quot;). It is optional and defaults to the current date if not specified.
        /// </summary>
        /// <value>The date when the action should be executed. This field specifies the exact day for capturing the transaction, formatted as \&quot;YYYY-MM-DD\&quot; (e.g., \&quot;2024-06-30\&quot;). It is optional and defaults to the current date if not specified.</value>
        [DataMember(Name = "capture_date", EmitDefaultValue = false)]
        public DateOnly CaptureDate { get; set; }

        /// <summary>
        /// An object within the capture request that specifies the details of the account to which the funds should be routed, different from the initially requested account. This ensures that the captured funds are directed to the correct destination as per the specific routing requirements.
        /// </summary>
        /// <value>An object within the capture request that specifies the details of the account to which the funds should be routed, different from the initially requested account. This ensures that the captured funds are directed to the correct destination as per the specific routing requirements.</value>
        [DataMember(Name = "account", EmitDefaultValue = false)]
        public CaptureAccount Account { get; set; }

        /// <summary>
        /// Gets or Sets Splits
        /// </summary>
        [DataMember(Name = "splits", EmitDefaultValue = false)]
        public Collection<CaptureSplitCreate> Splits { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateCapture {\n");
            sb.Append("  Descriptive: ").Append(Descriptive).Append("\n");
            sb.Append("  TransactionKey: ").Append(TransactionKey).Append("\n");
            sb.Append("  CaptureDate: ").Append(CaptureDate).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  Splits: ").Append(Splits).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Descriptive (string) maxLength
            if (this.Descriptive != null && this.Descriptive.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Descriptive, length must be less than 255.", new[] { "Descriptive" });
            }

            // TransactionKey (string) maxLength
            if (this.TransactionKey != null && this.TransactionKey.Length > 255)
            {
                yield return new ValidationResult("Invalid value for TransactionKey, length must be less than 255.", new[] { "TransactionKey" });
            }

            yield break;
        }
    }

}
