/*
 * Easypay Payments API
 *
 * <a href='https://www.easypay.pt/en/legal-terms-and-conditions/' class='item'>Terms conditions and legal terms</a><br><a href='https://www.easypay.pt/en/privacy-and-data-protection-policy/' class='item'>Privacy Policy</a>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: tec@easypay.pt
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Easypay.Rest.Client.Client.OpenAPIDateConverter;

namespace Easypay.Rest.Client.Model
{
    /// <summary>
    /// AuthorisationIdGet200ResponseTransactionsInnerValues
    /// </summary>
    [DataContract(Name = "_authorisation__id__get_200_response_transactions_inner_values")]
    public partial class AuthorisationIdGet200ResponseTransactionsInnerValues : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorisationIdGet200ResponseTransactionsInnerValues" /> class.
        /// </summary>
        /// <param name="requested">requested.</param>
        /// <param name="paid">paid.</param>
        /// <param name="fixedFee">fixedFee.</param>
        /// <param name="variableFee">variableFee.</param>
        /// <param name="tax">tax.</param>
        /// <param name="transfer">transfer.</param>
        public AuthorisationIdGet200ResponseTransactionsInnerValues(int requested = default(int), int paid = default(int), int fixedFee = default(int), int variableFee = default(int), decimal tax = default(decimal), decimal transfer = default(decimal))
        {
            this.Requested = requested;
            this.Paid = paid;
            this.FixedFee = fixedFee;
            this.VariableFee = variableFee;
            this.Tax = tax;
            this.Transfer = transfer;
        }

        /// <summary>
        /// Gets or Sets Requested
        /// </summary>
        [DataMember(Name = "requested", EmitDefaultValue = false)]
        public int Requested { get; set; }

        /// <summary>
        /// Gets or Sets Paid
        /// </summary>
        [DataMember(Name = "paid", EmitDefaultValue = false)]
        public int Paid { get; set; }

        /// <summary>
        /// Gets or Sets FixedFee
        /// </summary>
        [DataMember(Name = "fixed_fee", EmitDefaultValue = false)]
        public int FixedFee { get; set; }

        /// <summary>
        /// Gets or Sets VariableFee
        /// </summary>
        [DataMember(Name = "variable_fee", EmitDefaultValue = false)]
        public int VariableFee { get; set; }

        /// <summary>
        /// Gets or Sets Tax
        /// </summary>
        [DataMember(Name = "tax", EmitDefaultValue = false)]
        public decimal Tax { get; set; }

        /// <summary>
        /// Gets or Sets Transfer
        /// </summary>
        [DataMember(Name = "transfer", EmitDefaultValue = false)]
        public decimal Transfer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthorisationIdGet200ResponseTransactionsInnerValues {\n");
            sb.Append("  Requested: ").Append(Requested).Append("\n");
            sb.Append("  Paid: ").Append(Paid).Append("\n");
            sb.Append("  FixedFee: ").Append(FixedFee).Append("\n");
            sb.Append("  VariableFee: ").Append(VariableFee).Append("\n");
            sb.Append("  Tax: ").Append(Tax).Append("\n");
            sb.Append("  Transfer: ").Append(Transfer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
