/*
 * Easypay Payments API
 *
 * <a href='https://www.easypay.pt/en/legal-terms-and-conditions/' class='item'>Terms conditions and legal terms</a><br><a href='https://www.easypay.pt/en/privacy-and-data-protection-policy/' class='item'>Privacy Policy</a>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: tec@easypay.pt
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Easypay.Rest.Client.Client.OpenAPIDateConverter;

namespace Easypay.Rest.Client.Model
{
    /// <summary>
    /// FrequentIdPatchRequest
    /// </summary>
    [DataContract(Name = "_frequent__id__patch_request")]
    public partial class FrequentIdPatchRequest : IValidatableObject
    {
        /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Active for value: active
            /// </summary>
            [EnumMember(Value = "active")]
            Active = 1,

            /// <summary>
            /// Enum Deleted for value: deleted
            /// </summary>
            [EnumMember(Value = "deleted")]
            Deleted = 2
        }


        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public Currency? Currency { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FrequentIdPatchRequest" /> class.
        /// </summary>
        /// <param name="status">status.</param>
        /// <param name="expirationTime">expirationTime.</param>
        /// <param name="currency">currency.</param>
        /// <param name="customer">customer.</param>
        /// <param name="key">The merchant&#39;s key for identifying the payment..</param>
        /// <param name="maxValue">maxValue.</param>
        /// <param name="minValue">minValue.</param>
        /// <param name="unlimitedPayments">Transactions will be unlimited, max or min value will be refreshed on each payment. (default to true).</param>
        /// <param name="sddMandate">sddMandate.</param>
        public FrequentIdPatchRequest(StatusEnum? status = default(StatusEnum?), string expirationTime = default(string), Currency? currency = default(Currency?), Customer customer = default(Customer), string key = default(string), double maxValue = default(double), double minValue = default(double), bool unlimitedPayments = true, SddMandate sddMandate = default(SddMandate))
        {
            this.Status = status;
            this.ExpirationTime = expirationTime;
            this.Currency = currency;
            this.Customer = customer;
            this.Key = key;
            this.MaxValue = maxValue;
            this.MinValue = minValue;
            this.UnlimitedPayments = unlimitedPayments;
            this.SddMandate = sddMandate;
        }

        /// <summary>
        /// Gets or Sets ExpirationTime
        /// </summary>
        /*
        <example>2017-12-12 16:05</example>
        */
        [DataMember(Name = "expiration_time", EmitDefaultValue = false)]
        public string ExpirationTime { get; set; }

        /// <summary>
        /// Gets or Sets Customer
        /// </summary>
        [DataMember(Name = "customer", EmitDefaultValue = false)]
        public Customer Customer { get; set; }

        /// <summary>
        /// The merchant&#39;s key for identifying the payment.
        /// </summary>
        /// <value>The merchant&#39;s key for identifying the payment.</value>
        /*
        <example>Key Example</example>
        */
        [DataMember(Name = "key", EmitDefaultValue = false)]
        public string Key { get; set; }

        /// <summary>
        /// Gets or Sets MaxValue
        /// </summary>
        /*
        <example>25.5</example>
        */
        [DataMember(Name = "max_value", EmitDefaultValue = false)]
        public double MaxValue { get; set; }

        /// <summary>
        /// Gets or Sets MinValue
        /// </summary>
        /*
        <example>10</example>
        */
        [DataMember(Name = "min_value", EmitDefaultValue = false)]
        public double MinValue { get; set; }

        /// <summary>
        /// Transactions will be unlimited, max or min value will be refreshed on each payment.
        /// </summary>
        /// <value>Transactions will be unlimited, max or min value will be refreshed on each payment.</value>
        [DataMember(Name = "unlimited_payments", EmitDefaultValue = true)]
        public bool UnlimitedPayments { get; set; }

        /// <summary>
        /// Gets or Sets SddMandate
        /// </summary>
        [DataMember(Name = "sdd_mandate", EmitDefaultValue = false)]
        public SddMandate SddMandate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FrequentIdPatchRequest {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ExpirationTime: ").Append(ExpirationTime).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  MaxValue: ").Append(MaxValue).Append("\n");
            sb.Append("  MinValue: ").Append(MinValue).Append("\n");
            sb.Append("  UnlimitedPayments: ").Append(UnlimitedPayments).Append("\n");
            sb.Append("  SddMandate: ").Append(SddMandate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Key (string) maxLength
            if (this.Key != null && this.Key.Length > 50)
            {
                yield return new ValidationResult("Invalid value for Key, length must be less than 50.", new[] { "Key" });
            }

            // MaxValue (double) minimum
            if (this.MaxValue < (double)0.01)
            {
                yield return new ValidationResult("Invalid value for MaxValue, must be a value greater than or equal to 0.01.", new[] { "MaxValue" });
            }

            // MinValue (double) minimum
            if (this.MinValue < (double)0.01)
            {
                yield return new ValidationResult("Invalid value for MinValue, must be a value greater than or equal to 0.01.", new[] { "MinValue" });
            }

            yield break;
        }
    }

}
