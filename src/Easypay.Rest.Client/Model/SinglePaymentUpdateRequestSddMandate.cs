/*
 * Easypay API
 *
 * EasyPay - API
 *
 * The version of the OpenAPI document: 2.0.2
 * Contact: tec@easypay.pt
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Easypay.Rest.Client.Client.OpenAPIDateConverter;

namespace Easypay.Rest.Client.Model
{
    /// <summary>
    /// SinglePaymentUpdateRequestSddMandate
    /// </summary>
    [DataContract(Name = "SinglePaymentUpdateRequest_sdd_mandate")]
    public partial class SinglePaymentUpdateRequestSddMandate : IEquatable<SinglePaymentUpdateRequestSddMandate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SinglePaymentUpdateRequestSddMandate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SinglePaymentUpdateRequestSddMandate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SinglePaymentUpdateRequestSddMandate" /> class.
        /// </summary>
        /// <param name="id">Optional - unique identifier from previous created mandates.</param>
        /// <param name="iban">iban (required).</param>
        /// <param name="key">Custom string controlled by our clients.</param>
        /// <param name="name">name (required).</param>
        /// <param name="email">email (required).</param>
        /// <param name="phone">phone (required).</param>
        /// <param name="accountHolder">Bank account holder name (required).</param>
        /// <param name="countryCode">Bank account country code.</param>
        /// <param name="maxNumDebits">Optional: Max number of debits described in SDD Mandate.</param>
        public SinglePaymentUpdateRequestSddMandate(string id = default(string), string iban = default(string), string key = default(string), string name = default(string), string email = default(string), string phone = default(string), string accountHolder = default(string), string countryCode = default(string), string maxNumDebits = default(string))
        {
            // to ensure "iban" is required (not null)
            this.Iban = iban ?? throw new ArgumentNullException("iban is a required property for SinglePaymentUpdateRequestSddMandate and cannot be null");
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for SinglePaymentUpdateRequestSddMandate and cannot be null");
            // to ensure "email" is required (not null)
            this.Email = email ?? throw new ArgumentNullException("email is a required property for SinglePaymentUpdateRequestSddMandate and cannot be null");
            // to ensure "phone" is required (not null)
            this.Phone = phone ?? throw new ArgumentNullException("phone is a required property for SinglePaymentUpdateRequestSddMandate and cannot be null");
            // to ensure "accountHolder" is required (not null)
            this.AccountHolder = accountHolder ?? throw new ArgumentNullException("accountHolder is a required property for SinglePaymentUpdateRequestSddMandate and cannot be null");
            this.Id = id;
            this.Key = key;
            this.CountryCode = countryCode;
            this.MaxNumDebits = maxNumDebits;
        }

        /// <summary>
        /// Optional - unique identifier from previous created mandates
        /// </summary>
        /// <value>Optional - unique identifier from previous created mandates</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Iban
        /// </summary>
        [DataMember(Name = "iban", IsRequired = true, EmitDefaultValue = false)]
        public string Iban { get; set; }

        /// <summary>
        /// Custom string controlled by our clients
        /// </summary>
        /// <value>Custom string controlled by our clients</value>
        [DataMember(Name = "key", EmitDefaultValue = false)]
        public string Key { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name = "email", IsRequired = true, EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets Phone
        /// </summary>
        [DataMember(Name = "phone", IsRequired = true, EmitDefaultValue = false)]
        public string Phone { get; set; }

        /// <summary>
        /// Bank account holder name
        /// </summary>
        /// <value>Bank account holder name</value>
        [DataMember(Name = "account_holder", IsRequired = true, EmitDefaultValue = false)]
        public string AccountHolder { get; set; }

        /// <summary>
        /// Bank account country code
        /// </summary>
        /// <value>Bank account country code</value>
        [DataMember(Name = "country_code", EmitDefaultValue = false)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Optional: Max number of debits described in SDD Mandate
        /// </summary>
        /// <value>Optional: Max number of debits described in SDD Mandate</value>
        [DataMember(Name = "max_num_debits", EmitDefaultValue = false)]
        public string MaxNumDebits { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SinglePaymentUpdateRequestSddMandate {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Iban: ").Append(Iban).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  AccountHolder: ").Append(AccountHolder).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  MaxNumDebits: ").Append(MaxNumDebits).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SinglePaymentUpdateRequestSddMandate);
        }

        /// <summary>
        /// Returns true if SinglePaymentUpdateRequestSddMandate instances are equal
        /// </summary>
        /// <param name="input">Instance of SinglePaymentUpdateRequestSddMandate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SinglePaymentUpdateRequestSddMandate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Iban == input.Iban ||
                    (this.Iban != null &&
                    this.Iban.Equals(input.Iban))
                ) && 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.AccountHolder == input.AccountHolder ||
                    (this.AccountHolder != null &&
                    this.AccountHolder.Equals(input.AccountHolder))
                ) && 
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                ) && 
                (
                    this.MaxNumDebits == input.MaxNumDebits ||
                    (this.MaxNumDebits != null &&
                    this.MaxNumDebits.Equals(input.MaxNumDebits))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Iban != null)
                    hashCode = hashCode * 59 + this.Iban.GetHashCode();
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Phone != null)
                    hashCode = hashCode * 59 + this.Phone.GetHashCode();
                if (this.AccountHolder != null)
                    hashCode = hashCode * 59 + this.AccountHolder.GetHashCode();
                if (this.CountryCode != null)
                    hashCode = hashCode * 59 + this.CountryCode.GetHashCode();
                if (this.MaxNumDebits != null)
                    hashCode = hashCode * 59 + this.MaxNumDebits.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Iban (string) maxLength
            if(this.Iban != null && this.Iban.Length > 34)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Iban, length must be less than 34.", new [] { "Iban" });
            }

            // Key (string) maxLength
            if(this.Key != null && this.Key.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Key, length must be less than 255.", new [] { "Key" });
            }

            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 100.", new [] { "Name" });
            }

            // Email (string) maxLength
            if(this.Email != null && this.Email.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Email, length must be less than 50.", new [] { "Email" });
            }

            // Phone (string) maxLength
            if(this.Phone != null && this.Phone.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Phone, length must be less than 20.", new [] { "Phone" });
            }

            // AccountHolder (string) maxLength
            if(this.AccountHolder != null && this.AccountHolder.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountHolder, length must be less than 100.", new [] { "AccountHolder" });
            }

            yield break;
        }
    }

}
