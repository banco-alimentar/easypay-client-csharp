/*
 * Easypay Payments API
 *
 * <a href='https://www.easypay.pt/en/legal-terms-and-conditions/' class='item'>Terms conditions and legal terms</a><br><a href='https://www.easypay.pt/en/privacy-and-data-protection-policy/' class='item'>Privacy Policy</a>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: tec@easypay.pt
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Easypay.Rest.Client.Client.OpenAPIDateConverter;

namespace Easypay.Rest.Client.Model
{
    /// <summary>
    /// The customer details.
    /// </summary>
    [DataContract(Name = "checkout_post_request_customer")]
    public partial class CheckoutPostRequestCustomer : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutPostRequestCustomer" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CheckoutPostRequestCustomer() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutPostRequestCustomer" /> class.
        /// </summary>
        /// <param name="id">The uuid of a previously created customer..</param>
        /// <param name="name">Required if payment.method is &#39;MBW&#39;&lt;/br&gt;The customer&#39;s name..</param>
        /// <param name="email">The customer&#39;s email. (required).</param>
        /// <param name="phone">Required if payment.method is &#39;MBW&#39;&lt;/br&gt;The customer&#39;s phone number..</param>
        /// <param name="phoneIndicative">The phone country code..</param>
        /// <param name="fiscalNumber">The customer&#39;s fiscal number (prefixed by the country code)..</param>
        /// <param name="key">The merchant&#39;s key to identify the customer..</param>
        public CheckoutPostRequestCustomer(Guid id = default(Guid), string name = default(string), string email = default(string), string phone = default(string), string phoneIndicative = default(string), string fiscalNumber = default(string), string key = default(string))
        {
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new ArgumentNullException("email is a required property for CheckoutPostRequestCustomer and cannot be null");
            }
            this.Email = email;
            this.Id = id;
            this.Name = name;
            this.Phone = phone;
            this.PhoneIndicative = phoneIndicative;
            this.FiscalNumber = fiscalNumber;
            this.Key = key;
        }

        /// <summary>
        /// The uuid of a previously created customer.
        /// </summary>
        /// <value>The uuid of a previously created customer.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Required if payment.method is &#39;MBW&#39;&lt;/br&gt;The customer&#39;s name.
        /// </summary>
        /// <value>Required if payment.method is &#39;MBW&#39;&lt;/br&gt;The customer&#39;s name.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The customer&#39;s email.
        /// </summary>
        /// <value>The customer&#39;s email.</value>
        [DataMember(Name = "email", IsRequired = true, EmitDefaultValue = true)]
        public string Email { get; set; }

        /// <summary>
        /// Required if payment.method is &#39;MBW&#39;&lt;/br&gt;The customer&#39;s phone number.
        /// </summary>
        /// <value>Required if payment.method is &#39;MBW&#39;&lt;/br&gt;The customer&#39;s phone number.</value>
        [DataMember(Name = "phone", EmitDefaultValue = false)]
        public string Phone { get; set; }

        /// <summary>
        /// The phone country code.
        /// </summary>
        /// <value>The phone country code.</value>
        [DataMember(Name = "phone_indicative", EmitDefaultValue = false)]
        public string PhoneIndicative { get; set; }

        /// <summary>
        /// The customer&#39;s fiscal number (prefixed by the country code).
        /// </summary>
        /// <value>The customer&#39;s fiscal number (prefixed by the country code).</value>
        /*
        <example>PT123456789</example>
        */
        [DataMember(Name = "fiscal_number", EmitDefaultValue = false)]
        public string FiscalNumber { get; set; }

        /// <summary>
        /// The merchant&#39;s key to identify the customer.
        /// </summary>
        /// <value>The merchant&#39;s key to identify the customer.</value>
        [DataMember(Name = "key", EmitDefaultValue = false)]
        public string Key { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CheckoutPostRequestCustomer {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  PhoneIndicative: ").Append(PhoneIndicative).Append("\n");
            sb.Append("  FiscalNumber: ").Append(FiscalNumber).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Name, length must be less than 255.", new[] { "Name" });
            }

            // Email (string) maxLength
            if (this.Email != null && this.Email.Length > 70)
            {
                yield return new ValidationResult("Invalid value for Email, length must be less than 70.", new[] { "Email" });
            }

            // Phone (string) maxLength
            if (this.Phone != null && this.Phone.Length > 15)
            {
                yield return new ValidationResult("Invalid value for Phone, length must be less than 15.", new[] { "Phone" });
            }

            // PhoneIndicative (string) maxLength
            if (this.PhoneIndicative != null && this.PhoneIndicative.Length > 5)
            {
                yield return new ValidationResult("Invalid value for PhoneIndicative, length must be less than 5.", new[] { "PhoneIndicative" });
            }

            // FiscalNumber (string) maxLength
            if (this.FiscalNumber != null && this.FiscalNumber.Length > 20)
            {
                yield return new ValidationResult("Invalid value for FiscalNumber, length must be less than 20.", new[] { "FiscalNumber" });
            }

            // Key (string) maxLength
            if (this.Key != null && this.Key.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Key, length must be less than 255.", new[] { "Key" });
            }

            yield break;
        }
    }

}
