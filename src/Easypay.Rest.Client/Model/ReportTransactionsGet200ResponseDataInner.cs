/*
 * Easypay Payments API
 *
 * <a href='https://www.easypay.pt/en/legal-terms-and-conditions/' class='item'>Terms conditions and legal terms</a><br><a href='https://www.easypay.pt/en/privacy-and-data-protection-policy/' class='item'>Privacy Policy</a>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: tec@easypay.pt
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Easypay.Rest.Client.Client.OpenAPIDateConverter;

namespace Easypay.Rest.Client.Model
{
    /// <summary>
    /// ReportTransactionsGet200ResponseDataInner
    /// </summary>
    [DataContract(Name = "_report_transactions_get_200_response_data_inner")]
    public partial class ReportTransactionsGet200ResponseDataInner : IValidatableObject
    {
        /// <summary>
        /// Defines PaymentType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PaymentTypeEnum
        {
            /// <summary>
            /// Enum Single for value: single
            /// </summary>
            [EnumMember(Value = "single")]
            Single = 1,

            /// <summary>
            /// Enum Frequent for value: frequent
            /// </summary>
            [EnumMember(Value = "frequent")]
            Frequent = 2,

            /// <summary>
            /// Enum Subscription for value: subscription
            /// </summary>
            [EnumMember(Value = "subscription")]
            Subscription = 3
        }


        /// <summary>
        /// Gets or Sets PaymentType
        /// </summary>
        /*
        <example>single</example>
        */
        [DataMember(Name = "payment_type", EmitDefaultValue = false)]
        public PaymentTypeEnum? PaymentType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportTransactionsGet200ResponseDataInner" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="key">Any value that will help the merchant manage the transaction on his database..</param>
        /// <param name="date">date.</param>
        /// <param name="values">values.</param>
        /// <param name="transferDate">transferDate.</param>
        /// <param name="transferBatch">The batch where this transaction has transfered..</param>
        /// <param name="method">The payment method..</param>
        /// <param name="documentNumber">Unique document number used for Easypay Invoice..</param>
        /// <param name="paymentType">paymentType.</param>
        /// <param name="paymentId">paymentId.</param>
        /// <param name="paymentAccount">paymentAccount.</param>
        /// <param name="paymentKey">paymentKey.</param>
        /// <param name="paymentTransactionKey">Capture transaction key..</param>
        /// <param name="descriptive">Any descriptive information that will help the merchant manage the transaction on his database..</param>
        public ReportTransactionsGet200ResponseDataInner(Guid id = default(Guid), string key = default(string), DateTime date = default(DateTime), ReportTransactionsGet200ResponseDataInnerValues values = default(ReportTransactionsGet200ResponseDataInnerValues), DateOnly transferDate = default(DateOnly), string transferBatch = default(string), string method = default(string), string documentNumber = default(string), PaymentTypeEnum? paymentType = default(PaymentTypeEnum?), Guid paymentId = default(Guid), FrequentPost201ResponseCustomer paymentAccount = default(FrequentPost201ResponseCustomer), string paymentKey = default(string), string paymentTransactionKey = default(string), string descriptive = default(string))
        {
            this.Id = id;
            this.Key = key;
            this.Date = date;
            this.Values = values;
            this.TransferDate = transferDate;
            this.TransferBatch = transferBatch;
            this.Method = method;
            this.DocumentNumber = documentNumber;
            this.PaymentType = paymentType;
            this.PaymentId = paymentId;
            this.PaymentAccount = paymentAccount;
            this.PaymentKey = paymentKey;
            this.PaymentTransactionKey = paymentTransactionKey;
            this.Descriptive = descriptive;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Any value that will help the merchant manage the transaction on his database.
        /// </summary>
        /// <value>Any value that will help the merchant manage the transaction on his database.</value>
        [DataMember(Name = "key", EmitDefaultValue = false)]
        public string Key { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name = "date", EmitDefaultValue = false)]
        public DateTime Date { get; set; }

        /// <summary>
        /// Gets or Sets Values
        /// </summary>
        [DataMember(Name = "values", EmitDefaultValue = false)]
        public ReportTransactionsGet200ResponseDataInnerValues Values { get; set; }

        /// <summary>
        /// Gets or Sets TransferDate
        /// </summary>
        [DataMember(Name = "transfer_date", EmitDefaultValue = false)]
        public DateOnly TransferDate { get; set; }

        /// <summary>
        /// The batch where this transaction has transfered.
        /// </summary>
        /// <value>The batch where this transaction has transfered.</value>
        [DataMember(Name = "transfer_batch", EmitDefaultValue = false)]
        public string TransferBatch { get; set; }

        /// <summary>
        /// The payment method.
        /// </summary>
        /// <value>The payment method.</value>
        [DataMember(Name = "method", EmitDefaultValue = false)]
        public string Method { get; set; }

        /// <summary>
        /// Unique document number used for Easypay Invoice.
        /// </summary>
        /// <value>Unique document number used for Easypay Invoice.</value>
        [DataMember(Name = "document_number", EmitDefaultValue = false)]
        public string DocumentNumber { get; set; }

        /// <summary>
        /// Gets or Sets PaymentId
        /// </summary>
        [DataMember(Name = "payment_id", EmitDefaultValue = false)]
        public Guid PaymentId { get; set; }

        /// <summary>
        /// Gets or Sets PaymentAccount
        /// </summary>
        [DataMember(Name = "payment_account", EmitDefaultValue = false)]
        public FrequentPost201ResponseCustomer PaymentAccount { get; set; }

        /// <summary>
        /// Gets or Sets PaymentKey
        /// </summary>
        [DataMember(Name = "payment_key", EmitDefaultValue = false)]
        public string PaymentKey { get; set; }

        /// <summary>
        /// Capture transaction key.
        /// </summary>
        /// <value>Capture transaction key.</value>
        [DataMember(Name = "payment_transaction_key", EmitDefaultValue = false)]
        public string PaymentTransactionKey { get; set; }

        /// <summary>
        /// Any descriptive information that will help the merchant manage the transaction on his database.
        /// </summary>
        /// <value>Any descriptive information that will help the merchant manage the transaction on his database.</value>
        [DataMember(Name = "descriptive", EmitDefaultValue = false)]
        public string Descriptive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReportTransactionsGet200ResponseDataInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("  TransferDate: ").Append(TransferDate).Append("\n");
            sb.Append("  TransferBatch: ").Append(TransferBatch).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  DocumentNumber: ").Append(DocumentNumber).Append("\n");
            sb.Append("  PaymentType: ").Append(PaymentType).Append("\n");
            sb.Append("  PaymentId: ").Append(PaymentId).Append("\n");
            sb.Append("  PaymentAccount: ").Append(PaymentAccount).Append("\n");
            sb.Append("  PaymentKey: ").Append(PaymentKey).Append("\n");
            sb.Append("  PaymentTransactionKey: ").Append(PaymentTransactionKey).Append("\n");
            sb.Append("  Descriptive: ").Append(Descriptive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
