/*
 * Easypay Payments API
 *
 * <a href='https://www.easypay.pt/en/legal-terms-and-conditions/' class='item'>Terms conditions and legal terms</a><br><a href='https://www.easypay.pt/en/privacy-and-data-protection-policy/' class='item'>Privacy Policy</a>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: tec@easypay.pt
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Easypay.Rest.Client.Client;
using Easypay.Rest.Client.Model;

namespace Easypay.Rest.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubscriptionPaymentApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List subscription payments
        /// </summary>
        /// <remarks>
        /// Full report with all the subscriptions payments from your Account Id
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page Number (optional)</param>
        /// <param name="recordsPerPage">Limit records per page (Max: 100) (optional, default to 20M)</param>
        /// <param name="expirationTime">Filter by expiration time interval (max 30 days) (optional)</param>
        /// <param name="method">Filter by method (optional)</param>
        /// <param name="customer">Filter by customer key (optional)</param>
        /// <param name="id">Filter by id (optional)</param>
        /// <param name="key">Filter by subscription key (optional)</param>
        /// <param name="createdAt">Filter by created datetime interval (max 30 days) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionGet200Response</returns>
        SubscriptionGet200Response SubscriptionGet(decimal? page = default(decimal?), decimal? recordsPerPage = default(decimal?), string? expirationTime = default(string?), string? method = default(string?), string? customer = default(string?), string? id = default(string?), string? key = default(string?), string? createdAt = default(string?), int operationIndex = 0);

        /// <summary>
        /// List subscription payments
        /// </summary>
        /// <remarks>
        /// Full report with all the subscriptions payments from your Account Id
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page Number (optional)</param>
        /// <param name="recordsPerPage">Limit records per page (Max: 100) (optional, default to 20M)</param>
        /// <param name="expirationTime">Filter by expiration time interval (max 30 days) (optional)</param>
        /// <param name="method">Filter by method (optional)</param>
        /// <param name="customer">Filter by customer key (optional)</param>
        /// <param name="id">Filter by id (optional)</param>
        /// <param name="key">Filter by subscription key (optional)</param>
        /// <param name="createdAt">Filter by created datetime interval (max 30 days) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionGet200Response</returns>
        ApiResponse<SubscriptionGet200Response> SubscriptionGetWithHttpInfo(decimal? page = default(decimal?), decimal? recordsPerPage = default(decimal?), string? expirationTime = default(string?), string? method = default(string?), string? customer = default(string?), string? id = default(string?), string? key = default(string?), string? createdAt = default(string?), int operationIndex = 0);
        /// <summary>
        /// Deletes subscription payment
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void SubscriptionIdDelete(Guid id, int operationIndex = 0);

        /// <summary>
        /// Deletes subscription payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SubscriptionIdDeleteWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// Shows subscription payment details
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionIdGet200Response</returns>
        SubscriptionIdGet200Response SubscriptionIdGet(Guid id, int operationIndex = 0);

        /// <summary>
        /// Shows subscription payment details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionIdGet200Response</returns>
        ApiResponse<SubscriptionIdGet200Response> SubscriptionIdGetWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// Updates subscription payment details
        /// </summary>
        /// <remarks>
        /// Retrieves the subscription payment details.
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="body">Subscription Payment object to edit existing one</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionIdPatch200Response</returns>
        SubscriptionIdPatch200Response SubscriptionIdPatch(Guid id, SubscriptionIdPatchRequest body, int operationIndex = 0);

        /// <summary>
        /// Updates subscription payment details
        /// </summary>
        /// <remarks>
        /// Retrieves the subscription payment details.
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="body">Subscription Payment object to edit existing one</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionIdPatch200Response</returns>
        ApiResponse<SubscriptionIdPatch200Response> SubscriptionIdPatchWithHttpInfo(Guid id, SubscriptionIdPatchRequest body, int operationIndex = 0);
        /// <summary>
        /// Create subscription payment
        /// </summary>
        /// <remarks>
        /// Subscriptions are periodic payments of the same amount of money, configured through Checkout or our Payments API.  Subscriptions support a number of different frequencies, ranging from daily to once every three years. Their last payment can be determined by the end date of the subscription, as well as the total number of payments captured.  They also support a configurable number of retries for each capture in case of failure, as well as falling back to another (single) payment method if the recurring one is not successful.  Supported methods for subscriptions are: &lt;i style&#x3D;\&quot;color:red\&quot;&gt;Credit Card&lt;/i&gt; and &lt;i style&#x3D;\&quot;color:red\&quot;&gt;Direct Debit.&lt;/i&gt;
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Payment configuration object to generate a payment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionPost201Response</returns>
        SubscriptionPost201Response SubscriptionPost(SubscriptionPostRequest body, int operationIndex = 0);

        /// <summary>
        /// Create subscription payment
        /// </summary>
        /// <remarks>
        /// Subscriptions are periodic payments of the same amount of money, configured through Checkout or our Payments API.  Subscriptions support a number of different frequencies, ranging from daily to once every three years. Their last payment can be determined by the end date of the subscription, as well as the total number of payments captured.  They also support a configurable number of retries for each capture in case of failure, as well as falling back to another (single) payment method if the recurring one is not successful.  Supported methods for subscriptions are: &lt;i style&#x3D;\&quot;color:red\&quot;&gt;Credit Card&lt;/i&gt; and &lt;i style&#x3D;\&quot;color:red\&quot;&gt;Direct Debit.&lt;/i&gt;
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Payment configuration object to generate a payment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionPost201Response</returns>
        ApiResponse<SubscriptionPost201Response> SubscriptionPostWithHttpInfo(SubscriptionPostRequest body, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubscriptionPaymentApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List subscription payments
        /// </summary>
        /// <remarks>
        /// Full report with all the subscriptions payments from your Account Id
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page Number (optional)</param>
        /// <param name="recordsPerPage">Limit records per page (Max: 100) (optional, default to 20M)</param>
        /// <param name="expirationTime">Filter by expiration time interval (max 30 days) (optional)</param>
        /// <param name="method">Filter by method (optional)</param>
        /// <param name="customer">Filter by customer key (optional)</param>
        /// <param name="id">Filter by id (optional)</param>
        /// <param name="key">Filter by subscription key (optional)</param>
        /// <param name="createdAt">Filter by created datetime interval (max 30 days) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionGet200Response</returns>
        System.Threading.Tasks.Task<SubscriptionGet200Response> SubscriptionGetAsync(decimal? page = default(decimal?), decimal? recordsPerPage = default(decimal?), string? expirationTime = default(string?), string? method = default(string?), string? customer = default(string?), string? id = default(string?), string? key = default(string?), string? createdAt = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List subscription payments
        /// </summary>
        /// <remarks>
        /// Full report with all the subscriptions payments from your Account Id
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page Number (optional)</param>
        /// <param name="recordsPerPage">Limit records per page (Max: 100) (optional, default to 20M)</param>
        /// <param name="expirationTime">Filter by expiration time interval (max 30 days) (optional)</param>
        /// <param name="method">Filter by method (optional)</param>
        /// <param name="customer">Filter by customer key (optional)</param>
        /// <param name="id">Filter by id (optional)</param>
        /// <param name="key">Filter by subscription key (optional)</param>
        /// <param name="createdAt">Filter by created datetime interval (max 30 days) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionGet200Response>> SubscriptionGetWithHttpInfoAsync(decimal? page = default(decimal?), decimal? recordsPerPage = default(decimal?), string? expirationTime = default(string?), string? method = default(string?), string? customer = default(string?), string? id = default(string?), string? key = default(string?), string? createdAt = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Deletes subscription payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SubscriptionIdDeleteAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Deletes subscription payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SubscriptionIdDeleteWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Shows subscription payment details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionIdGet200Response</returns>
        System.Threading.Tasks.Task<SubscriptionIdGet200Response> SubscriptionIdGetAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Shows subscription payment details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionIdGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionIdGet200Response>> SubscriptionIdGetWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Updates subscription payment details
        /// </summary>
        /// <remarks>
        /// Retrieves the subscription payment details.
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="body">Subscription Payment object to edit existing one</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionIdPatch200Response</returns>
        System.Threading.Tasks.Task<SubscriptionIdPatch200Response> SubscriptionIdPatchAsync(Guid id, SubscriptionIdPatchRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Updates subscription payment details
        /// </summary>
        /// <remarks>
        /// Retrieves the subscription payment details.
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="body">Subscription Payment object to edit existing one</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionIdPatch200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionIdPatch200Response>> SubscriptionIdPatchWithHttpInfoAsync(Guid id, SubscriptionIdPatchRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create subscription payment
        /// </summary>
        /// <remarks>
        /// Subscriptions are periodic payments of the same amount of money, configured through Checkout or our Payments API.  Subscriptions support a number of different frequencies, ranging from daily to once every three years. Their last payment can be determined by the end date of the subscription, as well as the total number of payments captured.  They also support a configurable number of retries for each capture in case of failure, as well as falling back to another (single) payment method if the recurring one is not successful.  Supported methods for subscriptions are: &lt;i style&#x3D;\&quot;color:red\&quot;&gt;Credit Card&lt;/i&gt; and &lt;i style&#x3D;\&quot;color:red\&quot;&gt;Direct Debit.&lt;/i&gt;
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Payment configuration object to generate a payment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionPost201Response</returns>
        System.Threading.Tasks.Task<SubscriptionPost201Response> SubscriptionPostAsync(SubscriptionPostRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create subscription payment
        /// </summary>
        /// <remarks>
        /// Subscriptions are periodic payments of the same amount of money, configured through Checkout or our Payments API.  Subscriptions support a number of different frequencies, ranging from daily to once every three years. Their last payment can be determined by the end date of the subscription, as well as the total number of payments captured.  They also support a configurable number of retries for each capture in case of failure, as well as falling back to another (single) payment method if the recurring one is not successful.  Supported methods for subscriptions are: &lt;i style&#x3D;\&quot;color:red\&quot;&gt;Credit Card&lt;/i&gt; and &lt;i style&#x3D;\&quot;color:red\&quot;&gt;Direct Debit.&lt;/i&gt;
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Payment configuration object to generate a payment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionPost201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionPost201Response>> SubscriptionPostWithHttpInfoAsync(SubscriptionPostRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubscriptionPaymentApi : ISubscriptionPaymentApiSync, ISubscriptionPaymentApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SubscriptionPaymentApi : ISubscriptionPaymentApi
    {
        private Easypay.Rest.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionPaymentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SubscriptionPaymentApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionPaymentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SubscriptionPaymentApi(string basePath)
        {
            this.Configuration = Easypay.Rest.Client.Client.Configuration.MergeConfigurations(
                Easypay.Rest.Client.Client.GlobalConfiguration.Instance,
                new Easypay.Rest.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Easypay.Rest.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Easypay.Rest.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Easypay.Rest.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionPaymentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SubscriptionPaymentApi(Easypay.Rest.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Easypay.Rest.Client.Client.Configuration.MergeConfigurations(
                Easypay.Rest.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Easypay.Rest.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Easypay.Rest.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Easypay.Rest.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionPaymentApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SubscriptionPaymentApi(Easypay.Rest.Client.Client.ISynchronousClient client, Easypay.Rest.Client.Client.IAsynchronousClient asyncClient, Easypay.Rest.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Easypay.Rest.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Easypay.Rest.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Easypay.Rest.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Easypay.Rest.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Easypay.Rest.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List subscription payments Full report with all the subscriptions payments from your Account Id
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page Number (optional)</param>
        /// <param name="recordsPerPage">Limit records per page (Max: 100) (optional, default to 20M)</param>
        /// <param name="expirationTime">Filter by expiration time interval (max 30 days) (optional)</param>
        /// <param name="method">Filter by method (optional)</param>
        /// <param name="customer">Filter by customer key (optional)</param>
        /// <param name="id">Filter by id (optional)</param>
        /// <param name="key">Filter by subscription key (optional)</param>
        /// <param name="createdAt">Filter by created datetime interval (max 30 days) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionGet200Response</returns>
        public SubscriptionGet200Response SubscriptionGet(decimal? page = default(decimal?), decimal? recordsPerPage = default(decimal?), string? expirationTime = default(string?), string? method = default(string?), string? customer = default(string?), string? id = default(string?), string? key = default(string?), string? createdAt = default(string?), int operationIndex = 0)
        {
            Easypay.Rest.Client.Client.ApiResponse<SubscriptionGet200Response> localVarResponse = SubscriptionGetWithHttpInfo(page, recordsPerPage, expirationTime, method, customer, id, key, createdAt);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List subscription payments Full report with all the subscriptions payments from your Account Id
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page Number (optional)</param>
        /// <param name="recordsPerPage">Limit records per page (Max: 100) (optional, default to 20M)</param>
        /// <param name="expirationTime">Filter by expiration time interval (max 30 days) (optional)</param>
        /// <param name="method">Filter by method (optional)</param>
        /// <param name="customer">Filter by customer key (optional)</param>
        /// <param name="id">Filter by id (optional)</param>
        /// <param name="key">Filter by subscription key (optional)</param>
        /// <param name="createdAt">Filter by created datetime interval (max 30 days) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionGet200Response</returns>
        public Easypay.Rest.Client.Client.ApiResponse<SubscriptionGet200Response> SubscriptionGetWithHttpInfo(decimal? page = default(decimal?), decimal? recordsPerPage = default(decimal?), string? expirationTime = default(string?), string? method = default(string?), string? customer = default(string?), string? id = default(string?), string? key = default(string?), string? createdAt = default(string?), int operationIndex = 0)
        {
            Easypay.Rest.Client.Client.RequestOptions localVarRequestOptions = new Easypay.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }
            if (expirationTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "expiration_time", expirationTime));
            }
            if (method != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "method", method));
            }
            if (customer != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "customer", customer));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (key != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "key", key));
            }
            if (createdAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "created_at", createdAt));
            }

            localVarRequestOptions.Operation = "SubscriptionPaymentApi.SubscriptionGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accountId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccountId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccountId", this.Configuration.GetApiKeyWithPrefix("AccountId"));
            }
            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("ApiKey", this.Configuration.GetApiKeyWithPrefix("ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SubscriptionGet200Response>("/subscription", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List subscription payments Full report with all the subscriptions payments from your Account Id
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page Number (optional)</param>
        /// <param name="recordsPerPage">Limit records per page (Max: 100) (optional, default to 20M)</param>
        /// <param name="expirationTime">Filter by expiration time interval (max 30 days) (optional)</param>
        /// <param name="method">Filter by method (optional)</param>
        /// <param name="customer">Filter by customer key (optional)</param>
        /// <param name="id">Filter by id (optional)</param>
        /// <param name="key">Filter by subscription key (optional)</param>
        /// <param name="createdAt">Filter by created datetime interval (max 30 days) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionGet200Response</returns>
        public async System.Threading.Tasks.Task<SubscriptionGet200Response> SubscriptionGetAsync(decimal? page = default(decimal?), decimal? recordsPerPage = default(decimal?), string? expirationTime = default(string?), string? method = default(string?), string? customer = default(string?), string? id = default(string?), string? key = default(string?), string? createdAt = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Easypay.Rest.Client.Client.ApiResponse<SubscriptionGet200Response> localVarResponse = await SubscriptionGetWithHttpInfoAsync(page, recordsPerPage, expirationTime, method, customer, id, key, createdAt, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List subscription payments Full report with all the subscriptions payments from your Account Id
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page Number (optional)</param>
        /// <param name="recordsPerPage">Limit records per page (Max: 100) (optional, default to 20M)</param>
        /// <param name="expirationTime">Filter by expiration time interval (max 30 days) (optional)</param>
        /// <param name="method">Filter by method (optional)</param>
        /// <param name="customer">Filter by customer key (optional)</param>
        /// <param name="id">Filter by id (optional)</param>
        /// <param name="key">Filter by subscription key (optional)</param>
        /// <param name="createdAt">Filter by created datetime interval (max 30 days) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionGet200Response)</returns>
        public async System.Threading.Tasks.Task<Easypay.Rest.Client.Client.ApiResponse<SubscriptionGet200Response>> SubscriptionGetWithHttpInfoAsync(decimal? page = default(decimal?), decimal? recordsPerPage = default(decimal?), string? expirationTime = default(string?), string? method = default(string?), string? customer = default(string?), string? id = default(string?), string? key = default(string?), string? createdAt = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Easypay.Rest.Client.Client.RequestOptions localVarRequestOptions = new Easypay.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }
            if (expirationTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "expiration_time", expirationTime));
            }
            if (method != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "method", method));
            }
            if (customer != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "customer", customer));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (key != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "key", key));
            }
            if (createdAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "created_at", createdAt));
            }

            localVarRequestOptions.Operation = "SubscriptionPaymentApi.SubscriptionGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accountId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccountId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccountId", this.Configuration.GetApiKeyWithPrefix("AccountId"));
            }
            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("ApiKey", this.Configuration.GetApiKeyWithPrefix("ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SubscriptionGet200Response>("/subscription", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes subscription payment 
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void SubscriptionIdDelete(Guid id, int operationIndex = 0)
        {
            SubscriptionIdDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes subscription payment 
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Easypay.Rest.Client.Client.ApiResponse<Object> SubscriptionIdDeleteWithHttpInfo(Guid id, int operationIndex = 0)
        {
            Easypay.Rest.Client.Client.RequestOptions localVarRequestOptions = new Easypay.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Easypay.Rest.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "SubscriptionPaymentApi.SubscriptionIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accountId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccountId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccountId", this.Configuration.GetApiKeyWithPrefix("AccountId"));
            }
            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("ApiKey", this.Configuration.GetApiKeyWithPrefix("ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/subscription/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes subscription payment 
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SubscriptionIdDeleteAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await SubscriptionIdDeleteWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes subscription payment 
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Easypay.Rest.Client.Client.ApiResponse<Object>> SubscriptionIdDeleteWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Easypay.Rest.Client.Client.RequestOptions localVarRequestOptions = new Easypay.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Easypay.Rest.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "SubscriptionPaymentApi.SubscriptionIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accountId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccountId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccountId", this.Configuration.GetApiKeyWithPrefix("AccountId"));
            }
            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("ApiKey", this.Configuration.GetApiKeyWithPrefix("ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/subscription/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Shows subscription payment details 
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionIdGet200Response</returns>
        public SubscriptionIdGet200Response SubscriptionIdGet(Guid id, int operationIndex = 0)
        {
            Easypay.Rest.Client.Client.ApiResponse<SubscriptionIdGet200Response> localVarResponse = SubscriptionIdGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Shows subscription payment details 
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionIdGet200Response</returns>
        public Easypay.Rest.Client.Client.ApiResponse<SubscriptionIdGet200Response> SubscriptionIdGetWithHttpInfo(Guid id, int operationIndex = 0)
        {
            Easypay.Rest.Client.Client.RequestOptions localVarRequestOptions = new Easypay.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Easypay.Rest.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "SubscriptionPaymentApi.SubscriptionIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accountId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccountId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccountId", this.Configuration.GetApiKeyWithPrefix("AccountId"));
            }
            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("ApiKey", this.Configuration.GetApiKeyWithPrefix("ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SubscriptionIdGet200Response>("/subscription/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Shows subscription payment details 
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionIdGet200Response</returns>
        public async System.Threading.Tasks.Task<SubscriptionIdGet200Response> SubscriptionIdGetAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Easypay.Rest.Client.Client.ApiResponse<SubscriptionIdGet200Response> localVarResponse = await SubscriptionIdGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Shows subscription payment details 
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionIdGet200Response)</returns>
        public async System.Threading.Tasks.Task<Easypay.Rest.Client.Client.ApiResponse<SubscriptionIdGet200Response>> SubscriptionIdGetWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Easypay.Rest.Client.Client.RequestOptions localVarRequestOptions = new Easypay.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Easypay.Rest.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "SubscriptionPaymentApi.SubscriptionIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accountId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccountId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccountId", this.Configuration.GetApiKeyWithPrefix("AccountId"));
            }
            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("ApiKey", this.Configuration.GetApiKeyWithPrefix("ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SubscriptionIdGet200Response>("/subscription/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates subscription payment details Retrieves the subscription payment details.
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="body">Subscription Payment object to edit existing one</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionIdPatch200Response</returns>
        public SubscriptionIdPatch200Response SubscriptionIdPatch(Guid id, SubscriptionIdPatchRequest body, int operationIndex = 0)
        {
            Easypay.Rest.Client.Client.ApiResponse<SubscriptionIdPatch200Response> localVarResponse = SubscriptionIdPatchWithHttpInfo(id, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates subscription payment details Retrieves the subscription payment details.
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="body">Subscription Payment object to edit existing one</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionIdPatch200Response</returns>
        public Easypay.Rest.Client.Client.ApiResponse<SubscriptionIdPatch200Response> SubscriptionIdPatchWithHttpInfo(Guid id, SubscriptionIdPatchRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Easypay.Rest.Client.Client.ApiException(400, "Missing required parameter 'body' when calling SubscriptionPaymentApi->SubscriptionIdPatch");
            }

            Easypay.Rest.Client.Client.RequestOptions localVarRequestOptions = new Easypay.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Easypay.Rest.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "SubscriptionPaymentApi.SubscriptionIdPatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accountId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccountId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccountId", this.Configuration.GetApiKeyWithPrefix("AccountId"));
            }
            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("ApiKey", this.Configuration.GetApiKeyWithPrefix("ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<SubscriptionIdPatch200Response>("/subscription/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionIdPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates subscription payment details Retrieves the subscription payment details.
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="body">Subscription Payment object to edit existing one</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionIdPatch200Response</returns>
        public async System.Threading.Tasks.Task<SubscriptionIdPatch200Response> SubscriptionIdPatchAsync(Guid id, SubscriptionIdPatchRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Easypay.Rest.Client.Client.ApiResponse<SubscriptionIdPatch200Response> localVarResponse = await SubscriptionIdPatchWithHttpInfoAsync(id, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates subscription payment details Retrieves the subscription payment details.
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="body">Subscription Payment object to edit existing one</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionIdPatch200Response)</returns>
        public async System.Threading.Tasks.Task<Easypay.Rest.Client.Client.ApiResponse<SubscriptionIdPatch200Response>> SubscriptionIdPatchWithHttpInfoAsync(Guid id, SubscriptionIdPatchRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Easypay.Rest.Client.Client.ApiException(400, "Missing required parameter 'body' when calling SubscriptionPaymentApi->SubscriptionIdPatch");
            }


            Easypay.Rest.Client.Client.RequestOptions localVarRequestOptions = new Easypay.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Easypay.Rest.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "SubscriptionPaymentApi.SubscriptionIdPatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accountId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccountId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccountId", this.Configuration.GetApiKeyWithPrefix("AccountId"));
            }
            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("ApiKey", this.Configuration.GetApiKeyWithPrefix("ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<SubscriptionIdPatch200Response>("/subscription/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionIdPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create subscription payment Subscriptions are periodic payments of the same amount of money, configured through Checkout or our Payments API.  Subscriptions support a number of different frequencies, ranging from daily to once every three years. Their last payment can be determined by the end date of the subscription, as well as the total number of payments captured.  They also support a configurable number of retries for each capture in case of failure, as well as falling back to another (single) payment method if the recurring one is not successful.  Supported methods for subscriptions are: &lt;i style&#x3D;\&quot;color:red\&quot;&gt;Credit Card&lt;/i&gt; and &lt;i style&#x3D;\&quot;color:red\&quot;&gt;Direct Debit.&lt;/i&gt;
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Payment configuration object to generate a payment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionPost201Response</returns>
        public SubscriptionPost201Response SubscriptionPost(SubscriptionPostRequest body, int operationIndex = 0)
        {
            Easypay.Rest.Client.Client.ApiResponse<SubscriptionPost201Response> localVarResponse = SubscriptionPostWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create subscription payment Subscriptions are periodic payments of the same amount of money, configured through Checkout or our Payments API.  Subscriptions support a number of different frequencies, ranging from daily to once every three years. Their last payment can be determined by the end date of the subscription, as well as the total number of payments captured.  They also support a configurable number of retries for each capture in case of failure, as well as falling back to another (single) payment method if the recurring one is not successful.  Supported methods for subscriptions are: &lt;i style&#x3D;\&quot;color:red\&quot;&gt;Credit Card&lt;/i&gt; and &lt;i style&#x3D;\&quot;color:red\&quot;&gt;Direct Debit.&lt;/i&gt;
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Payment configuration object to generate a payment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionPost201Response</returns>
        public Easypay.Rest.Client.Client.ApiResponse<SubscriptionPost201Response> SubscriptionPostWithHttpInfo(SubscriptionPostRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Easypay.Rest.Client.Client.ApiException(400, "Missing required parameter 'body' when calling SubscriptionPaymentApi->SubscriptionPost");
            }

            Easypay.Rest.Client.Client.RequestOptions localVarRequestOptions = new Easypay.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "SubscriptionPaymentApi.SubscriptionPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accountId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccountId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccountId", this.Configuration.GetApiKeyWithPrefix("AccountId"));
            }
            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("ApiKey", this.Configuration.GetApiKeyWithPrefix("ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SubscriptionPost201Response>("/subscription", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create subscription payment Subscriptions are periodic payments of the same amount of money, configured through Checkout or our Payments API.  Subscriptions support a number of different frequencies, ranging from daily to once every three years. Their last payment can be determined by the end date of the subscription, as well as the total number of payments captured.  They also support a configurable number of retries for each capture in case of failure, as well as falling back to another (single) payment method if the recurring one is not successful.  Supported methods for subscriptions are: &lt;i style&#x3D;\&quot;color:red\&quot;&gt;Credit Card&lt;/i&gt; and &lt;i style&#x3D;\&quot;color:red\&quot;&gt;Direct Debit.&lt;/i&gt;
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Payment configuration object to generate a payment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionPost201Response</returns>
        public async System.Threading.Tasks.Task<SubscriptionPost201Response> SubscriptionPostAsync(SubscriptionPostRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Easypay.Rest.Client.Client.ApiResponse<SubscriptionPost201Response> localVarResponse = await SubscriptionPostWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create subscription payment Subscriptions are periodic payments of the same amount of money, configured through Checkout or our Payments API.  Subscriptions support a number of different frequencies, ranging from daily to once every three years. Their last payment can be determined by the end date of the subscription, as well as the total number of payments captured.  They also support a configurable number of retries for each capture in case of failure, as well as falling back to another (single) payment method if the recurring one is not successful.  Supported methods for subscriptions are: &lt;i style&#x3D;\&quot;color:red\&quot;&gt;Credit Card&lt;/i&gt; and &lt;i style&#x3D;\&quot;color:red\&quot;&gt;Direct Debit.&lt;/i&gt;
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Payment configuration object to generate a payment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionPost201Response)</returns>
        public async System.Threading.Tasks.Task<Easypay.Rest.Client.Client.ApiResponse<SubscriptionPost201Response>> SubscriptionPostWithHttpInfoAsync(SubscriptionPostRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Easypay.Rest.Client.Client.ApiException(400, "Missing required parameter 'body' when calling SubscriptionPaymentApi->SubscriptionPost");
            }


            Easypay.Rest.Client.Client.RequestOptions localVarRequestOptions = new Easypay.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "SubscriptionPaymentApi.SubscriptionPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accountId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccountId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccountId", this.Configuration.GetApiKeyWithPrefix("AccountId"));
            }
            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("ApiKey", this.Configuration.GetApiKeyWithPrefix("ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SubscriptionPost201Response>("/subscription", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
