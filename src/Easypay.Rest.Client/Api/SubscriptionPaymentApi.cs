/*
 * Easypay API
 *
 * <a href='https://www.easypay.pt/en/terms-conditions-and-legal-terms' class='item'>Terms conditions and legal terms</a><br><a href='https://www.easypay.pt/en/privacy-policy' class='item'>Privacy Policy</a><br><br><b>EasyPay</b> API allows you to query payment meta-data, receive payment notifications and generate payment references. Since EasyPay API is based on REST principles, itÂ´s very easy to write and test applications. You can use our code examples in PHP/CURL to test all the JSON payloads for Easypay Payment Service API.<br><br> We have two distinct environments on our API Services:<br> - If you are looking to receive payments, please use the <a href='https://api.prod.easypay.pt/docs#' class='item'><b>Production Documentation</b></a>.<br> - If you are looking to test or integrate, please use the <a href='https://goo.gl/CPxQnM' class='item'><b>Sandbox Documentation</b></a>. This environment will always have the latest road map deployments, usually all deployments are sent to production within 10 days. This environment is not meant for <b>Load Tests</b>, please do not use for this purpose, you might be blocked. <br><br> All communications have to include two headers for authentication, if fails it will always respond 403.<br> On <a href='https://backoffice.easypay.pt' class='item'><b>Easypay Backoffice</b></a> please create your authentication AccountId and ApiKey on menu: <i><b>Web Services->Configuration API 2.0->Keys</b></i>.<br><br> Our default response produces a <i><b>application/json</b></i>, but the <b>Accept</b> request-header field can be used to specify certain media types which are acceptable for the response. <br>Our available options are: <i>application/json</i>, <i>application/xml</i>, <i>text/csv</i>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: tec@easypay.pt
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using System.Threading;
using System.Threading.Tasks;
using Easypay.Rest.Client.Client;
using Easypay.Rest.Client.Model;

namespace Easypay.Rest.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubscriptionPaymentApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List subscription payments
        /// </summary>
        /// <remarks>
        /// Full report with all the subscriptions payments from your Account Id
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page Number (optional)</param>
        /// <param name="recordsPerPage">Limit records per page (Max: 100) (optional, default to 20.0M)</param>
        /// <param name="expirationTime">Filter by expiration time interval (max 30 days) (optional)</param>
        /// <param name="method">Filter by method (optional)</param>
        /// <param name="customer">Filter by customer key (optional)</param>
        /// <param name="id">Filter by id (optional)</param>
        /// <param name="key">Filter by subscription key (optional)</param>
        /// <param name="createdAt">Filter by created datetime interval (max 30 days) (optional)</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 SubscriptionGet(decimal? page = default(decimal?), decimal? recordsPerPage = default(decimal?), string expirationTime = default(string), Object method = default(Object), string customer = default(string), string id = default(string), string key = default(string), string createdAt = default(string));

        /// <summary>
        /// List subscription payments
        /// </summary>
        /// <remarks>
        /// Full report with all the subscriptions payments from your Account Id
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page Number (optional)</param>
        /// <param name="recordsPerPage">Limit records per page (Max: 100) (optional, default to 20.0M)</param>
        /// <param name="expirationTime">Filter by expiration time interval (max 30 days) (optional)</param>
        /// <param name="method">Filter by method (optional)</param>
        /// <param name="customer">Filter by customer key (optional)</param>
        /// <param name="id">Filter by id (optional)</param>
        /// <param name="key">Filter by subscription key (optional)</param>
        /// <param name="createdAt">Filter by created datetime interval (max 30 days) (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> SubscriptionGetWithHttpInfo(decimal? page = default(decimal?), decimal? recordsPerPage = default(decimal?), string expirationTime = default(string), Object method = default(Object), string customer = default(string), string id = default(string), string key = default(string), string createdAt = default(string));
        /// <summary>
        /// Deletes subscription payment
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void SubscriptionIdDelete(string subscriptionid);

        /// <summary>
        /// Deletes subscription payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SubscriptionIdDeleteWithHttpInfo(string subscriptionid);
        /// <summary>
        /// Shows subscription payment details
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>PaymentSubscriptionWithTransactions</returns>
        PaymentSubscriptionWithTransactions SubscriptionIdGet(string subscriptionid);

        /// <summary>
        /// Shows subscription payment details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PaymentSubscriptionWithTransactions</returns>
        ApiResponse<PaymentSubscriptionWithTransactions> SubscriptionIdGetWithHttpInfo(string subscriptionid);
        /// <summary>
        /// Updates subscription payment details
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Subscription Payment object to edit existing one</param>
        /// <returns>InlineResponse2004</returns>
        InlineResponse2015 SubscriptionIdPatch(string subscriptionid, PaymentSubscriptionPatchable body);

        /// <summary>
        /// Updates subscription payment details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Subscription Payment object to edit existing one</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        ApiResponse<InlineResponse2015> SubscriptionIdPatchWithHttpInfo(string subscriptionid, PaymentSubscriptionPatchable body);
        /// <summary>
        /// Create subscription payment
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Payment configuration object to generate a payment</param>
        /// <returns>InlineResponse2015</returns>
        InlineResponse2015 SubscriptionPost(PaymentSubscription value);

        /// <summary>
        /// Create subscription payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Payment configuration object to generate a payment</param>
        /// <returns>ApiResponse of InlineResponse2015</returns>
        ApiResponse<InlineResponse2015> SubscriptionPostWithHttpInfo(PaymentSubscription value);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubscriptionPaymentApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List subscription payments
        /// </summary>
        /// <remarks>
        /// Full report with all the subscriptions payments from your Account Id
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page Number (optional)</param>
        /// <param name="recordsPerPage">Limit records per page (Max: 100) (optional, default to 20.0M)</param>
        /// <param name="expirationTime">Filter by expiration time interval (max 30 days) (optional)</param>
        /// <param name="method">Filter by method (optional)</param>
        /// <param name="customer">Filter by customer key (optional)</param>
        /// <param name="id">Filter by id (optional)</param>
        /// <param name="key">Filter by subscription key (optional)</param>
        /// <param name="createdAt">Filter by created datetime interval (max 30 days) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse200</returns>
        Task<InlineResponse200> SubscriptionGetAsync(decimal? page = default(decimal?), decimal? recordsPerPage = default(decimal?), string expirationTime = default(string), Object method = default(Object), string customer = default(string), string id = default(string), string key = default(string), string createdAt = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List subscription payments
        /// </summary>
        /// <remarks>
        /// Full report with all the subscriptions payments from your Account Id
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page Number (optional)</param>
        /// <param name="recordsPerPage">Limit records per page (Max: 100) (optional, default to 20.0M)</param>
        /// <param name="expirationTime">Filter by expiration time interval (max 30 days) (optional)</param>
        /// <param name="method">Filter by method (optional)</param>
        /// <param name="customer">Filter by customer key (optional)</param>
        /// <param name="id">Filter by id (optional)</param>
        /// <param name="key">Filter by subscription key (optional)</param>
        /// <param name="createdAt">Filter by created datetime interval (max 30 days) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        Task<ApiResponse<InlineResponse200>> SubscriptionGetWithHttpInfoAsync(decimal? page = default(decimal?), decimal? recordsPerPage = default(decimal?), string expirationTime = default(string), Object method = default(Object), string customer = default(string), string id = default(string), string key = default(string), string createdAt = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Deletes subscription payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task SubscriptionIdDeleteAsync(string subscriptionid, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes subscription payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> SubscriptionIdDeleteWithHttpInfoAsync(string subscriptionid, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Shows subscription payment details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentSubscriptionWithTransactions</returns>
        Task<PaymentSubscriptionWithTransactions> SubscriptionIdGetAsync(string subscriptionid, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Shows subscription payment details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentSubscriptionWithTransactions)</returns>
        Task<ApiResponse<PaymentSubscriptionWithTransactions>> SubscriptionIdGetWithHttpInfoAsync(string subscriptionid, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Updates subscription payment details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Subscription Payment object to edit existing one</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2004</returns>
        Task<InlineResponse2015> SubscriptionIdPatchAsync(string subscriptionid, PaymentSubscriptionPatchable body, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates subscription payment details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Subscription Payment object to edit existing one</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        Task<ApiResponse<InlineResponse2015>> SubscriptionIdPatchWithHttpInfoAsync(string subscriptionid, PaymentSubscriptionPatchable body, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create subscription payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Payment configuration object to generate a payment</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2015</returns>
        Task<InlineResponse2015> SubscriptionPostAsync(PaymentSubscription value, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create subscription payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Payment configuration object to generate a payment</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2015)</returns>
        Task<ApiResponse<InlineResponse2015>> SubscriptionPostWithHttpInfoAsync(PaymentSubscription value, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubscriptionPaymentApi : ISubscriptionPaymentApiSync, ISubscriptionPaymentApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SubscriptionPaymentApi : ISubscriptionPaymentApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionPaymentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SubscriptionPaymentApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionPaymentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SubscriptionPaymentApi(String basePath)
        {
            this.Configuration = Rest.Client.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Rest.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionPaymentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SubscriptionPaymentApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Rest.Client.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Rest.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionPaymentApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SubscriptionPaymentApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Rest.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List subscription payments Full report with all the subscriptions payments from your Account Id
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page Number (optional)</param>
        /// <param name="recordsPerPage">Limit records per page (Max: 100) (optional, default to 20.0M)</param>
        /// <param name="expirationTime">Filter by expiration time interval (max 30 days) (optional)</param>
        /// <param name="method">Filter by method (optional)</param>
        /// <param name="customer">Filter by customer key (optional)</param>
        /// <param name="id">Filter by id (optional)</param>
        /// <param name="key">Filter by subscription key (optional)</param>
        /// <param name="createdAt">Filter by created datetime interval (max 30 days) (optional)</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 SubscriptionGet(decimal? page = default(decimal?), decimal? recordsPerPage = default(decimal?), string expirationTime = default(string), Object method = default(Object), string customer = default(string), string id = default(string), string key = default(string), string createdAt = default(string))
        {
            ApiResponse<InlineResponse200> localVarResponse = SubscriptionGetWithHttpInfo(page, recordsPerPage, expirationTime, method, customer, id, key, createdAt);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List subscription payments Full report with all the subscriptions payments from your Account Id
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page Number (optional)</param>
        /// <param name="recordsPerPage">Limit records per page (Max: 100) (optional, default to 20.0M)</param>
        /// <param name="expirationTime">Filter by expiration time interval (max 30 days) (optional)</param>
        /// <param name="method">Filter by method (optional)</param>
        /// <param name="customer">Filter by customer key (optional)</param>
        /// <param name="id">Filter by id (optional)</param>
        /// <param name="key">Filter by subscription key (optional)</param>
        /// <param name="createdAt">Filter by created datetime interval (max 30 days) (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse<InlineResponse200> SubscriptionGetWithHttpInfo(decimal? page = default(decimal?), decimal? recordsPerPage = default(decimal?), string expirationTime = default(string), Object method = default(Object), string customer = default(string), string id = default(string), string key = default(string), string createdAt = default(string))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }
            if (expirationTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "expiration_time", expirationTime));
            }
            if (method != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "method", method));
            }
            if (customer != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "customer", customer));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (key != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "key", key));
            }
            if (createdAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "created_at", createdAt));
            }

            // authentication (accountId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccountId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccountId", this.Configuration.GetApiKeyWithPrefix("AccountId"));
            }
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("ApiKey", this.Configuration.GetApiKeyWithPrefix("ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse200>("/subscription", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List subscription payments Full report with all the subscriptions payments from your Account Id
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page Number (optional)</param>
        /// <param name="recordsPerPage">Limit records per page (Max: 100) (optional, default to 20.0M)</param>
        /// <param name="expirationTime">Filter by expiration time interval (max 30 days) (optional)</param>
        /// <param name="method">Filter by method (optional)</param>
        /// <param name="customer">Filter by customer key (optional)</param>
        /// <param name="id">Filter by id (optional)</param>
        /// <param name="key">Filter by subscription key (optional)</param>
        /// <param name="createdAt">Filter by created datetime interval (max 30 days) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse200</returns>
        public async Task<InlineResponse200> SubscriptionGetAsync(decimal? page = default(decimal?), decimal? recordsPerPage = default(decimal?), string expirationTime = default(string), Object method = default(Object), string customer = default(string), string id = default(string), string key = default(string), string createdAt = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<InlineResponse200> localVarResponse = await SubscriptionGetWithHttpInfoAsync(page, recordsPerPage, expirationTime, method, customer, id, key, createdAt, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List subscription payments Full report with all the subscriptions payments from your Account Id
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page Number (optional)</param>
        /// <param name="recordsPerPage">Limit records per page (Max: 100) (optional, default to 20.0M)</param>
        /// <param name="expirationTime">Filter by expiration time interval (max 30 days) (optional)</param>
        /// <param name="method">Filter by method (optional)</param>
        /// <param name="customer">Filter by customer key (optional)</param>
        /// <param name="id">Filter by id (optional)</param>
        /// <param name="key">Filter by subscription key (optional)</param>
        /// <param name="createdAt">Filter by created datetime interval (max 30 days) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async Task<ApiResponse<InlineResponse200>> SubscriptionGetWithHttpInfoAsync(decimal? page = default(decimal?), decimal? recordsPerPage = default(decimal?), string expirationTime = default(string), Object method = default(Object), string customer = default(string), string id = default(string), string key = default(string), string createdAt = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }
            if (expirationTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "expiration_time", expirationTime));
            }
            if (method != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "method", method));
            }
            if (customer != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "customer", customer));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (key != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "key", key));
            }
            if (createdAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "created_at", createdAt));
            }

            // authentication (accountId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccountId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccountId", this.Configuration.GetApiKeyWithPrefix("AccountId"));
            }
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("ApiKey", this.Configuration.GetApiKeyWithPrefix("ApiKey"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse200>("/subscription", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes subscription payment 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void SubscriptionIdDelete(string subscriptionid)
        {
            SubscriptionIdDeleteWithHttpInfo(subscriptionid);
        }

        /// <summary>
        /// Deletes subscription payment 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> SubscriptionIdDeleteWithHttpInfo(string subscriptionid)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (accountId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccountId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccountId", this.Configuration.GetApiKeyWithPrefix("AccountId"));
            }
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("ApiKey", this.Configuration.GetApiKeyWithPrefix("ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>(string.Format("/subscription/{0}", subscriptionid), localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes subscription payment 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task SubscriptionIdDeleteAsync(string subscriptionid, CancellationToken cancellationToken = default(CancellationToken))
        {
            await SubscriptionIdDeleteWithHttpInfoAsync(subscriptionid, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes subscription payment 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<object>> SubscriptionIdDeleteWithHttpInfoAsync(string subscriptionid, CancellationToken cancellationToken = default(CancellationToken))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (accountId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccountId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccountId", this.Configuration.GetApiKeyWithPrefix("AccountId"));
            }
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("ApiKey", this.Configuration.GetApiKeyWithPrefix("ApiKey"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>(string.Format("/subscription/{0}", subscriptionid), localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Shows subscription payment details 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>PaymentSubscriptionWithTransactions</returns>
        public PaymentSubscriptionWithTransactions SubscriptionIdGet(string subscriptionid)
        {
            ApiResponse<PaymentSubscriptionWithTransactions> localVarResponse = SubscriptionIdGetWithHttpInfo(subscriptionid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Shows subscription payment details 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PaymentSubscriptionWithTransactions</returns>
        public ApiResponse<PaymentSubscriptionWithTransactions> SubscriptionIdGetWithHttpInfo(string subscriptionid)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (accountId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccountId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccountId", this.Configuration.GetApiKeyWithPrefix("AccountId"));
            }
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("ApiKey", this.Configuration.GetApiKeyWithPrefix("ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PaymentSubscriptionWithTransactions>(string.Format("/subscription/{0}", subscriptionid), localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Shows subscription payment details 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentSubscriptionWithTransactions</returns>
        public async Task<PaymentSubscriptionWithTransactions> SubscriptionIdGetAsync(string subscriptionid, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<PaymentSubscriptionWithTransactions> localVarResponse = await SubscriptionIdGetWithHttpInfoAsync(subscriptionid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Shows subscription payment details 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentSubscriptionWithTransactions)</returns>
        public async Task<ApiResponse<PaymentSubscriptionWithTransactions>> SubscriptionIdGetWithHttpInfoAsync(string subscriptionid, CancellationToken cancellationToken = default(CancellationToken))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (accountId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccountId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccountId", this.Configuration.GetApiKeyWithPrefix("AccountId"));
            }
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("ApiKey", this.Configuration.GetApiKeyWithPrefix("ApiKey"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PaymentSubscriptionWithTransactions>(string.Format("/subscription/{0}", subscriptionid), localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates subscription payment details 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Subscription Payment object to edit existing one</param>
        /// <returns>InlineResponse2004</returns>
        public InlineResponse2015 SubscriptionIdPatch(string subscriptionid, PaymentSubscriptionPatchable body)
        {
            ApiResponse<InlineResponse2015> localVarResponse = SubscriptionIdPatchWithHttpInfo(subscriptionid, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates subscription payment details 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Subscription Payment object to edit existing one</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        public ApiResponse<InlineResponse2015> SubscriptionIdPatchWithHttpInfo(string subscriptionid, PaymentSubscriptionPatchable body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SubscriptionPaymentApi->SubscriptionIdPatch");

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (accountId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccountId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccountId", this.Configuration.GetApiKeyWithPrefix("AccountId"));
            }
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("ApiKey", this.Configuration.GetApiKeyWithPrefix("ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<InlineResponse2015>(string.Format("/subscription/{0}", subscriptionid), localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionIdPatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates subscription payment details 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Subscription Payment object to edit existing one</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2004</returns>
        public async Task<InlineResponse2015> SubscriptionIdPatchAsync(string subscriptionid, PaymentSubscriptionPatchable body, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<InlineResponse2015> localVarResponse = await SubscriptionIdPatchWithHttpInfoAsync(subscriptionid, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates subscription payment details 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Subscription Payment object to edit existing one</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        public async Task<ApiResponse<InlineResponse2015>> SubscriptionIdPatchWithHttpInfoAsync(string subscriptionid, PaymentSubscriptionPatchable body, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SubscriptionPaymentApi->SubscriptionIdPatch");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (accountId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccountId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccountId", this.Configuration.GetApiKeyWithPrefix("AccountId"));
            }
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("ApiKey", this.Configuration.GetApiKeyWithPrefix("ApiKey"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<InlineResponse2015>(string.Format("/subscription/{0}", subscriptionid), localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionIdPatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create subscription payment 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Payment configuration object to generate a payment</param>
        /// <returns>InlineResponse2015</returns>
        public InlineResponse2015 SubscriptionPost(PaymentSubscription body)
        {
            ApiResponse<InlineResponse2015> localVarResponse = SubscriptionPostWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create subscription payment 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Payment configuration object to generate a payment</param>
        /// <returns>ApiResponse of InlineResponse2015</returns>
        public ApiResponse<InlineResponse2015> SubscriptionPostWithHttpInfo(PaymentSubscription body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SubscriptionPaymentApi->SubscriptionPost");

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (accountId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccountId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccountId", this.Configuration.GetApiKeyWithPrefix("AccountId"));
            }
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("ApiKey", this.Configuration.GetApiKeyWithPrefix("ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InlineResponse2015>("/subscription", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create subscription payment 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Payment configuration object to generate a payment</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2015</returns>
        public async Task<InlineResponse2015> SubscriptionPostAsync(PaymentSubscription body, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<InlineResponse2015> localVarResponse = await SubscriptionPostWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create subscription payment 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Payment configuration object to generate a payment</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2015)</returns>
        public async Task<ApiResponse<InlineResponse2015>> SubscriptionPostWithHttpInfoAsync(PaymentSubscription body, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SubscriptionPaymentApi->SubscriptionPost");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (accountId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccountId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccountId", this.Configuration.GetApiKeyWithPrefix("AccountId"));
            }
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("ApiKey", this.Configuration.GetApiKeyWithPrefix("ApiKey"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2015>("/subscription", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
