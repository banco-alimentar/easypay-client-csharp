/*
 * Easypay API
 *
 * EasyPay - API
 *
 * The version of the OpenAPI document: 2.0.2
 * Contact: tec@easypay.pt
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Easypay.Rest.Client.Client;
using Easypay.Rest.Client.Model;

namespace Easypay.Rest.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConfigApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Account Config
        /// </summary>
        /// <remarks>
        /// Get Account Config
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ConfigDetailsResponse</returns>
        ConfigDetailsResponse GetAccountConfig();

        /// <summary>
        /// Get Account Config
        /// </summary>
        /// <remarks>
        /// Get Account Config
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ConfigDetailsResponse</returns>
        ApiResponse<ConfigDetailsResponse> GetAccountConfigWithHttpInfo();
        /// <summary>
        /// Set the Payment configuration to generate payments
        /// </summary>
        /// <remarks>
        /// SetAccount Config
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountConfigRequest">Payment configuration object to generate a payment</param>
        /// <returns>ConfigDetailsResponse</returns>
        ConfigDetailsResponse SetAccountConfig(AccountConfigRequest accountConfigRequest);

        /// <summary>
        /// Set the Payment configuration to generate payments
        /// </summary>
        /// <remarks>
        /// SetAccount Config
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountConfigRequest">Payment configuration object to generate a payment</param>
        /// <returns>ApiResponse of ConfigDetailsResponse</returns>
        ApiResponse<ConfigDetailsResponse> SetAccountConfigWithHttpInfo(AccountConfigRequest accountConfigRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConfigApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Account Config
        /// </summary>
        /// <remarks>
        /// Get Account Config
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConfigDetailsResponse</returns>
        System.Threading.Tasks.Task<ConfigDetailsResponse> GetAccountConfigAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Account Config
        /// </summary>
        /// <remarks>
        /// Get Account Config
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConfigDetailsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConfigDetailsResponse>> GetAccountConfigWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set the Payment configuration to generate payments
        /// </summary>
        /// <remarks>
        /// SetAccount Config
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountConfigRequest">Payment configuration object to generate a payment</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConfigDetailsResponse</returns>
        System.Threading.Tasks.Task<ConfigDetailsResponse> SetAccountConfigAsync(AccountConfigRequest accountConfigRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set the Payment configuration to generate payments
        /// </summary>
        /// <remarks>
        /// SetAccount Config
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountConfigRequest">Payment configuration object to generate a payment</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConfigDetailsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConfigDetailsResponse>> SetAccountConfigWithHttpInfoAsync(AccountConfigRequest accountConfigRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConfigApi : IConfigApiSync, IConfigApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ConfigApi : IConfigApi
    {
        private Easypay.Rest.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConfigApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConfigApi(String basePath)
        {
            this.Configuration = Easypay.Rest.Client.Client.Configuration.MergeConfigurations(
                Easypay.Rest.Client.Client.GlobalConfiguration.Instance,
                new Easypay.Rest.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Easypay.Rest.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Easypay.Rest.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Easypay.Rest.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ConfigApi(Easypay.Rest.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Easypay.Rest.Client.Client.Configuration.MergeConfigurations(
                Easypay.Rest.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Easypay.Rest.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Easypay.Rest.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Easypay.Rest.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ConfigApi(Easypay.Rest.Client.Client.ISynchronousClient client, Easypay.Rest.Client.Client.IAsynchronousClient asyncClient, Easypay.Rest.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Easypay.Rest.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Easypay.Rest.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Easypay.Rest.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Easypay.Rest.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Easypay.Rest.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Account Config Get Account Config
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ConfigDetailsResponse</returns>
        public ConfigDetailsResponse GetAccountConfig()
        {
            Easypay.Rest.Client.Client.ApiResponse<ConfigDetailsResponse> localVarResponse = GetAccountConfigWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Account Config Get Account Config
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ConfigDetailsResponse</returns>
        public Easypay.Rest.Client.Client.ApiResponse<ConfigDetailsResponse> GetAccountConfigWithHttpInfo()
        {
            Easypay.Rest.Client.Client.RequestOptions localVarRequestOptions = new Easypay.Rest.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (accountId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccountId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccountId", this.Configuration.GetApiKeyWithPrefix("AccountId"));
            }
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("ApiKey", this.Configuration.GetApiKeyWithPrefix("ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ConfigDetailsResponse>("/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Account Config Get Account Config
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConfigDetailsResponse</returns>
        public async System.Threading.Tasks.Task<ConfigDetailsResponse> GetAccountConfigAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Easypay.Rest.Client.Client.ApiResponse<ConfigDetailsResponse> localVarResponse = await GetAccountConfigWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Account Config Get Account Config
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConfigDetailsResponse)</returns>
        public async System.Threading.Tasks.Task<Easypay.Rest.Client.Client.ApiResponse<ConfigDetailsResponse>> GetAccountConfigWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Easypay.Rest.Client.Client.RequestOptions localVarRequestOptions = new Easypay.Rest.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (accountId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccountId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccountId", this.Configuration.GetApiKeyWithPrefix("AccountId"));
            }
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("ApiKey", this.Configuration.GetApiKeyWithPrefix("ApiKey"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ConfigDetailsResponse>("/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set the Payment configuration to generate payments SetAccount Config
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountConfigRequest">Payment configuration object to generate a payment</param>
        /// <returns>ConfigDetailsResponse</returns>
        public ConfigDetailsResponse SetAccountConfig(AccountConfigRequest accountConfigRequest)
        {
            Easypay.Rest.Client.Client.ApiResponse<ConfigDetailsResponse> localVarResponse = SetAccountConfigWithHttpInfo(accountConfigRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set the Payment configuration to generate payments SetAccount Config
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountConfigRequest">Payment configuration object to generate a payment</param>
        /// <returns>ApiResponse of ConfigDetailsResponse</returns>
        public Easypay.Rest.Client.Client.ApiResponse<ConfigDetailsResponse> SetAccountConfigWithHttpInfo(AccountConfigRequest accountConfigRequest)
        {
            // verify the required parameter 'accountConfigRequest' is set
            if (accountConfigRequest == null)
                throw new Easypay.Rest.Client.Client.ApiException(400, "Missing required parameter 'accountConfigRequest' when calling ConfigApi->SetAccountConfig");

            Easypay.Rest.Client.Client.RequestOptions localVarRequestOptions = new Easypay.Rest.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = accountConfigRequest;

            // authentication (accountId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccountId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccountId", this.Configuration.GetApiKeyWithPrefix("AccountId"));
            }
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("ApiKey", this.Configuration.GetApiKeyWithPrefix("ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<ConfigDetailsResponse>("/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetAccountConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set the Payment configuration to generate payments SetAccount Config
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountConfigRequest">Payment configuration object to generate a payment</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConfigDetailsResponse</returns>
        public async System.Threading.Tasks.Task<ConfigDetailsResponse> SetAccountConfigAsync(AccountConfigRequest accountConfigRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Easypay.Rest.Client.Client.ApiResponse<ConfigDetailsResponse> localVarResponse = await SetAccountConfigWithHttpInfoAsync(accountConfigRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set the Payment configuration to generate payments SetAccount Config
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountConfigRequest">Payment configuration object to generate a payment</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConfigDetailsResponse)</returns>
        public async System.Threading.Tasks.Task<Easypay.Rest.Client.Client.ApiResponse<ConfigDetailsResponse>> SetAccountConfigWithHttpInfoAsync(AccountConfigRequest accountConfigRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountConfigRequest' is set
            if (accountConfigRequest == null)
                throw new Easypay.Rest.Client.Client.ApiException(400, "Missing required parameter 'accountConfigRequest' when calling ConfigApi->SetAccountConfig");


            Easypay.Rest.Client.Client.RequestOptions localVarRequestOptions = new Easypay.Rest.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = accountConfigRequest;

            // authentication (accountId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccountId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccountId", this.Configuration.GetApiKeyWithPrefix("AccountId"));
            }
            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("ApiKey", this.Configuration.GetApiKeyWithPrefix("ApiKey"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<ConfigDetailsResponse>("/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetAccountConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
