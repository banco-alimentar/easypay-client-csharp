/*
 * Easypay Payments API
 *
 * <a href='https://www.easypay.pt/en/legal-terms-and-conditions/' class='item'>Terms conditions and legal terms</a><br><a href='https://www.easypay.pt/en/privacy-and-data-protection-policy/' class='item'>Privacy Policy</a>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: tec@easypay.pt
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Easypay.Rest.Client.Client;
using Easypay.Rest.Client.Model;

namespace Easypay.Rest.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFrequentPaymentApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Request Authorisation
        /// </summary>
        /// <remarks>
        /// Create a new authorisation on a given Frequent Payment
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="frequentAuthorisationRequest">Payment configuration object to generate a payment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FrequentAuthorisation201Response</returns>
        FrequentAuthorisation201Response FrequentAuthorisation(Guid id, FrequentAuthorisationRequest frequentAuthorisationRequest, int operationIndex = 0);

        /// <summary>
        /// Request Authorisation
        /// </summary>
        /// <remarks>
        /// Create a new authorisation on a given Frequent Payment
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="frequentAuthorisationRequest">Payment configuration object to generate a payment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FrequentAuthorisation201Response</returns>
        ApiResponse<FrequentAuthorisation201Response> FrequentAuthorisationWithHttpInfo(Guid id, FrequentAuthorisationRequest frequentAuthorisationRequest, int operationIndex = 0);
        /// <summary>
        /// Lists frequent payments
        /// </summary>
        /// <remarks>
        /// Full report with all the frequent payments from your Account Id
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page Number (optional)</param>
        /// <param name="recordsPerPage">Limit records per page (Max: 100) (optional, default to 20M)</param>
        /// <param name="expirationTime">Filter by expiration time interval (max 30 days) (optional)</param>
        /// <param name="method">Filter by method (optional)</param>
        /// <param name="customer">Filter by customer key (optional)</param>
        /// <param name="id">Filter by id (optional)</param>
        /// <param name="key">Filter by frequent key (optional)</param>
        /// <param name="createdAt">Filter by created datetime interval (max 30 days) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FrequentGet200Response</returns>
        FrequentGet200Response FrequentGet(decimal? page = default(decimal?), decimal? recordsPerPage = default(decimal?), string? expirationTime = default(string?), string? method = default(string?), string? customer = default(string?), string? id = default(string?), string? key = default(string?), string? createdAt = default(string?), int operationIndex = 0);

        /// <summary>
        /// Lists frequent payments
        /// </summary>
        /// <remarks>
        /// Full report with all the frequent payments from your Account Id
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page Number (optional)</param>
        /// <param name="recordsPerPage">Limit records per page (Max: 100) (optional, default to 20M)</param>
        /// <param name="expirationTime">Filter by expiration time interval (max 30 days) (optional)</param>
        /// <param name="method">Filter by method (optional)</param>
        /// <param name="customer">Filter by customer key (optional)</param>
        /// <param name="id">Filter by id (optional)</param>
        /// <param name="key">Filter by frequent key (optional)</param>
        /// <param name="createdAt">Filter by created datetime interval (max 30 days) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FrequentGet200Response</returns>
        ApiResponse<FrequentGet200Response> FrequentGetWithHttpInfo(decimal? page = default(decimal?), decimal? recordsPerPage = default(decimal?), string? expirationTime = default(string?), string? method = default(string?), string? customer = default(string?), string? id = default(string?), string? key = default(string?), string? createdAt = default(string?), int operationIndex = 0);
        /// <summary>
        /// Deletes frequent payment
        /// </summary>
        /// <remarks>
        /// 3 times a day (10am, 3pm and 10pm) our system will attempt to close your deleted MB payments.&lt;br&gt;All CC and MBW authorisations will be deleted, releasing the funds.&lt;br&gt;All MBW operations waiting for user interaction will be cancelled.&lt;br&gt;Before 6pm all Sepa Direct Debits waiting for file processing will be cancelled.
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void FrequentIdDelete(Guid id, int operationIndex = 0);

        /// <summary>
        /// Deletes frequent payment
        /// </summary>
        /// <remarks>
        /// 3 times a day (10am, 3pm and 10pm) our system will attempt to close your deleted MB payments.&lt;br&gt;All CC and MBW authorisations will be deleted, releasing the funds.&lt;br&gt;All MBW operations waiting for user interaction will be cancelled.&lt;br&gt;Before 6pm all Sepa Direct Debits waiting for file processing will be cancelled.
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FrequentIdDeleteWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// Shows frequent payment details
        /// </summary>
        /// <remarks>
        /// Retrieve a Frequent Payment details
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Frequent</returns>
        Frequent FrequentIdGet(Guid id, int operationIndex = 0);

        /// <summary>
        /// Shows frequent payment details
        /// </summary>
        /// <remarks>
        /// Retrieve a Frequent Payment details
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Frequent</returns>
        ApiResponse<Frequent> FrequentIdGetWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// Updates frequent payment details
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="frequentIdPatchRequest">Frequent Payment object to edit existing one</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FrequentIdPatch200Response</returns>
        FrequentIdPatch200Response FrequentIdPatch(Guid id, FrequentIdPatchRequest frequentIdPatchRequest, int operationIndex = 0);

        /// <summary>
        /// Updates frequent payment details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="frequentIdPatchRequest">Frequent Payment object to edit existing one</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FrequentIdPatch200Response</returns>
        ApiResponse<FrequentIdPatch200Response> FrequentIdPatchWithHttpInfo(Guid id, FrequentIdPatchRequest frequentIdPatchRequest, int operationIndex = 0);
        /// <summary>
        /// Create frequent payment
        /// </summary>
        /// <remarks>
        /// Frequent payments are repeatable transactions of varying sums without the client having to enter their payment details again.  It is possible to limit the transferred sums by choosing minimum or maximum values, either to the total sum of the transactions or each individual transaction.  Supported methods for frequent payments are: &lt;i style&#x3D;\&quot;color:red\&quot;&gt;Credit Card, MB WAY, Multibanco, Direct Debit&lt;/i&gt; and &lt;i style&#x3D;\&quot;color:red\&quot;&gt;Virtual IBAN&lt;/i&gt; 
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="frequentPostRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FrequentPost201Response</returns>
        FrequentPost201Response FrequentPost(FrequentPostRequest? frequentPostRequest = default(FrequentPostRequest?), int operationIndex = 0);

        /// <summary>
        /// Create frequent payment
        /// </summary>
        /// <remarks>
        /// Frequent payments are repeatable transactions of varying sums without the client having to enter their payment details again.  It is possible to limit the transferred sums by choosing minimum or maximum values, either to the total sum of the transactions or each individual transaction.  Supported methods for frequent payments are: &lt;i style&#x3D;\&quot;color:red\&quot;&gt;Credit Card, MB WAY, Multibanco, Direct Debit&lt;/i&gt; and &lt;i style&#x3D;\&quot;color:red\&quot;&gt;Virtual IBAN&lt;/i&gt; 
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="frequentPostRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FrequentPost201Response</returns>
        ApiResponse<FrequentPost201Response> FrequentPostWithHttpInfo(FrequentPostRequest? frequentPostRequest = default(FrequentPostRequest?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFrequentPaymentApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Request Authorisation
        /// </summary>
        /// <remarks>
        /// Create a new authorisation on a given Frequent Payment
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="frequentAuthorisationRequest">Payment configuration object to generate a payment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FrequentAuthorisation201Response</returns>
        System.Threading.Tasks.Task<FrequentAuthorisation201Response> FrequentAuthorisationAsync(Guid id, FrequentAuthorisationRequest frequentAuthorisationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Request Authorisation
        /// </summary>
        /// <remarks>
        /// Create a new authorisation on a given Frequent Payment
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="frequentAuthorisationRequest">Payment configuration object to generate a payment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FrequentAuthorisation201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<FrequentAuthorisation201Response>> FrequentAuthorisationWithHttpInfoAsync(Guid id, FrequentAuthorisationRequest frequentAuthorisationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Lists frequent payments
        /// </summary>
        /// <remarks>
        /// Full report with all the frequent payments from your Account Id
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page Number (optional)</param>
        /// <param name="recordsPerPage">Limit records per page (Max: 100) (optional, default to 20M)</param>
        /// <param name="expirationTime">Filter by expiration time interval (max 30 days) (optional)</param>
        /// <param name="method">Filter by method (optional)</param>
        /// <param name="customer">Filter by customer key (optional)</param>
        /// <param name="id">Filter by id (optional)</param>
        /// <param name="key">Filter by frequent key (optional)</param>
        /// <param name="createdAt">Filter by created datetime interval (max 30 days) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FrequentGet200Response</returns>
        System.Threading.Tasks.Task<FrequentGet200Response> FrequentGetAsync(decimal? page = default(decimal?), decimal? recordsPerPage = default(decimal?), string? expirationTime = default(string?), string? method = default(string?), string? customer = default(string?), string? id = default(string?), string? key = default(string?), string? createdAt = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Lists frequent payments
        /// </summary>
        /// <remarks>
        /// Full report with all the frequent payments from your Account Id
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page Number (optional)</param>
        /// <param name="recordsPerPage">Limit records per page (Max: 100) (optional, default to 20M)</param>
        /// <param name="expirationTime">Filter by expiration time interval (max 30 days) (optional)</param>
        /// <param name="method">Filter by method (optional)</param>
        /// <param name="customer">Filter by customer key (optional)</param>
        /// <param name="id">Filter by id (optional)</param>
        /// <param name="key">Filter by frequent key (optional)</param>
        /// <param name="createdAt">Filter by created datetime interval (max 30 days) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FrequentGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<FrequentGet200Response>> FrequentGetWithHttpInfoAsync(decimal? page = default(decimal?), decimal? recordsPerPage = default(decimal?), string? expirationTime = default(string?), string? method = default(string?), string? customer = default(string?), string? id = default(string?), string? key = default(string?), string? createdAt = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Deletes frequent payment
        /// </summary>
        /// <remarks>
        /// 3 times a day (10am, 3pm and 10pm) our system will attempt to close your deleted MB payments.&lt;br&gt;All CC and MBW authorisations will be deleted, releasing the funds.&lt;br&gt;All MBW operations waiting for user interaction will be cancelled.&lt;br&gt;Before 6pm all Sepa Direct Debits waiting for file processing will be cancelled.
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FrequentIdDeleteAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Deletes frequent payment
        /// </summary>
        /// <remarks>
        /// 3 times a day (10am, 3pm and 10pm) our system will attempt to close your deleted MB payments.&lt;br&gt;All CC and MBW authorisations will be deleted, releasing the funds.&lt;br&gt;All MBW operations waiting for user interaction will be cancelled.&lt;br&gt;Before 6pm all Sepa Direct Debits waiting for file processing will be cancelled.
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FrequentIdDeleteWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Shows frequent payment details
        /// </summary>
        /// <remarks>
        /// Retrieve a Frequent Payment details
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Frequent</returns>
        System.Threading.Tasks.Task<Frequent> FrequentIdGetAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Shows frequent payment details
        /// </summary>
        /// <remarks>
        /// Retrieve a Frequent Payment details
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Frequent)</returns>
        System.Threading.Tasks.Task<ApiResponse<Frequent>> FrequentIdGetWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Updates frequent payment details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="frequentIdPatchRequest">Frequent Payment object to edit existing one</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FrequentIdPatch200Response</returns>
        System.Threading.Tasks.Task<FrequentIdPatch200Response> FrequentIdPatchAsync(Guid id, FrequentIdPatchRequest frequentIdPatchRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Updates frequent payment details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="frequentIdPatchRequest">Frequent Payment object to edit existing one</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FrequentIdPatch200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<FrequentIdPatch200Response>> FrequentIdPatchWithHttpInfoAsync(Guid id, FrequentIdPatchRequest frequentIdPatchRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create frequent payment
        /// </summary>
        /// <remarks>
        /// Frequent payments are repeatable transactions of varying sums without the client having to enter their payment details again.  It is possible to limit the transferred sums by choosing minimum or maximum values, either to the total sum of the transactions or each individual transaction.  Supported methods for frequent payments are: &lt;i style&#x3D;\&quot;color:red\&quot;&gt;Credit Card, MB WAY, Multibanco, Direct Debit&lt;/i&gt; and &lt;i style&#x3D;\&quot;color:red\&quot;&gt;Virtual IBAN&lt;/i&gt; 
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="frequentPostRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FrequentPost201Response</returns>
        System.Threading.Tasks.Task<FrequentPost201Response> FrequentPostAsync(FrequentPostRequest? frequentPostRequest = default(FrequentPostRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create frequent payment
        /// </summary>
        /// <remarks>
        /// Frequent payments are repeatable transactions of varying sums without the client having to enter their payment details again.  It is possible to limit the transferred sums by choosing minimum or maximum values, either to the total sum of the transactions or each individual transaction.  Supported methods for frequent payments are: &lt;i style&#x3D;\&quot;color:red\&quot;&gt;Credit Card, MB WAY, Multibanco, Direct Debit&lt;/i&gt; and &lt;i style&#x3D;\&quot;color:red\&quot;&gt;Virtual IBAN&lt;/i&gt; 
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="frequentPostRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FrequentPost201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<FrequentPost201Response>> FrequentPostWithHttpInfoAsync(FrequentPostRequest? frequentPostRequest = default(FrequentPostRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFrequentPaymentApi : IFrequentPaymentApiSync, IFrequentPaymentApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FrequentPaymentApi : IFrequentPaymentApi
    {
        private Easypay.Rest.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FrequentPaymentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FrequentPaymentApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FrequentPaymentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FrequentPaymentApi(string basePath)
        {
            this.Configuration = Easypay.Rest.Client.Client.Configuration.MergeConfigurations(
                Easypay.Rest.Client.Client.GlobalConfiguration.Instance,
                new Easypay.Rest.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Easypay.Rest.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Easypay.Rest.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Easypay.Rest.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FrequentPaymentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FrequentPaymentApi(Easypay.Rest.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Easypay.Rest.Client.Client.Configuration.MergeConfigurations(
                Easypay.Rest.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Easypay.Rest.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Easypay.Rest.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Easypay.Rest.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FrequentPaymentApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FrequentPaymentApi(Easypay.Rest.Client.Client.ISynchronousClient client, Easypay.Rest.Client.Client.IAsynchronousClient asyncClient, Easypay.Rest.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Easypay.Rest.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Easypay.Rest.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Easypay.Rest.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Easypay.Rest.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Easypay.Rest.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Request Authorisation Create a new authorisation on a given Frequent Payment
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="frequentAuthorisationRequest">Payment configuration object to generate a payment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FrequentAuthorisation201Response</returns>
        public FrequentAuthorisation201Response FrequentAuthorisation(Guid id, FrequentAuthorisationRequest frequentAuthorisationRequest, int operationIndex = 0)
        {
            Easypay.Rest.Client.Client.ApiResponse<FrequentAuthorisation201Response> localVarResponse = FrequentAuthorisationWithHttpInfo(id, frequentAuthorisationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Request Authorisation Create a new authorisation on a given Frequent Payment
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="frequentAuthorisationRequest">Payment configuration object to generate a payment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FrequentAuthorisation201Response</returns>
        public Easypay.Rest.Client.Client.ApiResponse<FrequentAuthorisation201Response> FrequentAuthorisationWithHttpInfo(Guid id, FrequentAuthorisationRequest frequentAuthorisationRequest, int operationIndex = 0)
        {
            // verify the required parameter 'frequentAuthorisationRequest' is set
            if (frequentAuthorisationRequest == null)
            {
                throw new Easypay.Rest.Client.Client.ApiException(400, "Missing required parameter 'frequentAuthorisationRequest' when calling FrequentPaymentApi->FrequentAuthorisation");
            }

            Easypay.Rest.Client.Client.RequestOptions localVarRequestOptions = new Easypay.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Easypay.Rest.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = frequentAuthorisationRequest;

            localVarRequestOptions.Operation = "FrequentPaymentApi.FrequentAuthorisation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accountId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccountId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccountId", this.Configuration.GetApiKeyWithPrefix("AccountId"));
            }
            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("ApiKey", this.Configuration.GetApiKeyWithPrefix("ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<FrequentAuthorisation201Response>("/frequent/authorisation/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FrequentAuthorisation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request Authorisation Create a new authorisation on a given Frequent Payment
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="frequentAuthorisationRequest">Payment configuration object to generate a payment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FrequentAuthorisation201Response</returns>
        public async System.Threading.Tasks.Task<FrequentAuthorisation201Response> FrequentAuthorisationAsync(Guid id, FrequentAuthorisationRequest frequentAuthorisationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Easypay.Rest.Client.Client.ApiResponse<FrequentAuthorisation201Response> localVarResponse = await FrequentAuthorisationWithHttpInfoAsync(id, frequentAuthorisationRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Request Authorisation Create a new authorisation on a given Frequent Payment
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="frequentAuthorisationRequest">Payment configuration object to generate a payment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FrequentAuthorisation201Response)</returns>
        public async System.Threading.Tasks.Task<Easypay.Rest.Client.Client.ApiResponse<FrequentAuthorisation201Response>> FrequentAuthorisationWithHttpInfoAsync(Guid id, FrequentAuthorisationRequest frequentAuthorisationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'frequentAuthorisationRequest' is set
            if (frequentAuthorisationRequest == null)
            {
                throw new Easypay.Rest.Client.Client.ApiException(400, "Missing required parameter 'frequentAuthorisationRequest' when calling FrequentPaymentApi->FrequentAuthorisation");
            }


            Easypay.Rest.Client.Client.RequestOptions localVarRequestOptions = new Easypay.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Easypay.Rest.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = frequentAuthorisationRequest;

            localVarRequestOptions.Operation = "FrequentPaymentApi.FrequentAuthorisation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accountId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccountId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccountId", this.Configuration.GetApiKeyWithPrefix("AccountId"));
            }
            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("ApiKey", this.Configuration.GetApiKeyWithPrefix("ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<FrequentAuthorisation201Response>("/frequent/authorisation/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FrequentAuthorisation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists frequent payments Full report with all the frequent payments from your Account Id
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page Number (optional)</param>
        /// <param name="recordsPerPage">Limit records per page (Max: 100) (optional, default to 20M)</param>
        /// <param name="expirationTime">Filter by expiration time interval (max 30 days) (optional)</param>
        /// <param name="method">Filter by method (optional)</param>
        /// <param name="customer">Filter by customer key (optional)</param>
        /// <param name="id">Filter by id (optional)</param>
        /// <param name="key">Filter by frequent key (optional)</param>
        /// <param name="createdAt">Filter by created datetime interval (max 30 days) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FrequentGet200Response</returns>
        public FrequentGet200Response FrequentGet(decimal? page = default(decimal?), decimal? recordsPerPage = default(decimal?), string? expirationTime = default(string?), string? method = default(string?), string? customer = default(string?), string? id = default(string?), string? key = default(string?), string? createdAt = default(string?), int operationIndex = 0)
        {
            Easypay.Rest.Client.Client.ApiResponse<FrequentGet200Response> localVarResponse = FrequentGetWithHttpInfo(page, recordsPerPage, expirationTime, method, customer, id, key, createdAt);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lists frequent payments Full report with all the frequent payments from your Account Id
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page Number (optional)</param>
        /// <param name="recordsPerPage">Limit records per page (Max: 100) (optional, default to 20M)</param>
        /// <param name="expirationTime">Filter by expiration time interval (max 30 days) (optional)</param>
        /// <param name="method">Filter by method (optional)</param>
        /// <param name="customer">Filter by customer key (optional)</param>
        /// <param name="id">Filter by id (optional)</param>
        /// <param name="key">Filter by frequent key (optional)</param>
        /// <param name="createdAt">Filter by created datetime interval (max 30 days) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FrequentGet200Response</returns>
        public Easypay.Rest.Client.Client.ApiResponse<FrequentGet200Response> FrequentGetWithHttpInfo(decimal? page = default(decimal?), decimal? recordsPerPage = default(decimal?), string? expirationTime = default(string?), string? method = default(string?), string? customer = default(string?), string? id = default(string?), string? key = default(string?), string? createdAt = default(string?), int operationIndex = 0)
        {
            Easypay.Rest.Client.Client.RequestOptions localVarRequestOptions = new Easypay.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }
            if (expirationTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "expiration_time", expirationTime));
            }
            if (method != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "method", method));
            }
            if (customer != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "customer", customer));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (key != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "key", key));
            }
            if (createdAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "created_at", createdAt));
            }

            localVarRequestOptions.Operation = "FrequentPaymentApi.FrequentGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accountId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccountId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccountId", this.Configuration.GetApiKeyWithPrefix("AccountId"));
            }
            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("ApiKey", this.Configuration.GetApiKeyWithPrefix("ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FrequentGet200Response>("/frequent", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FrequentGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists frequent payments Full report with all the frequent payments from your Account Id
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page Number (optional)</param>
        /// <param name="recordsPerPage">Limit records per page (Max: 100) (optional, default to 20M)</param>
        /// <param name="expirationTime">Filter by expiration time interval (max 30 days) (optional)</param>
        /// <param name="method">Filter by method (optional)</param>
        /// <param name="customer">Filter by customer key (optional)</param>
        /// <param name="id">Filter by id (optional)</param>
        /// <param name="key">Filter by frequent key (optional)</param>
        /// <param name="createdAt">Filter by created datetime interval (max 30 days) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FrequentGet200Response</returns>
        public async System.Threading.Tasks.Task<FrequentGet200Response> FrequentGetAsync(decimal? page = default(decimal?), decimal? recordsPerPage = default(decimal?), string? expirationTime = default(string?), string? method = default(string?), string? customer = default(string?), string? id = default(string?), string? key = default(string?), string? createdAt = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Easypay.Rest.Client.Client.ApiResponse<FrequentGet200Response> localVarResponse = await FrequentGetWithHttpInfoAsync(page, recordsPerPage, expirationTime, method, customer, id, key, createdAt, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lists frequent payments Full report with all the frequent payments from your Account Id
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page Number (optional)</param>
        /// <param name="recordsPerPage">Limit records per page (Max: 100) (optional, default to 20M)</param>
        /// <param name="expirationTime">Filter by expiration time interval (max 30 days) (optional)</param>
        /// <param name="method">Filter by method (optional)</param>
        /// <param name="customer">Filter by customer key (optional)</param>
        /// <param name="id">Filter by id (optional)</param>
        /// <param name="key">Filter by frequent key (optional)</param>
        /// <param name="createdAt">Filter by created datetime interval (max 30 days) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FrequentGet200Response)</returns>
        public async System.Threading.Tasks.Task<Easypay.Rest.Client.Client.ApiResponse<FrequentGet200Response>> FrequentGetWithHttpInfoAsync(decimal? page = default(decimal?), decimal? recordsPerPage = default(decimal?), string? expirationTime = default(string?), string? method = default(string?), string? customer = default(string?), string? id = default(string?), string? key = default(string?), string? createdAt = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Easypay.Rest.Client.Client.RequestOptions localVarRequestOptions = new Easypay.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }
            if (expirationTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "expiration_time", expirationTime));
            }
            if (method != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "method", method));
            }
            if (customer != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "customer", customer));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (key != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "key", key));
            }
            if (createdAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "created_at", createdAt));
            }

            localVarRequestOptions.Operation = "FrequentPaymentApi.FrequentGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accountId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccountId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccountId", this.Configuration.GetApiKeyWithPrefix("AccountId"));
            }
            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("ApiKey", this.Configuration.GetApiKeyWithPrefix("ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FrequentGet200Response>("/frequent", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FrequentGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes frequent payment 3 times a day (10am, 3pm and 10pm) our system will attempt to close your deleted MB payments.&lt;br&gt;All CC and MBW authorisations will be deleted, releasing the funds.&lt;br&gt;All MBW operations waiting for user interaction will be cancelled.&lt;br&gt;Before 6pm all Sepa Direct Debits waiting for file processing will be cancelled.
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void FrequentIdDelete(Guid id, int operationIndex = 0)
        {
            FrequentIdDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes frequent payment 3 times a day (10am, 3pm and 10pm) our system will attempt to close your deleted MB payments.&lt;br&gt;All CC and MBW authorisations will be deleted, releasing the funds.&lt;br&gt;All MBW operations waiting for user interaction will be cancelled.&lt;br&gt;Before 6pm all Sepa Direct Debits waiting for file processing will be cancelled.
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Easypay.Rest.Client.Client.ApiResponse<Object> FrequentIdDeleteWithHttpInfo(Guid id, int operationIndex = 0)
        {
            Easypay.Rest.Client.Client.RequestOptions localVarRequestOptions = new Easypay.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Easypay.Rest.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "FrequentPaymentApi.FrequentIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accountId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccountId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccountId", this.Configuration.GetApiKeyWithPrefix("AccountId"));
            }
            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("ApiKey", this.Configuration.GetApiKeyWithPrefix("ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/frequent/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FrequentIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes frequent payment 3 times a day (10am, 3pm and 10pm) our system will attempt to close your deleted MB payments.&lt;br&gt;All CC and MBW authorisations will be deleted, releasing the funds.&lt;br&gt;All MBW operations waiting for user interaction will be cancelled.&lt;br&gt;Before 6pm all Sepa Direct Debits waiting for file processing will be cancelled.
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FrequentIdDeleteAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await FrequentIdDeleteWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes frequent payment 3 times a day (10am, 3pm and 10pm) our system will attempt to close your deleted MB payments.&lt;br&gt;All CC and MBW authorisations will be deleted, releasing the funds.&lt;br&gt;All MBW operations waiting for user interaction will be cancelled.&lt;br&gt;Before 6pm all Sepa Direct Debits waiting for file processing will be cancelled.
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Easypay.Rest.Client.Client.ApiResponse<Object>> FrequentIdDeleteWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Easypay.Rest.Client.Client.RequestOptions localVarRequestOptions = new Easypay.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Easypay.Rest.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "FrequentPaymentApi.FrequentIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accountId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccountId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccountId", this.Configuration.GetApiKeyWithPrefix("AccountId"));
            }
            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("ApiKey", this.Configuration.GetApiKeyWithPrefix("ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/frequent/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FrequentIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Shows frequent payment details Retrieve a Frequent Payment details
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Frequent</returns>
        public Frequent FrequentIdGet(Guid id, int operationIndex = 0)
        {
            Easypay.Rest.Client.Client.ApiResponse<Frequent> localVarResponse = FrequentIdGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Shows frequent payment details Retrieve a Frequent Payment details
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Frequent</returns>
        public Easypay.Rest.Client.Client.ApiResponse<Frequent> FrequentIdGetWithHttpInfo(Guid id, int operationIndex = 0)
        {
            Easypay.Rest.Client.Client.RequestOptions localVarRequestOptions = new Easypay.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/csv"
            };

            var localVarContentType = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Easypay.Rest.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "FrequentPaymentApi.FrequentIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accountId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccountId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccountId", this.Configuration.GetApiKeyWithPrefix("AccountId"));
            }
            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("ApiKey", this.Configuration.GetApiKeyWithPrefix("ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Frequent>("/frequent/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FrequentIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Shows frequent payment details Retrieve a Frequent Payment details
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Frequent</returns>
        public async System.Threading.Tasks.Task<Frequent> FrequentIdGetAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Easypay.Rest.Client.Client.ApiResponse<Frequent> localVarResponse = await FrequentIdGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Shows frequent payment details Retrieve a Frequent Payment details
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Frequent)</returns>
        public async System.Threading.Tasks.Task<Easypay.Rest.Client.Client.ApiResponse<Frequent>> FrequentIdGetWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Easypay.Rest.Client.Client.RequestOptions localVarRequestOptions = new Easypay.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/csv"
            };

            var localVarContentType = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Easypay.Rest.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "FrequentPaymentApi.FrequentIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accountId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccountId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccountId", this.Configuration.GetApiKeyWithPrefix("AccountId"));
            }
            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("ApiKey", this.Configuration.GetApiKeyWithPrefix("ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Frequent>("/frequent/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FrequentIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates frequent payment details 
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="frequentIdPatchRequest">Frequent Payment object to edit existing one</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FrequentIdPatch200Response</returns>
        public FrequentIdPatch200Response FrequentIdPatch(Guid id, FrequentIdPatchRequest frequentIdPatchRequest, int operationIndex = 0)
        {
            Easypay.Rest.Client.Client.ApiResponse<FrequentIdPatch200Response> localVarResponse = FrequentIdPatchWithHttpInfo(id, frequentIdPatchRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates frequent payment details 
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="frequentIdPatchRequest">Frequent Payment object to edit existing one</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FrequentIdPatch200Response</returns>
        public Easypay.Rest.Client.Client.ApiResponse<FrequentIdPatch200Response> FrequentIdPatchWithHttpInfo(Guid id, FrequentIdPatchRequest frequentIdPatchRequest, int operationIndex = 0)
        {
            // verify the required parameter 'frequentIdPatchRequest' is set
            if (frequentIdPatchRequest == null)
            {
                throw new Easypay.Rest.Client.Client.ApiException(400, "Missing required parameter 'frequentIdPatchRequest' when calling FrequentPaymentApi->FrequentIdPatch");
            }

            Easypay.Rest.Client.Client.RequestOptions localVarRequestOptions = new Easypay.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Easypay.Rest.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = frequentIdPatchRequest;

            localVarRequestOptions.Operation = "FrequentPaymentApi.FrequentIdPatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accountId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccountId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccountId", this.Configuration.GetApiKeyWithPrefix("AccountId"));
            }
            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("ApiKey", this.Configuration.GetApiKeyWithPrefix("ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<FrequentIdPatch200Response>("/frequent/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FrequentIdPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates frequent payment details 
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="frequentIdPatchRequest">Frequent Payment object to edit existing one</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FrequentIdPatch200Response</returns>
        public async System.Threading.Tasks.Task<FrequentIdPatch200Response> FrequentIdPatchAsync(Guid id, FrequentIdPatchRequest frequentIdPatchRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Easypay.Rest.Client.Client.ApiResponse<FrequentIdPatch200Response> localVarResponse = await FrequentIdPatchWithHttpInfoAsync(id, frequentIdPatchRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates frequent payment details 
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="frequentIdPatchRequest">Frequent Payment object to edit existing one</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FrequentIdPatch200Response)</returns>
        public async System.Threading.Tasks.Task<Easypay.Rest.Client.Client.ApiResponse<FrequentIdPatch200Response>> FrequentIdPatchWithHttpInfoAsync(Guid id, FrequentIdPatchRequest frequentIdPatchRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'frequentIdPatchRequest' is set
            if (frequentIdPatchRequest == null)
            {
                throw new Easypay.Rest.Client.Client.ApiException(400, "Missing required parameter 'frequentIdPatchRequest' when calling FrequentPaymentApi->FrequentIdPatch");
            }


            Easypay.Rest.Client.Client.RequestOptions localVarRequestOptions = new Easypay.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Easypay.Rest.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = frequentIdPatchRequest;

            localVarRequestOptions.Operation = "FrequentPaymentApi.FrequentIdPatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accountId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccountId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccountId", this.Configuration.GetApiKeyWithPrefix("AccountId"));
            }
            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("ApiKey", this.Configuration.GetApiKeyWithPrefix("ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<FrequentIdPatch200Response>("/frequent/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FrequentIdPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create frequent payment Frequent payments are repeatable transactions of varying sums without the client having to enter their payment details again.  It is possible to limit the transferred sums by choosing minimum or maximum values, either to the total sum of the transactions or each individual transaction.  Supported methods for frequent payments are: &lt;i style&#x3D;\&quot;color:red\&quot;&gt;Credit Card, MB WAY, Multibanco, Direct Debit&lt;/i&gt; and &lt;i style&#x3D;\&quot;color:red\&quot;&gt;Virtual IBAN&lt;/i&gt; 
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="frequentPostRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FrequentPost201Response</returns>
        public FrequentPost201Response FrequentPost(FrequentPostRequest? frequentPostRequest = default(FrequentPostRequest?), int operationIndex = 0)
        {
            Easypay.Rest.Client.Client.ApiResponse<FrequentPost201Response> localVarResponse = FrequentPostWithHttpInfo(frequentPostRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create frequent payment Frequent payments are repeatable transactions of varying sums without the client having to enter their payment details again.  It is possible to limit the transferred sums by choosing minimum or maximum values, either to the total sum of the transactions or each individual transaction.  Supported methods for frequent payments are: &lt;i style&#x3D;\&quot;color:red\&quot;&gt;Credit Card, MB WAY, Multibanco, Direct Debit&lt;/i&gt; and &lt;i style&#x3D;\&quot;color:red\&quot;&gt;Virtual IBAN&lt;/i&gt; 
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="frequentPostRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FrequentPost201Response</returns>
        public Easypay.Rest.Client.Client.ApiResponse<FrequentPost201Response> FrequentPostWithHttpInfo(FrequentPostRequest? frequentPostRequest = default(FrequentPostRequest?), int operationIndex = 0)
        {
            Easypay.Rest.Client.Client.RequestOptions localVarRequestOptions = new Easypay.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = frequentPostRequest;

            localVarRequestOptions.Operation = "FrequentPaymentApi.FrequentPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accountId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccountId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccountId", this.Configuration.GetApiKeyWithPrefix("AccountId"));
            }
            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("ApiKey", this.Configuration.GetApiKeyWithPrefix("ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<FrequentPost201Response>("/frequent", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FrequentPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create frequent payment Frequent payments are repeatable transactions of varying sums without the client having to enter their payment details again.  It is possible to limit the transferred sums by choosing minimum or maximum values, either to the total sum of the transactions or each individual transaction.  Supported methods for frequent payments are: &lt;i style&#x3D;\&quot;color:red\&quot;&gt;Credit Card, MB WAY, Multibanco, Direct Debit&lt;/i&gt; and &lt;i style&#x3D;\&quot;color:red\&quot;&gt;Virtual IBAN&lt;/i&gt; 
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="frequentPostRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FrequentPost201Response</returns>
        public async System.Threading.Tasks.Task<FrequentPost201Response> FrequentPostAsync(FrequentPostRequest? frequentPostRequest = default(FrequentPostRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Easypay.Rest.Client.Client.ApiResponse<FrequentPost201Response> localVarResponse = await FrequentPostWithHttpInfoAsync(frequentPostRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create frequent payment Frequent payments are repeatable transactions of varying sums without the client having to enter their payment details again.  It is possible to limit the transferred sums by choosing minimum or maximum values, either to the total sum of the transactions or each individual transaction.  Supported methods for frequent payments are: &lt;i style&#x3D;\&quot;color:red\&quot;&gt;Credit Card, MB WAY, Multibanco, Direct Debit&lt;/i&gt; and &lt;i style&#x3D;\&quot;color:red\&quot;&gt;Virtual IBAN&lt;/i&gt; 
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="frequentPostRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FrequentPost201Response)</returns>
        public async System.Threading.Tasks.Task<Easypay.Rest.Client.Client.ApiResponse<FrequentPost201Response>> FrequentPostWithHttpInfoAsync(FrequentPostRequest? frequentPostRequest = default(FrequentPostRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Easypay.Rest.Client.Client.RequestOptions localVarRequestOptions = new Easypay.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = frequentPostRequest;

            localVarRequestOptions.Operation = "FrequentPaymentApi.FrequentPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accountId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccountId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccountId", this.Configuration.GetApiKeyWithPrefix("AccountId"));
            }
            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("ApiKey", this.Configuration.GetApiKeyWithPrefix("ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<FrequentPost201Response>("/frequent", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FrequentPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
