/*
 * Easypay Payments API
 *
 * <a href='https://www.easypay.pt/en/legal-terms-and-conditions/' class='item'>Terms conditions and legal terms</a><br><a href='https://www.easypay.pt/en/privacy-and-data-protection-policy/' class='item'>Privacy Policy</a>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: tec@easypay.pt
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Easypay.Rest.Client.Client;
using Easypay.Rest.Client.Model;

namespace Easypay.Rest.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISinglePaymentApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes single payment
        /// </summary>
        /// <remarks>
        /// This endpoint allows for the deletion of a single payment identified by its unique ID. The DELETE operation performs the following actions based on the payment method:    - MBWay and Credit Cards: Voids all authorizations.   - Multibanco: Cancels the Multibanco Reference.   - Direct Debit: Cancels the Direct Debit if the request is made before the cutoff hour(18:00 Europe/Lisbon).  This operation ensures that all associated authorizations and references are properly handled and terminated according to the specified payment method.
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void SingleDelete(Guid id, int operationIndex = 0);

        /// <summary>
        /// Deletes single payment
        /// </summary>
        /// <remarks>
        /// This endpoint allows for the deletion of a single payment identified by its unique ID. The DELETE operation performs the following actions based on the payment method:    - MBWay and Credit Cards: Voids all authorizations.   - Multibanco: Cancels the Multibanco Reference.   - Direct Debit: Cancels the Direct Debit if the request is made before the cutoff hour(18:00 Europe/Lisbon).  This operation ensures that all associated authorizations and references are properly handled and terminated according to the specified payment method.
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SingleDeleteWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// Lists single payments
        /// </summary>
        /// <remarks>
        /// Full report with all the single payments from your Account
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Specifies the page number of the results to retrieve. This parameter is used for paginating through a collection of records, allowing the client to navigate to different pages of the dataset. The value must be a positive integer (e.g., \&quot;1\&quot; for the first page). (optional, default to 1)</param>
        /// <param name="recordsPerPage">Specifies the number of records to retrieve per page. This parameter is used for controlling the size of each page in a paginated collection of records. The value must be a positive integer, determining how many records are displayed on each page (e.g., \&quot;20\&quot; for 20 records per page). (optional, default to 20)</param>
        /// <param name="type">Filter by type of financial operation being performed. Possible values are \&quot;Sale\&quot; (a complete transaction where funds are immediately captured) or \&quot;Authorisation\&quot; (a temporary hold on funds pending a future capture). (optional)</param>
        /// <param name="expirationTime">Filter records by expiration datetime interval. Format: interval(YYYY-MM-DD HH:MM,YYYY-MM-DD HH:MM) (optional)</param>
        /// <param name="method">Filter by payment method used in the transaction. (optional)</param>
        /// <param name="customer">A user-defined identifier used to filter the customers. This parameter allows the client to specify a key to retrieve records or transactions that match the provided key. The value is a string and may not be unique, as it is determined by the user. (optional)</param>
        /// <param name="id">Filter by the unique identifier for the resource. Typically formatted as a UUID (Universally Unique Identifier). (optional)</param>
        /// <param name="key">A user-defined identifier used to filter the results. This parameter allows the client to specify a key to retrieve records or transactions that match the provided key. The value is a string and may not be unique, as it is determined by the user. (optional)</param>
        /// <param name="value">Filter records by the exact transaction amount. (optional)</param>
        /// <param name="createdAt">Filter records by creation datetime interval. Maximum range of 30 days. Format: interval(YYYY-MM-DD HH:MM,YYYY-MM-DD HH:MM) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InlineObject8</returns>
        InlineObject8 SingleGet(int? page = default(int?), int? recordsPerPage = default(int?), string? type = default(string?), string? expirationTime = default(string?), string? method = default(string?), string? customer = default(string?), Guid? id = default(Guid?), string? key = default(string?), double? value = default(double?), string? createdAt = default(string?), int operationIndex = 0);

        /// <summary>
        /// Lists single payments
        /// </summary>
        /// <remarks>
        /// Full report with all the single payments from your Account
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Specifies the page number of the results to retrieve. This parameter is used for paginating through a collection of records, allowing the client to navigate to different pages of the dataset. The value must be a positive integer (e.g., \&quot;1\&quot; for the first page). (optional, default to 1)</param>
        /// <param name="recordsPerPage">Specifies the number of records to retrieve per page. This parameter is used for controlling the size of each page in a paginated collection of records. The value must be a positive integer, determining how many records are displayed on each page (e.g., \&quot;20\&quot; for 20 records per page). (optional, default to 20)</param>
        /// <param name="type">Filter by type of financial operation being performed. Possible values are \&quot;Sale\&quot; (a complete transaction where funds are immediately captured) or \&quot;Authorisation\&quot; (a temporary hold on funds pending a future capture). (optional)</param>
        /// <param name="expirationTime">Filter records by expiration datetime interval. Format: interval(YYYY-MM-DD HH:MM,YYYY-MM-DD HH:MM) (optional)</param>
        /// <param name="method">Filter by payment method used in the transaction. (optional)</param>
        /// <param name="customer">A user-defined identifier used to filter the customers. This parameter allows the client to specify a key to retrieve records or transactions that match the provided key. The value is a string and may not be unique, as it is determined by the user. (optional)</param>
        /// <param name="id">Filter by the unique identifier for the resource. Typically formatted as a UUID (Universally Unique Identifier). (optional)</param>
        /// <param name="key">A user-defined identifier used to filter the results. This parameter allows the client to specify a key to retrieve records or transactions that match the provided key. The value is a string and may not be unique, as it is determined by the user. (optional)</param>
        /// <param name="value">Filter records by the exact transaction amount. (optional)</param>
        /// <param name="createdAt">Filter records by creation datetime interval. Maximum range of 30 days. Format: interval(YYYY-MM-DD HH:MM,YYYY-MM-DD HH:MM) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InlineObject8</returns>
        ApiResponse<InlineObject8> SingleGetWithHttpInfo(int? page = default(int?), int? recordsPerPage = default(int?), string? type = default(string?), string? expirationTime = default(string?), string? method = default(string?), string? customer = default(string?), Guid? id = default(Guid?), string? key = default(string?), double? value = default(double?), string? createdAt = default(string?), int operationIndex = 0);
        /// <summary>
        /// Shows single payment details
        /// </summary>
        /// <remarks>
        /// Retrive a single payment details
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InlineObject9</returns>
        InlineObject9 SingleIdGet(Guid id, int operationIndex = 0);

        /// <summary>
        /// Shows single payment details
        /// </summary>
        /// <remarks>
        /// Retrive a single payment details
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InlineObject9</returns>
        ApiResponse<InlineObject9> SingleIdGetWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// Create single payment
        /// </summary>
        /// <remarks>
        /// Creates a Single Payment
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="singlePostRequest">Configuration object to generate a single payment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InlineObject5</returns>
        InlineObject5 SinglePost(SinglePostRequest singlePostRequest, int operationIndex = 0);

        /// <summary>
        /// Create single payment
        /// </summary>
        /// <remarks>
        /// Creates a Single Payment
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="singlePostRequest">Configuration object to generate a single payment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InlineObject5</returns>
        ApiResponse<InlineObject5> SinglePostWithHttpInfo(SinglePostRequest singlePostRequest, int operationIndex = 0);
        /// <summary>
        /// Update a single Payment
        /// </summary>
        /// <remarks>
        /// Apply partial modifications to a single payment resource.
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="singleUpdateRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InlineObject10</returns>
        InlineObject10 SingleUpdate(Guid id, SingleUpdateRequest? singleUpdateRequest = default(SingleUpdateRequest?), int operationIndex = 0);

        /// <summary>
        /// Update a single Payment
        /// </summary>
        /// <remarks>
        /// Apply partial modifications to a single payment resource.
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="singleUpdateRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InlineObject10</returns>
        ApiResponse<InlineObject10> SingleUpdateWithHttpInfo(Guid id, SingleUpdateRequest? singleUpdateRequest = default(SingleUpdateRequest?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISinglePaymentApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Deletes single payment
        /// </summary>
        /// <remarks>
        /// This endpoint allows for the deletion of a single payment identified by its unique ID. The DELETE operation performs the following actions based on the payment method:    - MBWay and Credit Cards: Voids all authorizations.   - Multibanco: Cancels the Multibanco Reference.   - Direct Debit: Cancels the Direct Debit if the request is made before the cutoff hour(18:00 Europe/Lisbon).  This operation ensures that all associated authorizations and references are properly handled and terminated according to the specified payment method.
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SingleDeleteAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Deletes single payment
        /// </summary>
        /// <remarks>
        /// This endpoint allows for the deletion of a single payment identified by its unique ID. The DELETE operation performs the following actions based on the payment method:    - MBWay and Credit Cards: Voids all authorizations.   - Multibanco: Cancels the Multibanco Reference.   - Direct Debit: Cancels the Direct Debit if the request is made before the cutoff hour(18:00 Europe/Lisbon).  This operation ensures that all associated authorizations and references are properly handled and terminated according to the specified payment method.
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SingleDeleteWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Lists single payments
        /// </summary>
        /// <remarks>
        /// Full report with all the single payments from your Account
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Specifies the page number of the results to retrieve. This parameter is used for paginating through a collection of records, allowing the client to navigate to different pages of the dataset. The value must be a positive integer (e.g., \&quot;1\&quot; for the first page). (optional, default to 1)</param>
        /// <param name="recordsPerPage">Specifies the number of records to retrieve per page. This parameter is used for controlling the size of each page in a paginated collection of records. The value must be a positive integer, determining how many records are displayed on each page (e.g., \&quot;20\&quot; for 20 records per page). (optional, default to 20)</param>
        /// <param name="type">Filter by type of financial operation being performed. Possible values are \&quot;Sale\&quot; (a complete transaction where funds are immediately captured) or \&quot;Authorisation\&quot; (a temporary hold on funds pending a future capture). (optional)</param>
        /// <param name="expirationTime">Filter records by expiration datetime interval. Format: interval(YYYY-MM-DD HH:MM,YYYY-MM-DD HH:MM) (optional)</param>
        /// <param name="method">Filter by payment method used in the transaction. (optional)</param>
        /// <param name="customer">A user-defined identifier used to filter the customers. This parameter allows the client to specify a key to retrieve records or transactions that match the provided key. The value is a string and may not be unique, as it is determined by the user. (optional)</param>
        /// <param name="id">Filter by the unique identifier for the resource. Typically formatted as a UUID (Universally Unique Identifier). (optional)</param>
        /// <param name="key">A user-defined identifier used to filter the results. This parameter allows the client to specify a key to retrieve records or transactions that match the provided key. The value is a string and may not be unique, as it is determined by the user. (optional)</param>
        /// <param name="value">Filter records by the exact transaction amount. (optional)</param>
        /// <param name="createdAt">Filter records by creation datetime interval. Maximum range of 30 days. Format: interval(YYYY-MM-DD HH:MM,YYYY-MM-DD HH:MM) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineObject8</returns>
        System.Threading.Tasks.Task<InlineObject8> SingleGetAsync(int? page = default(int?), int? recordsPerPage = default(int?), string? type = default(string?), string? expirationTime = default(string?), string? method = default(string?), string? customer = default(string?), Guid? id = default(Guid?), string? key = default(string?), double? value = default(double?), string? createdAt = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Lists single payments
        /// </summary>
        /// <remarks>
        /// Full report with all the single payments from your Account
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Specifies the page number of the results to retrieve. This parameter is used for paginating through a collection of records, allowing the client to navigate to different pages of the dataset. The value must be a positive integer (e.g., \&quot;1\&quot; for the first page). (optional, default to 1)</param>
        /// <param name="recordsPerPage">Specifies the number of records to retrieve per page. This parameter is used for controlling the size of each page in a paginated collection of records. The value must be a positive integer, determining how many records are displayed on each page (e.g., \&quot;20\&quot; for 20 records per page). (optional, default to 20)</param>
        /// <param name="type">Filter by type of financial operation being performed. Possible values are \&quot;Sale\&quot; (a complete transaction where funds are immediately captured) or \&quot;Authorisation\&quot; (a temporary hold on funds pending a future capture). (optional)</param>
        /// <param name="expirationTime">Filter records by expiration datetime interval. Format: interval(YYYY-MM-DD HH:MM,YYYY-MM-DD HH:MM) (optional)</param>
        /// <param name="method">Filter by payment method used in the transaction. (optional)</param>
        /// <param name="customer">A user-defined identifier used to filter the customers. This parameter allows the client to specify a key to retrieve records or transactions that match the provided key. The value is a string and may not be unique, as it is determined by the user. (optional)</param>
        /// <param name="id">Filter by the unique identifier for the resource. Typically formatted as a UUID (Universally Unique Identifier). (optional)</param>
        /// <param name="key">A user-defined identifier used to filter the results. This parameter allows the client to specify a key to retrieve records or transactions that match the provided key. The value is a string and may not be unique, as it is determined by the user. (optional)</param>
        /// <param name="value">Filter records by the exact transaction amount. (optional)</param>
        /// <param name="createdAt">Filter records by creation datetime interval. Maximum range of 30 days. Format: interval(YYYY-MM-DD HH:MM,YYYY-MM-DD HH:MM) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineObject8)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineObject8>> SingleGetWithHttpInfoAsync(int? page = default(int?), int? recordsPerPage = default(int?), string? type = default(string?), string? expirationTime = default(string?), string? method = default(string?), string? customer = default(string?), Guid? id = default(Guid?), string? key = default(string?), double? value = default(double?), string? createdAt = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Shows single payment details
        /// </summary>
        /// <remarks>
        /// Retrive a single payment details
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineObject9</returns>
        System.Threading.Tasks.Task<InlineObject9> SingleIdGetAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Shows single payment details
        /// </summary>
        /// <remarks>
        /// Retrive a single payment details
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineObject9)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineObject9>> SingleIdGetWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create single payment
        /// </summary>
        /// <remarks>
        /// Creates a Single Payment
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="singlePostRequest">Configuration object to generate a single payment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineObject5</returns>
        System.Threading.Tasks.Task<InlineObject5> SinglePostAsync(SinglePostRequest singlePostRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create single payment
        /// </summary>
        /// <remarks>
        /// Creates a Single Payment
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="singlePostRequest">Configuration object to generate a single payment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineObject5)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineObject5>> SinglePostWithHttpInfoAsync(SinglePostRequest singlePostRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update a single Payment
        /// </summary>
        /// <remarks>
        /// Apply partial modifications to a single payment resource.
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="singleUpdateRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineObject10</returns>
        System.Threading.Tasks.Task<InlineObject10> SingleUpdateAsync(Guid id, SingleUpdateRequest? singleUpdateRequest = default(SingleUpdateRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update a single Payment
        /// </summary>
        /// <remarks>
        /// Apply partial modifications to a single payment resource.
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="singleUpdateRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineObject10)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineObject10>> SingleUpdateWithHttpInfoAsync(Guid id, SingleUpdateRequest? singleUpdateRequest = default(SingleUpdateRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISinglePaymentApi : ISinglePaymentApiSync, ISinglePaymentApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SinglePaymentApi : ISinglePaymentApi
    {
        private Easypay.Rest.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SinglePaymentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SinglePaymentApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SinglePaymentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SinglePaymentApi(string basePath)
        {
            this.Configuration = Easypay.Rest.Client.Client.Configuration.MergeConfigurations(
                Easypay.Rest.Client.Client.GlobalConfiguration.Instance,
                new Easypay.Rest.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Easypay.Rest.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Easypay.Rest.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Easypay.Rest.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SinglePaymentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SinglePaymentApi(Easypay.Rest.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Easypay.Rest.Client.Client.Configuration.MergeConfigurations(
                Easypay.Rest.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Easypay.Rest.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Easypay.Rest.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Easypay.Rest.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SinglePaymentApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SinglePaymentApi(Easypay.Rest.Client.Client.ISynchronousClient client, Easypay.Rest.Client.Client.IAsynchronousClient asyncClient, Easypay.Rest.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Easypay.Rest.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Easypay.Rest.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Easypay.Rest.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Easypay.Rest.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Easypay.Rest.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Deletes single payment This endpoint allows for the deletion of a single payment identified by its unique ID. The DELETE operation performs the following actions based on the payment method:    - MBWay and Credit Cards: Voids all authorizations.   - Multibanco: Cancels the Multibanco Reference.   - Direct Debit: Cancels the Direct Debit if the request is made before the cutoff hour(18:00 Europe/Lisbon).  This operation ensures that all associated authorizations and references are properly handled and terminated according to the specified payment method.
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void SingleDelete(Guid id, int operationIndex = 0)
        {
            SingleDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes single payment This endpoint allows for the deletion of a single payment identified by its unique ID. The DELETE operation performs the following actions based on the payment method:    - MBWay and Credit Cards: Voids all authorizations.   - Multibanco: Cancels the Multibanco Reference.   - Direct Debit: Cancels the Direct Debit if the request is made before the cutoff hour(18:00 Europe/Lisbon).  This operation ensures that all associated authorizations and references are properly handled and terminated according to the specified payment method.
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Easypay.Rest.Client.Client.ApiResponse<Object> SingleDeleteWithHttpInfo(Guid id, int operationIndex = 0)
        {
            Easypay.Rest.Client.Client.RequestOptions localVarRequestOptions = new Easypay.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Easypay.Rest.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "SinglePaymentApi.SingleDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accountId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccountId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccountId", this.Configuration.GetApiKeyWithPrefix("AccountId"));
            }
            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("ApiKey", this.Configuration.GetApiKeyWithPrefix("ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/single/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SingleDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes single payment This endpoint allows for the deletion of a single payment identified by its unique ID. The DELETE operation performs the following actions based on the payment method:    - MBWay and Credit Cards: Voids all authorizations.   - Multibanco: Cancels the Multibanco Reference.   - Direct Debit: Cancels the Direct Debit if the request is made before the cutoff hour(18:00 Europe/Lisbon).  This operation ensures that all associated authorizations and references are properly handled and terminated according to the specified payment method.
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SingleDeleteAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await SingleDeleteWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes single payment This endpoint allows for the deletion of a single payment identified by its unique ID. The DELETE operation performs the following actions based on the payment method:    - MBWay and Credit Cards: Voids all authorizations.   - Multibanco: Cancels the Multibanco Reference.   - Direct Debit: Cancels the Direct Debit if the request is made before the cutoff hour(18:00 Europe/Lisbon).  This operation ensures that all associated authorizations and references are properly handled and terminated according to the specified payment method.
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Easypay.Rest.Client.Client.ApiResponse<Object>> SingleDeleteWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Easypay.Rest.Client.Client.RequestOptions localVarRequestOptions = new Easypay.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Easypay.Rest.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "SinglePaymentApi.SingleDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accountId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccountId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccountId", this.Configuration.GetApiKeyWithPrefix("AccountId"));
            }
            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("ApiKey", this.Configuration.GetApiKeyWithPrefix("ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/single/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SingleDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists single payments Full report with all the single payments from your Account
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Specifies the page number of the results to retrieve. This parameter is used for paginating through a collection of records, allowing the client to navigate to different pages of the dataset. The value must be a positive integer (e.g., \&quot;1\&quot; for the first page). (optional, default to 1)</param>
        /// <param name="recordsPerPage">Specifies the number of records to retrieve per page. This parameter is used for controlling the size of each page in a paginated collection of records. The value must be a positive integer, determining how many records are displayed on each page (e.g., \&quot;20\&quot; for 20 records per page). (optional, default to 20)</param>
        /// <param name="type">Filter by type of financial operation being performed. Possible values are \&quot;Sale\&quot; (a complete transaction where funds are immediately captured) or \&quot;Authorisation\&quot; (a temporary hold on funds pending a future capture). (optional)</param>
        /// <param name="expirationTime">Filter records by expiration datetime interval. Format: interval(YYYY-MM-DD HH:MM,YYYY-MM-DD HH:MM) (optional)</param>
        /// <param name="method">Filter by payment method used in the transaction. (optional)</param>
        /// <param name="customer">A user-defined identifier used to filter the customers. This parameter allows the client to specify a key to retrieve records or transactions that match the provided key. The value is a string and may not be unique, as it is determined by the user. (optional)</param>
        /// <param name="id">Filter by the unique identifier for the resource. Typically formatted as a UUID (Universally Unique Identifier). (optional)</param>
        /// <param name="key">A user-defined identifier used to filter the results. This parameter allows the client to specify a key to retrieve records or transactions that match the provided key. The value is a string and may not be unique, as it is determined by the user. (optional)</param>
        /// <param name="value">Filter records by the exact transaction amount. (optional)</param>
        /// <param name="createdAt">Filter records by creation datetime interval. Maximum range of 30 days. Format: interval(YYYY-MM-DD HH:MM,YYYY-MM-DD HH:MM) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InlineObject8</returns>
        public InlineObject8 SingleGet(int? page = default(int?), int? recordsPerPage = default(int?), string? type = default(string?), string? expirationTime = default(string?), string? method = default(string?), string? customer = default(string?), Guid? id = default(Guid?), string? key = default(string?), double? value = default(double?), string? createdAt = default(string?), int operationIndex = 0)
        {
            Easypay.Rest.Client.Client.ApiResponse<InlineObject8> localVarResponse = SingleGetWithHttpInfo(page, recordsPerPage, type, expirationTime, method, customer, id, key, value, createdAt);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lists single payments Full report with all the single payments from your Account
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Specifies the page number of the results to retrieve. This parameter is used for paginating through a collection of records, allowing the client to navigate to different pages of the dataset. The value must be a positive integer (e.g., \&quot;1\&quot; for the first page). (optional, default to 1)</param>
        /// <param name="recordsPerPage">Specifies the number of records to retrieve per page. This parameter is used for controlling the size of each page in a paginated collection of records. The value must be a positive integer, determining how many records are displayed on each page (e.g., \&quot;20\&quot; for 20 records per page). (optional, default to 20)</param>
        /// <param name="type">Filter by type of financial operation being performed. Possible values are \&quot;Sale\&quot; (a complete transaction where funds are immediately captured) or \&quot;Authorisation\&quot; (a temporary hold on funds pending a future capture). (optional)</param>
        /// <param name="expirationTime">Filter records by expiration datetime interval. Format: interval(YYYY-MM-DD HH:MM,YYYY-MM-DD HH:MM) (optional)</param>
        /// <param name="method">Filter by payment method used in the transaction. (optional)</param>
        /// <param name="customer">A user-defined identifier used to filter the customers. This parameter allows the client to specify a key to retrieve records or transactions that match the provided key. The value is a string and may not be unique, as it is determined by the user. (optional)</param>
        /// <param name="id">Filter by the unique identifier for the resource. Typically formatted as a UUID (Universally Unique Identifier). (optional)</param>
        /// <param name="key">A user-defined identifier used to filter the results. This parameter allows the client to specify a key to retrieve records or transactions that match the provided key. The value is a string and may not be unique, as it is determined by the user. (optional)</param>
        /// <param name="value">Filter records by the exact transaction amount. (optional)</param>
        /// <param name="createdAt">Filter records by creation datetime interval. Maximum range of 30 days. Format: interval(YYYY-MM-DD HH:MM,YYYY-MM-DD HH:MM) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InlineObject8</returns>
        public Easypay.Rest.Client.Client.ApiResponse<InlineObject8> SingleGetWithHttpInfo(int? page = default(int?), int? recordsPerPage = default(int?), string? type = default(string?), string? expirationTime = default(string?), string? method = default(string?), string? customer = default(string?), Guid? id = default(Guid?), string? key = default(string?), double? value = default(double?), string? createdAt = default(string?), int operationIndex = 0)
        {
            Easypay.Rest.Client.Client.RequestOptions localVarRequestOptions = new Easypay.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (expirationTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "expiration_time", expirationTime));
            }
            if (method != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "method", method));
            }
            if (customer != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "customer", customer));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (key != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "key", key));
            }
            if (value != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "value", value));
            }
            if (createdAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "created_at", createdAt));
            }

            localVarRequestOptions.Operation = "SinglePaymentApi.SingleGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accountId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccountId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccountId", this.Configuration.GetApiKeyWithPrefix("AccountId"));
            }
            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("ApiKey", this.Configuration.GetApiKeyWithPrefix("ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineObject8>("/single", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SingleGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists single payments Full report with all the single payments from your Account
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Specifies the page number of the results to retrieve. This parameter is used for paginating through a collection of records, allowing the client to navigate to different pages of the dataset. The value must be a positive integer (e.g., \&quot;1\&quot; for the first page). (optional, default to 1)</param>
        /// <param name="recordsPerPage">Specifies the number of records to retrieve per page. This parameter is used for controlling the size of each page in a paginated collection of records. The value must be a positive integer, determining how many records are displayed on each page (e.g., \&quot;20\&quot; for 20 records per page). (optional, default to 20)</param>
        /// <param name="type">Filter by type of financial operation being performed. Possible values are \&quot;Sale\&quot; (a complete transaction where funds are immediately captured) or \&quot;Authorisation\&quot; (a temporary hold on funds pending a future capture). (optional)</param>
        /// <param name="expirationTime">Filter records by expiration datetime interval. Format: interval(YYYY-MM-DD HH:MM,YYYY-MM-DD HH:MM) (optional)</param>
        /// <param name="method">Filter by payment method used in the transaction. (optional)</param>
        /// <param name="customer">A user-defined identifier used to filter the customers. This parameter allows the client to specify a key to retrieve records or transactions that match the provided key. The value is a string and may not be unique, as it is determined by the user. (optional)</param>
        /// <param name="id">Filter by the unique identifier for the resource. Typically formatted as a UUID (Universally Unique Identifier). (optional)</param>
        /// <param name="key">A user-defined identifier used to filter the results. This parameter allows the client to specify a key to retrieve records or transactions that match the provided key. The value is a string and may not be unique, as it is determined by the user. (optional)</param>
        /// <param name="value">Filter records by the exact transaction amount. (optional)</param>
        /// <param name="createdAt">Filter records by creation datetime interval. Maximum range of 30 days. Format: interval(YYYY-MM-DD HH:MM,YYYY-MM-DD HH:MM) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineObject8</returns>
        public async System.Threading.Tasks.Task<InlineObject8> SingleGetAsync(int? page = default(int?), int? recordsPerPage = default(int?), string? type = default(string?), string? expirationTime = default(string?), string? method = default(string?), string? customer = default(string?), Guid? id = default(Guid?), string? key = default(string?), double? value = default(double?), string? createdAt = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Easypay.Rest.Client.Client.ApiResponse<InlineObject8> localVarResponse = await SingleGetWithHttpInfoAsync(page, recordsPerPage, type, expirationTime, method, customer, id, key, value, createdAt, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lists single payments Full report with all the single payments from your Account
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Specifies the page number of the results to retrieve. This parameter is used for paginating through a collection of records, allowing the client to navigate to different pages of the dataset. The value must be a positive integer (e.g., \&quot;1\&quot; for the first page). (optional, default to 1)</param>
        /// <param name="recordsPerPage">Specifies the number of records to retrieve per page. This parameter is used for controlling the size of each page in a paginated collection of records. The value must be a positive integer, determining how many records are displayed on each page (e.g., \&quot;20\&quot; for 20 records per page). (optional, default to 20)</param>
        /// <param name="type">Filter by type of financial operation being performed. Possible values are \&quot;Sale\&quot; (a complete transaction where funds are immediately captured) or \&quot;Authorisation\&quot; (a temporary hold on funds pending a future capture). (optional)</param>
        /// <param name="expirationTime">Filter records by expiration datetime interval. Format: interval(YYYY-MM-DD HH:MM,YYYY-MM-DD HH:MM) (optional)</param>
        /// <param name="method">Filter by payment method used in the transaction. (optional)</param>
        /// <param name="customer">A user-defined identifier used to filter the customers. This parameter allows the client to specify a key to retrieve records or transactions that match the provided key. The value is a string and may not be unique, as it is determined by the user. (optional)</param>
        /// <param name="id">Filter by the unique identifier for the resource. Typically formatted as a UUID (Universally Unique Identifier). (optional)</param>
        /// <param name="key">A user-defined identifier used to filter the results. This parameter allows the client to specify a key to retrieve records or transactions that match the provided key. The value is a string and may not be unique, as it is determined by the user. (optional)</param>
        /// <param name="value">Filter records by the exact transaction amount. (optional)</param>
        /// <param name="createdAt">Filter records by creation datetime interval. Maximum range of 30 days. Format: interval(YYYY-MM-DD HH:MM,YYYY-MM-DD HH:MM) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineObject8)</returns>
        public async System.Threading.Tasks.Task<Easypay.Rest.Client.Client.ApiResponse<InlineObject8>> SingleGetWithHttpInfoAsync(int? page = default(int?), int? recordsPerPage = default(int?), string? type = default(string?), string? expirationTime = default(string?), string? method = default(string?), string? customer = default(string?), Guid? id = default(Guid?), string? key = default(string?), double? value = default(double?), string? createdAt = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Easypay.Rest.Client.Client.RequestOptions localVarRequestOptions = new Easypay.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (expirationTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "expiration_time", expirationTime));
            }
            if (method != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "method", method));
            }
            if (customer != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "customer", customer));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (key != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "key", key));
            }
            if (value != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "value", value));
            }
            if (createdAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "created_at", createdAt));
            }

            localVarRequestOptions.Operation = "SinglePaymentApi.SingleGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accountId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccountId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccountId", this.Configuration.GetApiKeyWithPrefix("AccountId"));
            }
            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("ApiKey", this.Configuration.GetApiKeyWithPrefix("ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineObject8>("/single", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SingleGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Shows single payment details Retrive a single payment details
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InlineObject9</returns>
        public InlineObject9 SingleIdGet(Guid id, int operationIndex = 0)
        {
            Easypay.Rest.Client.Client.ApiResponse<InlineObject9> localVarResponse = SingleIdGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Shows single payment details Retrive a single payment details
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InlineObject9</returns>
        public Easypay.Rest.Client.Client.ApiResponse<InlineObject9> SingleIdGetWithHttpInfo(Guid id, int operationIndex = 0)
        {
            Easypay.Rest.Client.Client.RequestOptions localVarRequestOptions = new Easypay.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Easypay.Rest.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "SinglePaymentApi.SingleIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accountId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccountId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccountId", this.Configuration.GetApiKeyWithPrefix("AccountId"));
            }
            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("ApiKey", this.Configuration.GetApiKeyWithPrefix("ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineObject9>("/single/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SingleIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Shows single payment details Retrive a single payment details
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineObject9</returns>
        public async System.Threading.Tasks.Task<InlineObject9> SingleIdGetAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Easypay.Rest.Client.Client.ApiResponse<InlineObject9> localVarResponse = await SingleIdGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Shows single payment details Retrive a single payment details
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineObject9)</returns>
        public async System.Threading.Tasks.Task<Easypay.Rest.Client.Client.ApiResponse<InlineObject9>> SingleIdGetWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Easypay.Rest.Client.Client.RequestOptions localVarRequestOptions = new Easypay.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Easypay.Rest.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "SinglePaymentApi.SingleIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accountId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccountId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccountId", this.Configuration.GetApiKeyWithPrefix("AccountId"));
            }
            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("ApiKey", this.Configuration.GetApiKeyWithPrefix("ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineObject9>("/single/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SingleIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create single payment Creates a Single Payment
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="singlePostRequest">Configuration object to generate a single payment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InlineObject5</returns>
        public InlineObject5 SinglePost(SinglePostRequest singlePostRequest, int operationIndex = 0)
        {
            Easypay.Rest.Client.Client.ApiResponse<InlineObject5> localVarResponse = SinglePostWithHttpInfo(singlePostRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create single payment Creates a Single Payment
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="singlePostRequest">Configuration object to generate a single payment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InlineObject5</returns>
        public Easypay.Rest.Client.Client.ApiResponse<InlineObject5> SinglePostWithHttpInfo(SinglePostRequest singlePostRequest, int operationIndex = 0)
        {
            // verify the required parameter 'singlePostRequest' is set
            if (singlePostRequest == null)
            {
                throw new Easypay.Rest.Client.Client.ApiException(400, "Missing required parameter 'singlePostRequest' when calling SinglePaymentApi->SinglePost");
            }

            Easypay.Rest.Client.Client.RequestOptions localVarRequestOptions = new Easypay.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = singlePostRequest;

            localVarRequestOptions.Operation = "SinglePaymentApi.SinglePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accountId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccountId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccountId", this.Configuration.GetApiKeyWithPrefix("AccountId"));
            }
            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("ApiKey", this.Configuration.GetApiKeyWithPrefix("ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InlineObject5>("/single", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SinglePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create single payment Creates a Single Payment
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="singlePostRequest">Configuration object to generate a single payment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineObject5</returns>
        public async System.Threading.Tasks.Task<InlineObject5> SinglePostAsync(SinglePostRequest singlePostRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Easypay.Rest.Client.Client.ApiResponse<InlineObject5> localVarResponse = await SinglePostWithHttpInfoAsync(singlePostRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create single payment Creates a Single Payment
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="singlePostRequest">Configuration object to generate a single payment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineObject5)</returns>
        public async System.Threading.Tasks.Task<Easypay.Rest.Client.Client.ApiResponse<InlineObject5>> SinglePostWithHttpInfoAsync(SinglePostRequest singlePostRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'singlePostRequest' is set
            if (singlePostRequest == null)
            {
                throw new Easypay.Rest.Client.Client.ApiException(400, "Missing required parameter 'singlePostRequest' when calling SinglePaymentApi->SinglePost");
            }


            Easypay.Rest.Client.Client.RequestOptions localVarRequestOptions = new Easypay.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = singlePostRequest;

            localVarRequestOptions.Operation = "SinglePaymentApi.SinglePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accountId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccountId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccountId", this.Configuration.GetApiKeyWithPrefix("AccountId"));
            }
            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("ApiKey", this.Configuration.GetApiKeyWithPrefix("ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineObject5>("/single", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SinglePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a single Payment Apply partial modifications to a single payment resource.
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="singleUpdateRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InlineObject10</returns>
        public InlineObject10 SingleUpdate(Guid id, SingleUpdateRequest? singleUpdateRequest = default(SingleUpdateRequest?), int operationIndex = 0)
        {
            Easypay.Rest.Client.Client.ApiResponse<InlineObject10> localVarResponse = SingleUpdateWithHttpInfo(id, singleUpdateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a single Payment Apply partial modifications to a single payment resource.
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="singleUpdateRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InlineObject10</returns>
        public Easypay.Rest.Client.Client.ApiResponse<InlineObject10> SingleUpdateWithHttpInfo(Guid id, SingleUpdateRequest? singleUpdateRequest = default(SingleUpdateRequest?), int operationIndex = 0)
        {
            Easypay.Rest.Client.Client.RequestOptions localVarRequestOptions = new Easypay.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Easypay.Rest.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = singleUpdateRequest;

            localVarRequestOptions.Operation = "SinglePaymentApi.SingleUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accountId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccountId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccountId", this.Configuration.GetApiKeyWithPrefix("AccountId"));
            }
            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("ApiKey", this.Configuration.GetApiKeyWithPrefix("ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<InlineObject10>("/single/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SingleUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a single Payment Apply partial modifications to a single payment resource.
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="singleUpdateRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineObject10</returns>
        public async System.Threading.Tasks.Task<InlineObject10> SingleUpdateAsync(Guid id, SingleUpdateRequest? singleUpdateRequest = default(SingleUpdateRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Easypay.Rest.Client.Client.ApiResponse<InlineObject10> localVarResponse = await SingleUpdateWithHttpInfoAsync(id, singleUpdateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a single Payment Apply partial modifications to a single payment resource.
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="singleUpdateRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineObject10)</returns>
        public async System.Threading.Tasks.Task<Easypay.Rest.Client.Client.ApiResponse<InlineObject10>> SingleUpdateWithHttpInfoAsync(Guid id, SingleUpdateRequest? singleUpdateRequest = default(SingleUpdateRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Easypay.Rest.Client.Client.RequestOptions localVarRequestOptions = new Easypay.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Easypay.Rest.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = singleUpdateRequest;

            localVarRequestOptions.Operation = "SinglePaymentApi.SingleUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accountId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccountId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccountId", this.Configuration.GetApiKeyWithPrefix("AccountId"));
            }
            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("ApiKey", this.Configuration.GetApiKeyWithPrefix("ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<InlineObject10>("/single/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SingleUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
