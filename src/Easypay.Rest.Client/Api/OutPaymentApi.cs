/*
 * Easypay Payments API
 *
 * <a href='https://www.easypay.pt/en/legal-terms-and-conditions/' class='item'>Terms conditions and legal terms</a><br><a href='https://www.easypay.pt/en/privacy-and-data-protection-policy/' class='item'>Privacy Policy</a>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: tec@easypay.pt
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Easypay.Rest.Client.Client;
using Easypay.Rest.Client.Model;

namespace Easypay.Rest.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOutPaymentApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Lists out payments
        /// </summary>
        /// <remarks>
        /// Full report with all the out payments from your Account Id
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page Number (optional)</param>
        /// <param name="recordsPerPage">Limit records per page (Max: 100) (optional, default to 20M)</param>
        /// <param name="type">Filter by type (optional)</param>
        /// <param name="method">Filter by method (optional)</param>
        /// <param name="id">Filter by id (optional)</param>
        /// <param name="key">Filter by out payment key (optional)</param>
        /// <param name="value">Filter by value (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutPaymentGet200Response</returns>
        OutPaymentGet200Response OutPaymentGet(decimal? page = default(decimal?), decimal? recordsPerPage = default(decimal?), string? type = default(string?), string? method = default(string?), string? id = default(string?), string? key = default(string?), double? value = default(double?), int operationIndex = 0);

        /// <summary>
        /// Lists out payments
        /// </summary>
        /// <remarks>
        /// Full report with all the out payments from your Account Id
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page Number (optional)</param>
        /// <param name="recordsPerPage">Limit records per page (Max: 100) (optional, default to 20M)</param>
        /// <param name="type">Filter by type (optional)</param>
        /// <param name="method">Filter by method (optional)</param>
        /// <param name="id">Filter by id (optional)</param>
        /// <param name="key">Filter by out payment key (optional)</param>
        /// <param name="value">Filter by value (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutPaymentGet200Response</returns>
        ApiResponse<OutPaymentGet200Response> OutPaymentGetWithHttpInfo(decimal? page = default(decimal?), decimal? recordsPerPage = default(decimal?), string? type = default(string?), string? method = default(string?), string? id = default(string?), string? key = default(string?), double? value = default(double?), int operationIndex = 0);
        /// <summary>
        /// Deletes out payment
        /// </summary>
        /// <remarks>
        /// If the payment is not processed, it will be cancelled. &lt;/br&gt; Get your strong authentication RSA private key from Easypay Backoffice on menu: &lt;/br&gt; Web Services-&gt;Configuration API 2.0-&gt;Keys.
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void OutPaymentIdDelete(Guid id, int operationIndex = 0);

        /// <summary>
        /// Deletes out payment
        /// </summary>
        /// <remarks>
        /// If the payment is not processed, it will be cancelled. &lt;/br&gt; Get your strong authentication RSA private key from Easypay Backoffice on menu: &lt;/br&gt; Web Services-&gt;Configuration API 2.0-&gt;Keys.
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> OutPaymentIdDeleteWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// Shows out payment details
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutPaymentIdGet200Response</returns>
        OutPaymentIdGet200Response OutPaymentIdGet(Guid id, int operationIndex = 0);

        /// <summary>
        /// Shows out payment details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutPaymentIdGet200Response</returns>
        ApiResponse<OutPaymentIdGet200Response> OutPaymentIdGetWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// Create out payment
        /// </summary>
        /// <remarks>
        /// Get your strong authentication RSA private key from Easypay Backoffice on menu:&lt;/br&gt;Web Services-&gt;Configuration API 2.0-&gt;Keys.
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPaymentPostRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutPaymentPost201Response</returns>
        OutPaymentPost201Response OutPaymentPost(OutPaymentPostRequest? outPaymentPostRequest = default(OutPaymentPostRequest?), int operationIndex = 0);

        /// <summary>
        /// Create out payment
        /// </summary>
        /// <remarks>
        /// Get your strong authentication RSA private key from Easypay Backoffice on menu:&lt;/br&gt;Web Services-&gt;Configuration API 2.0-&gt;Keys.
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPaymentPostRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutPaymentPost201Response</returns>
        ApiResponse<OutPaymentPost201Response> OutPaymentPostWithHttpInfo(OutPaymentPostRequest? outPaymentPostRequest = default(OutPaymentPostRequest?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOutPaymentApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Lists out payments
        /// </summary>
        /// <remarks>
        /// Full report with all the out payments from your Account Id
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page Number (optional)</param>
        /// <param name="recordsPerPage">Limit records per page (Max: 100) (optional, default to 20M)</param>
        /// <param name="type">Filter by type (optional)</param>
        /// <param name="method">Filter by method (optional)</param>
        /// <param name="id">Filter by id (optional)</param>
        /// <param name="key">Filter by out payment key (optional)</param>
        /// <param name="value">Filter by value (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutPaymentGet200Response</returns>
        System.Threading.Tasks.Task<OutPaymentGet200Response> OutPaymentGetAsync(decimal? page = default(decimal?), decimal? recordsPerPage = default(decimal?), string? type = default(string?), string? method = default(string?), string? id = default(string?), string? key = default(string?), double? value = default(double?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Lists out payments
        /// </summary>
        /// <remarks>
        /// Full report with all the out payments from your Account Id
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page Number (optional)</param>
        /// <param name="recordsPerPage">Limit records per page (Max: 100) (optional, default to 20M)</param>
        /// <param name="type">Filter by type (optional)</param>
        /// <param name="method">Filter by method (optional)</param>
        /// <param name="id">Filter by id (optional)</param>
        /// <param name="key">Filter by out payment key (optional)</param>
        /// <param name="value">Filter by value (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutPaymentGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutPaymentGet200Response>> OutPaymentGetWithHttpInfoAsync(decimal? page = default(decimal?), decimal? recordsPerPage = default(decimal?), string? type = default(string?), string? method = default(string?), string? id = default(string?), string? key = default(string?), double? value = default(double?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Deletes out payment
        /// </summary>
        /// <remarks>
        /// If the payment is not processed, it will be cancelled. &lt;/br&gt; Get your strong authentication RSA private key from Easypay Backoffice on menu: &lt;/br&gt; Web Services-&gt;Configuration API 2.0-&gt;Keys.
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task OutPaymentIdDeleteAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Deletes out payment
        /// </summary>
        /// <remarks>
        /// If the payment is not processed, it will be cancelled. &lt;/br&gt; Get your strong authentication RSA private key from Easypay Backoffice on menu: &lt;/br&gt; Web Services-&gt;Configuration API 2.0-&gt;Keys.
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OutPaymentIdDeleteWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Shows out payment details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutPaymentIdGet200Response</returns>
        System.Threading.Tasks.Task<OutPaymentIdGet200Response> OutPaymentIdGetAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Shows out payment details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutPaymentIdGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutPaymentIdGet200Response>> OutPaymentIdGetWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create out payment
        /// </summary>
        /// <remarks>
        /// Get your strong authentication RSA private key from Easypay Backoffice on menu:&lt;/br&gt;Web Services-&gt;Configuration API 2.0-&gt;Keys.
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPaymentPostRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutPaymentPost201Response</returns>
        System.Threading.Tasks.Task<OutPaymentPost201Response> OutPaymentPostAsync(OutPaymentPostRequest? outPaymentPostRequest = default(OutPaymentPostRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create out payment
        /// </summary>
        /// <remarks>
        /// Get your strong authentication RSA private key from Easypay Backoffice on menu:&lt;/br&gt;Web Services-&gt;Configuration API 2.0-&gt;Keys.
        /// </remarks>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPaymentPostRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutPaymentPost201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutPaymentPost201Response>> OutPaymentPostWithHttpInfoAsync(OutPaymentPostRequest? outPaymentPostRequest = default(OutPaymentPostRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOutPaymentApi : IOutPaymentApiSync, IOutPaymentApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OutPaymentApi : IOutPaymentApi
    {
        private Easypay.Rest.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OutPaymentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OutPaymentApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OutPaymentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OutPaymentApi(string basePath)
        {
            this.Configuration = Easypay.Rest.Client.Client.Configuration.MergeConfigurations(
                Easypay.Rest.Client.Client.GlobalConfiguration.Instance,
                new Easypay.Rest.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Easypay.Rest.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Easypay.Rest.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Easypay.Rest.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OutPaymentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OutPaymentApi(Easypay.Rest.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Easypay.Rest.Client.Client.Configuration.MergeConfigurations(
                Easypay.Rest.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Easypay.Rest.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Easypay.Rest.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Easypay.Rest.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OutPaymentApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OutPaymentApi(Easypay.Rest.Client.Client.ISynchronousClient client, Easypay.Rest.Client.Client.IAsynchronousClient asyncClient, Easypay.Rest.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Easypay.Rest.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Easypay.Rest.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Easypay.Rest.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Easypay.Rest.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Easypay.Rest.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Lists out payments Full report with all the out payments from your Account Id
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page Number (optional)</param>
        /// <param name="recordsPerPage">Limit records per page (Max: 100) (optional, default to 20M)</param>
        /// <param name="type">Filter by type (optional)</param>
        /// <param name="method">Filter by method (optional)</param>
        /// <param name="id">Filter by id (optional)</param>
        /// <param name="key">Filter by out payment key (optional)</param>
        /// <param name="value">Filter by value (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutPaymentGet200Response</returns>
        public OutPaymentGet200Response OutPaymentGet(decimal? page = default(decimal?), decimal? recordsPerPage = default(decimal?), string? type = default(string?), string? method = default(string?), string? id = default(string?), string? key = default(string?), double? value = default(double?), int operationIndex = 0)
        {
            Easypay.Rest.Client.Client.ApiResponse<OutPaymentGet200Response> localVarResponse = OutPaymentGetWithHttpInfo(page, recordsPerPage, type, method, id, key, value);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lists out payments Full report with all the out payments from your Account Id
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page Number (optional)</param>
        /// <param name="recordsPerPage">Limit records per page (Max: 100) (optional, default to 20M)</param>
        /// <param name="type">Filter by type (optional)</param>
        /// <param name="method">Filter by method (optional)</param>
        /// <param name="id">Filter by id (optional)</param>
        /// <param name="key">Filter by out payment key (optional)</param>
        /// <param name="value">Filter by value (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutPaymentGet200Response</returns>
        public Easypay.Rest.Client.Client.ApiResponse<OutPaymentGet200Response> OutPaymentGetWithHttpInfo(decimal? page = default(decimal?), decimal? recordsPerPage = default(decimal?), string? type = default(string?), string? method = default(string?), string? id = default(string?), string? key = default(string?), double? value = default(double?), int operationIndex = 0)
        {
            Easypay.Rest.Client.Client.RequestOptions localVarRequestOptions = new Easypay.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (method != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "method", method));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (key != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "key", key));
            }
            if (value != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "value", value));
            }

            localVarRequestOptions.Operation = "OutPaymentApi.OutPaymentGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accountId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccountId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccountId", this.Configuration.GetApiKeyWithPrefix("AccountId"));
            }
            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("ApiKey", this.Configuration.GetApiKeyWithPrefix("ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OutPaymentGet200Response>("/out_payment", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OutPaymentGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists out payments Full report with all the out payments from your Account Id
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page Number (optional)</param>
        /// <param name="recordsPerPage">Limit records per page (Max: 100) (optional, default to 20M)</param>
        /// <param name="type">Filter by type (optional)</param>
        /// <param name="method">Filter by method (optional)</param>
        /// <param name="id">Filter by id (optional)</param>
        /// <param name="key">Filter by out payment key (optional)</param>
        /// <param name="value">Filter by value (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutPaymentGet200Response</returns>
        public async System.Threading.Tasks.Task<OutPaymentGet200Response> OutPaymentGetAsync(decimal? page = default(decimal?), decimal? recordsPerPage = default(decimal?), string? type = default(string?), string? method = default(string?), string? id = default(string?), string? key = default(string?), double? value = default(double?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Easypay.Rest.Client.Client.ApiResponse<OutPaymentGet200Response> localVarResponse = await OutPaymentGetWithHttpInfoAsync(page, recordsPerPage, type, method, id, key, value, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lists out payments Full report with all the out payments from your Account Id
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page Number (optional)</param>
        /// <param name="recordsPerPage">Limit records per page (Max: 100) (optional, default to 20M)</param>
        /// <param name="type">Filter by type (optional)</param>
        /// <param name="method">Filter by method (optional)</param>
        /// <param name="id">Filter by id (optional)</param>
        /// <param name="key">Filter by out payment key (optional)</param>
        /// <param name="value">Filter by value (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutPaymentGet200Response)</returns>
        public async System.Threading.Tasks.Task<Easypay.Rest.Client.Client.ApiResponse<OutPaymentGet200Response>> OutPaymentGetWithHttpInfoAsync(decimal? page = default(decimal?), decimal? recordsPerPage = default(decimal?), string? type = default(string?), string? method = default(string?), string? id = default(string?), string? key = default(string?), double? value = default(double?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Easypay.Rest.Client.Client.RequestOptions localVarRequestOptions = new Easypay.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (method != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "method", method));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (key != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "key", key));
            }
            if (value != null)
            {
                localVarRequestOptions.QueryParameters.Add(Easypay.Rest.Client.Client.ClientUtils.ParameterToMultiMap("", "value", value));
            }

            localVarRequestOptions.Operation = "OutPaymentApi.OutPaymentGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accountId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccountId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccountId", this.Configuration.GetApiKeyWithPrefix("AccountId"));
            }
            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("ApiKey", this.Configuration.GetApiKeyWithPrefix("ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OutPaymentGet200Response>("/out_payment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OutPaymentGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes out payment If the payment is not processed, it will be cancelled. &lt;/br&gt; Get your strong authentication RSA private key from Easypay Backoffice on menu: &lt;/br&gt; Web Services-&gt;Configuration API 2.0-&gt;Keys.
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void OutPaymentIdDelete(Guid id, int operationIndex = 0)
        {
            OutPaymentIdDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes out payment If the payment is not processed, it will be cancelled. &lt;/br&gt; Get your strong authentication RSA private key from Easypay Backoffice on menu: &lt;/br&gt; Web Services-&gt;Configuration API 2.0-&gt;Keys.
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Easypay.Rest.Client.Client.ApiResponse<Object> OutPaymentIdDeleteWithHttpInfo(Guid id, int operationIndex = 0)
        {
            Easypay.Rest.Client.Client.RequestOptions localVarRequestOptions = new Easypay.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Easypay.Rest.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "OutPaymentApi.OutPaymentIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accountId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccountId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccountId", this.Configuration.GetApiKeyWithPrefix("AccountId"));
            }
            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("ApiKey", this.Configuration.GetApiKeyWithPrefix("ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/out_payment/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OutPaymentIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes out payment If the payment is not processed, it will be cancelled. &lt;/br&gt; Get your strong authentication RSA private key from Easypay Backoffice on menu: &lt;/br&gt; Web Services-&gt;Configuration API 2.0-&gt;Keys.
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task OutPaymentIdDeleteAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await OutPaymentIdDeleteWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes out payment If the payment is not processed, it will be cancelled. &lt;/br&gt; Get your strong authentication RSA private key from Easypay Backoffice on menu: &lt;/br&gt; Web Services-&gt;Configuration API 2.0-&gt;Keys.
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Easypay.Rest.Client.Client.ApiResponse<Object>> OutPaymentIdDeleteWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Easypay.Rest.Client.Client.RequestOptions localVarRequestOptions = new Easypay.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Easypay.Rest.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "OutPaymentApi.OutPaymentIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accountId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccountId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccountId", this.Configuration.GetApiKeyWithPrefix("AccountId"));
            }
            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("ApiKey", this.Configuration.GetApiKeyWithPrefix("ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/out_payment/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OutPaymentIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Shows out payment details 
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutPaymentIdGet200Response</returns>
        public OutPaymentIdGet200Response OutPaymentIdGet(Guid id, int operationIndex = 0)
        {
            Easypay.Rest.Client.Client.ApiResponse<OutPaymentIdGet200Response> localVarResponse = OutPaymentIdGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Shows out payment details 
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutPaymentIdGet200Response</returns>
        public Easypay.Rest.Client.Client.ApiResponse<OutPaymentIdGet200Response> OutPaymentIdGetWithHttpInfo(Guid id, int operationIndex = 0)
        {
            Easypay.Rest.Client.Client.RequestOptions localVarRequestOptions = new Easypay.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Easypay.Rest.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "OutPaymentApi.OutPaymentIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accountId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccountId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccountId", this.Configuration.GetApiKeyWithPrefix("AccountId"));
            }
            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("ApiKey", this.Configuration.GetApiKeyWithPrefix("ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OutPaymentIdGet200Response>("/out_payment/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OutPaymentIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Shows out payment details 
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutPaymentIdGet200Response</returns>
        public async System.Threading.Tasks.Task<OutPaymentIdGet200Response> OutPaymentIdGetAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Easypay.Rest.Client.Client.ApiResponse<OutPaymentIdGet200Response> localVarResponse = await OutPaymentIdGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Shows out payment details 
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource Identification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutPaymentIdGet200Response)</returns>
        public async System.Threading.Tasks.Task<Easypay.Rest.Client.Client.ApiResponse<OutPaymentIdGet200Response>> OutPaymentIdGetWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Easypay.Rest.Client.Client.RequestOptions localVarRequestOptions = new Easypay.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Easypay.Rest.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "OutPaymentApi.OutPaymentIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accountId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccountId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccountId", this.Configuration.GetApiKeyWithPrefix("AccountId"));
            }
            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("ApiKey", this.Configuration.GetApiKeyWithPrefix("ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OutPaymentIdGet200Response>("/out_payment/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OutPaymentIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create out payment Get your strong authentication RSA private key from Easypay Backoffice on menu:&lt;/br&gt;Web Services-&gt;Configuration API 2.0-&gt;Keys.
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPaymentPostRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutPaymentPost201Response</returns>
        public OutPaymentPost201Response OutPaymentPost(OutPaymentPostRequest? outPaymentPostRequest = default(OutPaymentPostRequest?), int operationIndex = 0)
        {
            Easypay.Rest.Client.Client.ApiResponse<OutPaymentPost201Response> localVarResponse = OutPaymentPostWithHttpInfo(outPaymentPostRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create out payment Get your strong authentication RSA private key from Easypay Backoffice on menu:&lt;/br&gt;Web Services-&gt;Configuration API 2.0-&gt;Keys.
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPaymentPostRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutPaymentPost201Response</returns>
        public Easypay.Rest.Client.Client.ApiResponse<OutPaymentPost201Response> OutPaymentPostWithHttpInfo(OutPaymentPostRequest? outPaymentPostRequest = default(OutPaymentPostRequest?), int operationIndex = 0)
        {
            Easypay.Rest.Client.Client.RequestOptions localVarRequestOptions = new Easypay.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = outPaymentPostRequest;

            localVarRequestOptions.Operation = "OutPaymentApi.OutPaymentPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accountId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccountId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccountId", this.Configuration.GetApiKeyWithPrefix("AccountId"));
            }
            // authentication (signatureAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Signature")))
            {
                localVarRequestOptions.HeaderParameters.Add("Signature", this.Configuration.GetApiKeyWithPrefix("Signature"));
            }
            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("ApiKey", this.Configuration.GetApiKeyWithPrefix("ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OutPaymentPost201Response>("/out_payment", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OutPaymentPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create out payment Get your strong authentication RSA private key from Easypay Backoffice on menu:&lt;/br&gt;Web Services-&gt;Configuration API 2.0-&gt;Keys.
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPaymentPostRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutPaymentPost201Response</returns>
        public async System.Threading.Tasks.Task<OutPaymentPost201Response> OutPaymentPostAsync(OutPaymentPostRequest? outPaymentPostRequest = default(OutPaymentPostRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Easypay.Rest.Client.Client.ApiResponse<OutPaymentPost201Response> localVarResponse = await OutPaymentPostWithHttpInfoAsync(outPaymentPostRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create out payment Get your strong authentication RSA private key from Easypay Backoffice on menu:&lt;/br&gt;Web Services-&gt;Configuration API 2.0-&gt;Keys.
        /// </summary>
        /// <exception cref="Easypay.Rest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outPaymentPostRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutPaymentPost201Response)</returns>
        public async System.Threading.Tasks.Task<Easypay.Rest.Client.Client.ApiResponse<OutPaymentPost201Response>> OutPaymentPostWithHttpInfoAsync(OutPaymentPostRequest? outPaymentPostRequest = default(OutPaymentPostRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Easypay.Rest.Client.Client.RequestOptions localVarRequestOptions = new Easypay.Rest.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Easypay.Rest.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = outPaymentPostRequest;

            localVarRequestOptions.Operation = "OutPaymentApi.OutPaymentPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (accountId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccountId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccountId", this.Configuration.GetApiKeyWithPrefix("AccountId"));
            }
            // authentication (signatureAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Signature")))
            {
                localVarRequestOptions.HeaderParameters.Add("Signature", this.Configuration.GetApiKeyWithPrefix("Signature"));
            }
            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("ApiKey", this.Configuration.GetApiKeyWithPrefix("ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OutPaymentPost201Response>("/out_payment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OutPaymentPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
