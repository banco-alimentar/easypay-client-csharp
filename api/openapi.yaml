openapi: 3.1.0
info:
  contact:
    email: tec@easypay.pt
    name: Easypay Documentation
  description: <a href='https://www.easypay.pt/en/legal-terms-and-conditions/' class='item'>Terms
    conditions and legal terms</a><br><a href='https://www.easypay.pt/en/privacy-and-data-protection-policy/'
    class='item'>Privacy Policy</a>
  license:
    name: MIT
    url: https://spdx.org/licenses/MIT
  title: Easypay Payments API
  version: "2.0"
  x-logo:
    url: https://easypay-cdn-delivery.s3.eu-central-1.amazonaws.com/logo.png
    altText: easypay
servers:
- description: Production
  url: https://api.prod.easypay.pt/2.0
- description: Sandbox
  url: https://api.test.easypay.pt/2.0
security:
- accountId: []
  apiKey: []
tags:
- description: "The easypay API is a collection of web services that allow you to\
    \ receive payments from customers, be notified of those payments, refund them\
    \ if necessary, among others.\n\n## URLs\n\nThe API endpoints are available through\
    \ the following domains:\n\n- For test environment:\n  ```bash\n    https://api.test.easypay.pt/\n\
    \  ```\n- For production environment:\n  ```bash\n    https://api.prod.easypay.pt/\n\
    \  ```\n\n## Authentication\n\nTo create credentials for your account you can\
    \ follow [this guide](https://www.easypay.pt/blog/como-gerar-chaves-de-autenticacao/).\
    \ \n\nServer-to-server requests to easypay APIs must be authenticated via **Account\
    \ ID** and **API Key**.\nTo do so, include the following HTTP headers in your\
    \ API requests:\n\n```\nAccountId: <YOUR_ACCOUNT_ID>\nApiKey: <YOUR_API_KEY>\n\
    ```\n\nWhen these headers are missing or incorrect, a `403` HTTP status code is\
    \ returned.\n\nFor your convenience, during tests you can use the following ID/Key\
    \ pair:\n\n```\nAccountId: 2b0f63e2-9fb5-4e52-aca0-b4bf0339bbe6\nApiKey: eae4aa59-8e5b-4ec2-887d-b02768481a92\n\
    ```\n\nThese will **only work for testing purposes** and **won't work** in production.\n\
    \n## Errors\n\nEasypay uses HTTP response status codes to indicate the success\
    \ or failure of your API requests. If your request fails, Easypay returns an error\
    \ using the appropriate status code.\n\nIn general, there are three status code\
    \ ranges you can expect:\n\n- `2xx` success status codes confirm that your request\
    \ worked as expected\n- `4xx` error status codes indicate an error because of\
    \ the information provided (for example, a required parameter was omitted).\n\
    - `5xx` error status codes are rare and indicate an error with Easypay’s servers.\n\
    \nSome `4xx` errors that could be handled programmatically (for example, a card\
    \ is declined) include an error code (a short string with a brief explanation)\
    \ as a value for `code`.\n\nBelow is a list of possible error codes that can be\
    \ returned, along with additional information about how to resolve them. For your\
    \ convenience, these types of errors also include the `doc_url` attribute with\
    \ a direct link to the specific error code it corresponds to.\n\n### <strong>Authentication\
    \ Error</strong>\n\nThis error can have multiple potential causes. Here are some\
    \ examples:\n\n- Missing/Invalid AccountId and/or ApiKey Headers\n- Your account\
    \ has been blocked\n- You don't enough permissions to the action requested\n\n\
    ### Invalid Content Type Error\n\nThis error can only have one cause, you provided\
    \ an invalid/unsupported content type header.\n\n### Invalid JSON Error\n\nThis\
    \ error happens when you provide a bad formated JSON payload.\n\n### Invalid Params\
    \ Error\n\nThis error indicates the information provided was incorrect of insufficient\
    \ (for example, a required parameter was omitted).\n\n### Internal Error\n\nThis\
    \ error indicates that an unexpected error ocurred on our servers.\n## Idempotency\n\
    \n### Safe Retries in Easypay API: The Role and Implementation of Idempotency\
    \ Keys\n\nEasypay API incorporates idempotency that enables the **safe re-submission\
    \ of requests, eliminating the risk of unintentionally duplicating operations**.\n\
    \nThis helps to circumvent unintentional replication due to failures and retries.\n\
    \nFor instance, in an event of a timeout error, you can securely resend the same\
    \ API payment call several times, assured that the payment detail will be debited\
    \ only once.\n\nTo execute an idempotent request, simply include an additional\
    \ `Idempotency-Key` header within the request parameters.\n\n```shell\ncurl -L\
    \ -X POST 'https://api.test.easypay.pt/2.0/checkout' \\\n  -H 'AccountId: 2b0f63e2-9fb5-4e52-aca0-b4bf0339bbe6'\
    \ \\\n  -H 'ApiKey: eae4aa59-8e5b-4ec2-887d-b02768481a92' \\\n  -H 'Idempotency-Key:\
    \ 435e08a0-e5a9-4216-acb5-44d6b96de612' \\\n  -H 'Content-Type: application/json'\
    \ \\\n  --data-raw '{ \"type\": [ \"single\" ] ... }'\n```\n\nYou can check if\
    \ a request is a replay by checking if the `Idempotency-Replay` Header is present\
    \ in the response and if it has the value `\"true\"`.\n\n### Generating Idempotency\
    \ Keys\n\n\nAlthough the technique of creating unique keys is your choice, **remember\
    \ random string with sufficient entropy to prevent overlaps is advisable.**\n\n\
    Easypay recommends the use of UUID V4 or ULID as Idempotency Key.\n\nThe maximum\
    \ length for idempotency key is **50 characters**.\n\n### How it works\n\nTwo\
    \ requests with the same Idempotency-Key but different AccountId headers will\
    \ be treated as different requests.\n\nEasypay manages idempotency by storing\
    \ the initial status code and response body for the initial request with a specific\
    \ idempotency key.\n\nThe Idempotency layer compares the request body of the incoming\
    \ request with that of the original request.\n\n**If they differ**, the system\
    \ triggers an error to prevent inadvertent misuse.\n\nRepeated requests bearing\
    \ the same key yield identical outcomes. The only exception pertains to **transient\
    \ errors**, which we have identified as the following:\n\n* Too Many Requests\
    \ (HTTP status code 429)\n* Bad Gateway (HTTP status code 502)\n* Service Unavailable\
    \ (HTTP status code 503)\n\nThe previously mentioned error codes are safe to retry.\n\
    \nTo help the client applications decide whether to retry calls, the API's responses\
    \ include an `X-Easypay-Should-Retry` header with value `\"true\"` or `\"false\"\
    `.\nNote that this header does not take into account the number of tries already\
    \ made, so clients should keep track and only send a limited number of equal requests\
    \ (e.g. 3).\n\nIf and when the header is not present, clients can use the following\
    \ strategy to determine what to do:\n\n1. If no response was received at all,\
    \ resend the request.\n2. If the response has one of the following status codes,\
    \ resend the request:\n   * Conflict (HTTP status code 409), may indicate the\
    \ original request was still in transit\n   * Too Many Requests (HTTP status code\
    \ 429)\n   * Bad Gateway (HTTP status code 502)\n   * Service Unavailable (HTTP\
    \ status code 503)\n3. If the response has status code 500 (Internal Server Error),\
    \ resend the request as long as it's **not** a `POST` request.\n4. Otherwise,\
    \ don't repeat the request and handle the error.\n\nIdempotency Keys are automatically\
    \ purged from the system once they've been in existence for 24 hours, and a fresh\
    \ request is initiated if a key is reused after its original has been deleted.\n\
    \nOnly results from API endpoints that have started execution are stored.\n\n\
    **If your request fails authentication, it will not be governed by idempotency\
    \ rules.**\n\nIdempotency keys are acceptable in all POST/PATCH requests.\n\n\
    It is unnecessary and should be avoided to supply idempotency keys in GET and\
    \ DELETE requests, as these types of requests are inherently idempotent by nature.\n"
  name: Overview
- description: |
    ## Payment Methods

    Payment methods are defined according to two different categories:
    - **Pull / Push**: The merchant requests the funds from the customer, or the customer sends the funds directly to the merchant.
    - **Synchronous / Asynchronous**: The charge happens immediately, or only after a period of time.

    ### Pull or Push
    Each method of payment is categorized as either **pull** or **push**, depending on how funds are transferred from the customer’s payment method.

    - In a method with a **pull** behaviour, the customer needs only to accept the payment request from the merchant. Credit card payments and MB WAY are examples of the described behaviour. On the credit card, the customer accepts the payment by providing his credit card details, while on MB WAY they accept by interacting with the push notification on the smartphone.

    - In a method with a **push** behaviour, the customer takes the initiative of sending the funds to the merchant. Virtual IBAN or Multibanco are examples of such behaviour. On the Virtual IBAN, the customer should go to their bank account and create a SEPA transfer to the provided IBAN. On Multibanco, the customer should go to an ATM and create a payment to the entity and reference provided.

    ### Credit / Debit Card
    A Credit / Debit card is a payment card issued to users (cardholders) to enable the cardholder to pay a merchant for a good or service. This is a **synchronous pull** payment method. This means that the payment happens immediately. Credit / Debit cards also support [authorizations](#section/Authorisations-and-Captures) where you can hold an amount for later [capture](#section/Authorisations-and-Captures).

    ### Apple Pay
    Apple Pay is a mobile payment and digital wallet service by Apple Inc. that allows users to make payments in iOS apps, and on the web using Safari. It is supported on the iPhone, Apple Watch, iPad, and Mac. Apple Pay is a **synchronous pull** payment method. This means that the payment happens immediately when the customer authorizes it using their Apple device. The merchant requests the payment, and the customer approves it on their device, which sends the payment to the merchant.
    Apple Pay does not require the customer to create any additional accounts or fill out an extensive form for each purchase. It utilizes the cards already on file in a user’s Apple Wallet. Apple Pay uses a method called tokenization to secure card information. Tokenization replaces the card number with a unique alphanumeric identifier, referred to as a token. The token is used for communication between the merchant, the bank, and Apple Pay, ensuring the actual card number is never shared with the merchant or transmitted with the payment.

    Please note that Apple Pay is not available in all regions and is subject to the terms and conditions of the card issuer.

    ### Google Pay™

    Google Pay is a mobile payment method that enables customers to pay using credit or debit cards stored in their Google Account. It is a synchronous pull payment method, meaning payments are processed immediately upon customer authorization. Google Pay primarily uses a tokenized solution for enhanced security, which most issuers accept as compliant with Strong Customer Authentication (SCA), eliminating the need for 3D-Secure (3DS) in many cases.

    Fallback for Non-Tokenized Transactions: If a transaction isn’t tokenized or the issuer requires additional authentication, the system will automatically trigger the 3DS flow to ensure payment success.

    Compatibility and Requirements: Google Pay is fully compatible with existing features like recurring payments and can be integrated seamlessly into websites and apps. It requires serving the payment page over HTTPS with a TLS domain-validated certificate for secure transactions.

    Usage: This payment method supports transactions for physical goods, donations, subscriptions, and more. The integration process involves enabling Google Pay in your payment methods settings, with minimal code implementation required when using certain payment platforms.

    Regions and Limitations: Google Pay's availability depends on the user's region. All merchants must adhere to the Google Pay APIs [Acceptable Use Policy](https://payments.developers.google.com/terms/aup) and accept the terms defined in the [Google Pay API Terms of Service](https://payments.developers.google.com/terms/sellertos).


    ### MB WAY
    MB WAY is a Portuguese local method. To use MB WAY, the customer must have a Portuguese Banking account as well as a smartphone Bank/MB WAY app installed. This is a **synchronous pull** payment method. The Merchant will issue a payment request that will trigger a push notification on the customer application. MB WAY also supports [authorizations](#section/Authorisations-and-Captures) where you can hold an amount for later [capture](#section/Authorisations-and-Captures).

    ### Multibanco
    Multibanco is a Portuguese local method. This is an **asynchronous push** payment method. The Merchant creates a payment request that will generate the Multibanco order details. The details include:
    - An entity number
    - A reference number
    - The amount to pay
    To pay, the customer introduces these details in an ATM or in their homebanking system.

    This payment method has some ***edge cases*** that you should be aware of, such as the ones below:
    - The customer can pay a different amount than the requested;
    - Multibanco refunds are not currently supported by the vendor. If refunds are needed, you can offer them via SEPA Transfer.

    ### Direct Debit
    Direct Debit is an **asynchronous pull** payment method in which a merchant withdraws funds from the customer's bank account. To do so, the customer must accept a SEPA Direct Debit (SDD) Mandate, which can be valid for multiple payments (therefore supporting single, frequent and subscription payments). To create the SDD Mandate, the merchant must supply the customer's name and IBAN.

    Depending on the customer's bank, confirmations of Direct Debit payments may take up to 14 days.
    Direct Debit is not recommended for single payments due to the risk of fraudulent customers issuing chargebacks.

    ### Virtual IBAN
    Virtual IBAN is an **asynchronous push** payment method that follows the same principles of SEPA Bank Transfers: the merchant provides the customer with an IBAN and transfer amount that they should introduce in an ATM or homebanking system to specify the bank account to which funds are to be transferred.

    In comparison with regular SEPA Transfers, Virtual IBAN has the benefit of protecting your bank account details by providing you with a virtual bank account number that supports single, frequent and subscription payments.

    Although transfers to a single-use Virtual IBAN after the first payment are initially accepted by the customer's bank (and thus funds are temporarily withdrawn), they are automatically refunded by the IBAN issuer bank.

    ### Universo Flex
    Universo Flex is a Portuguese local **synchronous pull** payment method similar to Credit Card, allowing the merchant to accept payments in 3 to 24 installments without having to be a credit intermediary.

    ### Santander Consumer Finance
    Santander Consumer Finance is a Portuguese local **asynchronous pull** payment method where the customer applies for a loan to acquire the good or service in installments. The merchant does not need to be a credit intermediary.

    ## Payment Types

    ### Single

    Single payments are one-time transactions that will let your customers pay an amount of money to you. Examples may include a purchase of a good or service, or a donation. Every payment method supported by easypay allows single payments.

    You can accept single payments entirely through our [Checkout](#tag/Checkout) solution or by calling our [Payments API](#tag/Overview).

    ### Frequent

    Frequent payments are repeatable transactions of varying sums without the client having to enter their payment details again. The original details can be obtained (*tokenized*) through our [Checkout](#tag/Checkout) solution, but each payment will have to be charged via the [Payments API](#tag/Overview).

    It is possible to limit the transferred sums by choosing minimum or maximum values, either to the total sum of the transactions or each individual transaction.

    Supported methods for frequent payments are: Credit Card, MB WAY, Multibanco, Direct Debit, and Virtual IBAN.

    ### Subscription

    Subscriptions are periodic payments of the same amount of money, configured through [Checkout](#tag/Checkout) or our [Payments API](#tag/Overview).

    Subscriptions support a number of different frequencies, ranging from daily to once every three years. Their last payment can be determined by the end date of the subscription, as well as the total number of payments captured. They also support a configurable number of retries for each capture in case of failure, as well as falling back to another (single) payment method if the recurring one is not successful.

    Supported methods for subscriptions are: Credit Card and Direct Debit.

    ## Authorisations and Captures

    Certain payment methods like credit card and MB WAY go through two distinct phases: *authorisation* and *capture*. Our integrations allow you to move through them separately (issuing a card authorisation first and later capturing the funds) or in a single step referred to in our APIs as `sale` (authorisation followed by capture).

    ### Authorisation

    Authorisation is the first step of the process and involves guaranteeing that the buyer has sufficient funds or credit available to make the payment. If so, the funds are put on hold: the customer cannot use them to pay for other goods or services, but they're not yet transferred to the merchant's account. If the merchant fails to capture the funds in the following days, the hold is lifted.

    Authorisations are useful to make sure customers have the means to purchase your product/service before actually charging them. You can issue the authorisation at the moment an order is placed and only actually transfer the funds when you ship the items or provide the service. Another interesting use case of authorisations is [multi-captures](#section/Authorisations-and-Captures).

    ### Capture

    A capture is the actual transfer of funds from the buyer to the merchant.

    ### Sale

    In many of our integrations, specifying `sale` as the type of operation will automatically perform an authorisation and a capture, immediatelly transferring the funds from the customer to the merchant in a single step (if successful).

    ### Multi-captures

    It is also possible to issue an authorisation for a value that will later be split among different captures. One example is a store supporting split payments for orders of multiple vendors. The full amount of the order is authorised but the different captures can be issued at different times, after each vendor confirms or ships the goods.
  name: Payment Concepts
- description: "Single payments are one-time transactions that will let your customers\
    \ pay an amount of money to you. <br/> Examples may include a purchase of a good\
    \ or service, or a donation. <br/> Every payment method supported by easypay allows\
    \ single payments. <br/> <div class=\"pc-tab\"> <input checked=\"checked\" id=\"\
    tab1\" type=\"radio\" name=\"pct\" /> <input id=\"tab2\" type=\"radio\" name=\"\
    pct\" /> <input id=\"tab3\" type=\"radio\" name=\"pct\" /> <input id=\"tab4\"\
    \ type=\"radio\" name=\"pct\" /> <input id=\"tab5\" type=\"radio\" name=\"pct\"\
    \ /> <input id=\"tab6\" type=\"radio\" name=\"pct\" /> <input id=\"tab7\" type=\"\
    radio\" name=\"pct\" /> <input id=\"tab8\" type=\"radio\" name=\"pct\" /> <nav>\
    \ <ul> <li class=\"tab1\"> <label id=\"ico1\" for=\"tab1\" class=\"active\" onclick='document.getElementById(\"\
    ico1\").className = \"active\"; document.getElementById(\"ico2\").className =\
    \ \"\"; document.getElementById(\"ico3\").className = \"\" document.getElementById(\"\
    ico4\").className = \"\"; document.getElementById(\"ico5\").className = \"\";\
    \ document.getElementById(\"ico6\").className =\"\"; document.getElementById(\"\
    ico7\").className =\"\"; document.getElementById(\"ico8\").className =\"\"'><img\
    \ src=\"https://easypay-cdn-delivery.s3.amazonaws.com/docs/icons/mb.png\"/></label>\
    \ </li> <li class=\"tab2\"> <label id=\"ico2\" for=\"tab2\" onclick='document.getElementById(\"\
    ico2\").className = \"active\"; document.getElementById(\"ico1\").className =\
    \ \"\"; document.getElementById(\"ico3\").className = \"\" document.getElementById(\"\
    ico4\").className = \"\"; document.getElementById(\"ico5\").className = \"\";\
    \ document.getElementById(\"ico6\").className =\"\"; document.getElementById(\"\
    ico7\").className =\"\"; document.getElementById(\"ico8\").className =\"\"'><img\
    \ src=\"https://easypay-cdn-delivery.s3.amazonaws.com/docs/icons/mbway.png\"/></label>\
    \ </li> <li class=\"tab3\"> <label id=\"ico3\" for=\"tab3\" onclick='document.getElementById(\"\
    ico3\").className = \"active\"; document.getElementById(\"ico2\").className =\
    \ \"\"; document.getElementById(\"ico1\").className = \"\";  document.getElementById(\"\
    ico4\").className = \"\";  document.getElementById(\"ico5\").className = \"\"\
    ; document.getElementById(\"ico6\").className =\"\"; document.getElementById(\"\
    ico7\").className =\"\" document.getElementById(\"ico8\").className =\"\";'><img\
    \ src=\"https://easypay-cdn-delivery.s3.amazonaws.com/docs/icons/visa.png\"/></label>\
    \ </li> <li class=\"tab4\"> <label id=\"ico4\" for=\"tab4\" onclick='document.getElementById(\"\
    ico4\").className = \"active\"; document.getElementById(\"ico2\").className =\
    \ \"\"; document.getElementById(\"ico1\").className = \"\"; document.getElementById(\"\
    ico3\").className = \"\"; document.getElementById(\"ico5\").className = \"\";\
    \ document.getElementById(\"ico6\").className =\"\"; document.getElementById(\"\
    ico7\").className =\"\"; document.getElementById(\"ico8\").className =\"\"'><img\
    \ src=\"https://easypay-cdn-delivery.s3.amazonaws.com/docs/icons/dd.png\"/></label>\
    \ </li> <li class=\"tab6\"> <label id=\"ico6\" for=\"tab6\" onclick='document.getElementById(\"\
    ico6\").className = \"active\"; document.getElementById(\"ico2\").className =\
    \ \"\"; document.getElementById(\"ico1\").className = \"\";  document.getElementById(\"\
    ico3\").className = \"\"; document.getElementById(\"ico4\").className =\"\"; document.getElementById(\"\
    ico5\").className =\"\"; document.getElementById(\"ico7\").className =\"\"; document.getElementById(\"\
    ico8\").className =\"\"'><img src=\"https://easypay-cdn-delivery.s3.amazonaws.com/docs/icons/vi.png\"\
    /></label> </li> <li class=\"tab7\"> <label id=\"ico7\" for=\"tab7\" onclick='document.getElementById(\"\
    ico7\").className = \"active\"; document.getElementById(\"ico2\").className =\
    \ \"\"; document.getElementById(\"ico1\").className = \"\";  document.getElementById(\"\
    ico3\").className = \"\"; document.getElementById(\"ico4\").className =\"\"; document.getElementById(\"\
    ico5\").className =\"\"; document.getElementById(\"ico6\").className =\"\"; document.getElementById(\"\
    ico8\").className =\"\"'><img src=\"https://easypay-cdn-delivery.s3.amazonaws.com/docs/icons/sc.png\"\
    /></label> </li> <li class=\"tab8\"> <label id=\"ico8\" for=\"tab8\" onclick='document.getElementById(\"\
    ico8\").className = \"active\"; document.getElementById(\"ico2\").className =\
    \ \"\"; document.getElementById(\"ico1\").className = \"\";  document.getElementById(\"\
    ico3\").className = \"\"; document.getElementById(\"ico4\").className =\"\"; document.getElementById(\"\
    ico5\").className =\"\"; document.getElementById(\"ico6\").className =\"\"; document.getElementById(\"\
    ico7\").className =\"\"'><img src=\"https://easypay-cdn-delivery.s3.amazonaws.com/docs/icons/uf.png\"\
    /></label> </li> </ul> </nav> <section> <div class=\"tab1\"> <h2>Multibanco Reference</h2>\
    \ <br/> <p>When calling the API 2.0 in single, our system returns an <b><i>entity</i></b>\
    \ and <b><i>reference</i></b> in the response JSON. When the payment is made by\
    \ the customer, our system sends a <a href=\"#tag/Payment-Generic-Operations\"\
    >Generic Notification</a> with the Single <b><i>ID</i></b>. Upon receipt, your\
    \ system should call the <a href=\"#operation/single-id-get\">Single Details</a>\
    \ endpoint with the Single <b><i>ID</i></b> reported as successful in order to\
    \ confirm it.</p> <br/> <a href=\"https://easypay-cdn-delivery.s3.amazonaws.com/docs/single/mb_single.png\"\
    \ target=\"_blank\"><img src=\"https://easypay-cdn-delivery.s3.amazonaws.com/docs/thumbnails/img_thumb.png\"\
    /></a> <a href=\"https://easypay-cdn-delivery.s3.amazonaws.com/docs/single/mb_single.pdf\"\
    \ target=\"_blank\"><img src=\"https://easypay-cdn-delivery.s3.amazonaws.com/docs/thumbnails/pdf_thumb.png\"\
    /></a> </div> <div class=\"tab2\"> <h2>MBWay</h2> <br/> <p>Upon successfully calling\
    \ API 2.0 on a Single with type <b><i>sale</i></b>, our system will communicate\
    \ to the end customer's <b>MBWAY App</b>. After the event of the customer accepting/declining\
    \ the payment, our system sends a <a href=\"#tag/Payment-Generic-Operations\"\
    >Generic Notification</a> with the Single <b><i>ID</i></b> and a <b><i>status</i></b>\
    \ (success or failed). Upon receipt of success, your system should call <a href=\"\
    #operation/single-id-get\">Single Details</a> endpoint with the Single <b><i>ID</i></b>\
    \ reported as successful in order to confirm it.</p> <p>Only for <B>Test Environment</B>,\
    \ we have these possible cases on phone:</p> &nbsp;&nbsp;911234567 - Authorized\
    \ for all operations<br/> &nbsp;&nbsp;917654321 - Failed for all operations<br/>\
    \ &nbsp;&nbsp;913456789 - Declined for all operations<br/> &nbsp;&nbsp;919876543\
    \ - Pending for all operations<br/> <br/> <a href=\"https://easypay-cdn-delivery.s3.amazonaws.com/docs/single/mbway_single.png\"\
    \ target=\"_blank\"><img src=\"https://easypay-cdn-delivery.s3.amazonaws.com/docs/thumbnails/img_thumb.png\"\
    /></a> <a href=\"https://easypay-cdn-delivery.s3.amazonaws.com/docs/single/mbway_single.pdf\"\
    \ target=\"_blank\"><img src=\"https://easypay-cdn-delivery.s3.amazonaws.com/docs/thumbnails/pdf_thumb.png\"\
    /></a> </div> <div class=\"tab3\"> <h2>Visa & Mastercard</h2> <br/> <p>By successfully\
    \ calling the API 2.0 in a Single with type <b><i>sale</i></b>, our system returns\
    \ a <b><i>URL</i></b> in the response JSON for the client to be forwarded to our\
    \ credit card gateway. The end customer must enter the card data. Our system validates\
    \ the card in the <b>VISA / MASTERCARD</b> and sends a <a href=\"#tag/Payment-Generic-Operations\"\
    >Generic Notification</a> with the Single <b><i>ID</i></b> and a <b><i>status</i></b>\
    \ (success or failed). Upon receipt of a success, your system should call the\
    \ <a href=\"#operation/single-id-get\">Single Details</a> endpoint with the Single\
    \ <b><i>ID</i></b> reported as successful in order to confirm it.</p><p>For Visa\
    \ forward and Visa details configurations follow this <a target=\"_blank\" href=\"\
    https://github.com/Easypay/documentation/blob/master/apiv2/Visa-Details-and-Fwd-v2.md\"\
    >link</a></p> <p>Only for <B>Test Environment</B>, we have these possible credit\
    \ card numbers:</p> &nbsp;&nbsp;0000000000000000 - Authorized for all operations<br/>\
    \ &nbsp;&nbsp;2222222222222222 - Proceed with 3DS authentication<br/> &nbsp;&nbsp;1111111111111111\
    \ - Failed for all operations<br/> &nbsp;&nbsp;1234123412341234 - Declined for\
    \ all operations<br/> <br/> <a href=\"https://easypay-cdn-delivery.s3.amazonaws.com/docs/single/visa_single.png\"\
    \ target=\"_blank\"><img src=\"https://easypay-cdn-delivery.s3.amazonaws.com/docs/thumbnails/img_thumb.png\"\
    /></a> <a href=\"https://easypay-cdn-delivery.s3.amazonaws.com/docs/single/visa_single.pdf\"\
    \ target=\"_blank\"><img src=\"https://easypay-cdn-delivery.s3.amazonaws.com/docs/thumbnails/pdf_thumb.png\"\
    /></a> </div> <div class=\"tab4\"> <h2>SEPA Direct Debit</h2> <br/> <p>By successfully\
    \ calling the API 2.0 in a Single with type <b><i>sale</i></b>, our system returns\
    \ a <b><i>URL</i></b> in the response JSON for the client to be forwarded to our\
    \ credit card gateway. The end customer must enter the card data. Our system validates\
    \ the card in the <b>VISA / MASTERCARD</b> and sends a <a href=\"#tag/Payment-Generic-Operations\"\
    >Generic Notification</a> with the Single <b><i>ID</i></b> and a <b><i>status</i></b>\
    \ (success or failed). Upon receipt of a success, your system should call the\
    \ <a href=\"#operation/single-id-get\">Single Details</a> endpoint with the Single\
    \ <b><i>ID</i></b> reported as successful in order to confirm it.</p> <p>Only\
    \ for <B>Test Environment</B>, all valid iban will return success but this one:\
    \ PT50000201231234567890154</p> <br/> <a href=\"https://easypay-cdn-delivery.s3.amazonaws.com/docs/single/dd_single.png\"\
    \ target=\"_blank\"><img src=\"https://easypay-cdn-delivery.s3.amazonaws.com/docs/thumbnails/img_thumb.png\"\
    /></a> <a href=\"https://easypay-cdn-delivery.s3.amazonaws.com/docs/single/dd_single.pdf\"\
    \ target=\"_blank\"><img src=\"https://easypay-cdn-delivery.s3.amazonaws.com/docs/thumbnails/pdf_thumb.png\"\
    /></a> </div> <div class=\"tab6\"> <h2>Virtual IBAN</h2> <br/> <p>When calling\
    \ the API 2.0 in single, our system returns an <b><i>IBAN</i></b> in the response\
    \ JSON. When the payment is made by the customer, our system sends a <a href=\"\
    #tag/Payment-Generic-Operations\">Generic Notification</a> with the Single <b><i>ID</i></b>.\
    \ Upon receipt, your system should call the <a href=\"#operation/single-id-get\"\
    >Single Details</a> endpoint with the Single <b><i>ID</i></b> reported as successful\
    \ in order to confirm it.</p> <a href=\"https://easypay-cdn-delivery.s3.amazonaws.com/docs/single/iban_single.png\"\
    \ target=\"_blank\"><img src=\"https://easypay-cdn-delivery.s3.amazonaws.com/docs/thumbnails/img_thumb.png\"\
    /></a> <a href=\"https://easypay-cdn-delivery.s3.amazonaws.com/docs/single/iban_single.pdf\"\
    \ target=\"_blank\"><img src=\"https://easypay-cdn-delivery.s3.amazonaws.com/docs/thumbnails/pdf_thumb.png\"\
    /></a> </div> <div class=\"tab7\"> <h2>Santander Consumer</h2> <br/> <p>By successfully\
    \ calling the API 2.0 in a Single, our system returns a <b><i>URL</i></b> in the\
    \ response JSON for the client to be forwarded to. The end customer must fullfill\
    \ the journey in the Santander Consumer page. After the journey is completed with\
    \ success, our system sends a <a href=\"#tag/Payment-Generic-Operations\">Generic\
    \ Notification</a> with the Single <b><i>ID</i></b>. Upon receipt, your system\
    \ should call the <a href=\"#operation/single-id-get\">Single Details</a> endpoint\
    \ with the Single <b><i>ID</i></b> reported as successful in order to confirm\
    \ it.</p> <a href=\"https://easypay-cdn-delivery.s3.amazonaws.com/docs/single/santander_single.png\"\
    \ target=\"_blank\"><img src=\"https://easypay-cdn-delivery.s3.amazonaws.com/docs/thumbnails/img_thumb.png\"\
    /></a> <a href=\"https://easypay-cdn-delivery.s3.amazonaws.com/docs/single/santander_single.pdf\"\
    \ target=\"_blank\"><img src=\"https://easypay-cdn-delivery.s3.amazonaws.com/docs/thumbnails/pdf_thumb.png\"\
    /></a> </div> <div class=\"tab8\"> <h2>Universo Flex</h2> <br/> <p>By successfully\
    \ calling the API 2.0 in a Single with type <b><i>sale</i></b>, our system returns\
    \ a <b><i>URL</i></b> in the response JSON for the client to be forwarded to.\
    \ The end customer must fullfill the journey in the Universo Flex page. After\
    \ the journey is completed with success or failure, our system sends a <a href=\"\
    #tag/Payment-Generic-Operations\">Generic Notification</a> with the Single <b><i>ID</i></b>.\
    \ Upon receipt, your system should call the <a href=\"#operation/single-id-get\"\
    >Single Details</a> endpoint with the Single <b><i>ID</i></b> reported as successful\
    \ in order to confirm it.</p><p>For Visa forward and Visa details configurations\
    \ follow this <a target=\"_blank\" href=\"https://github.com/Easypay/documentation/blob/master/apiv2/Visa-Details-and-Fwd-v2.md\"\
    >link</a></p> <a href=\"https://easypay-cdn-delivery.s3.amazonaws.com/docs/single/universo_single.png\"\
    \ target=\"_blank\"><img src=\"https://easypay-cdn-delivery.s3.amazonaws.com/docs/thumbnails/img_thumb.png\"\
    /></a> <a href=\"https://easypay-cdn-delivery.s3.amazonaws.com/docs/single/universo_single.pdf\"\
    \ target=\"_blank\"><img src=\"https://easypay-cdn-delivery.s3.amazonaws.com/docs/thumbnails/pdf_thumb.png\"\
    /></a> </div> </section> </div> <style> .pc-tab section div{ display: none; }\
    \ .pc-tab input{ display: none; } #tab1:checked ~ section .tab1, #tab2:checked\
    \ ~ section .tab2, #tab3:checked ~ section .tab3, #tab4:checked ~ section .tab4,\
    \ #tab5:checked ~ section .tab5, #tab6:checked ~ section .tab6, #tab7:checked\
    \ ~ section .tab7, #tab8:checked ~ section .tab8 { display: block; } #tab1:checked\
    \ ~ nav .tab1, #tab2:checked ~ nav .tab2, #tab3:checked ~ nav .tab3, #tab4:checked\
    \ ~ nav .tab4, #tab5:checked ~ nav .tab5, #tab6:checked ~ nav .tab6, #tab7:checked\
    \ ~ nav .tab7, #tab8:checked ~ nav .tab8 { color: red; } .pc-tab { width: 100%;\
    \ max-width: 700px; margin: 0 auto; } .pc-tab ul { list-style: none; margin: 0;\
    \ padding: 0 !important; } .pc-tab ul li label { float: left; padding: 5px 25px;\
    \ border: 1px solid #ddd; cursor: pointer; background: #eeeeee; color: #444; position:\
    \ relative; top: 1px; } } .pc-tab ul li label:hover { background: #dddddd; } .pc-tab\
    \ ul li label:active { background: #ffffff; } .pc-tab ul li label.active { background:\
    \ #ffffff; border-bottom: 1px solid #ffffff; } .pc-tab ul li label:focus { background:\
    \ #ffffff; } .pc-tab ul li:not(:last-child) label { border-right-width: 0; } .pc-tab\
    \ section { clear: both; } .pc-tab section div { padding: 20px; width: 100%; border:\
    \ 1px solid #ddd; background: #fff; line-height: 1.5em; letter-spacing: 0.3px;\
    \ color: #444; } .pc-tab section div h2 { margin: 0; letter-spacing: 1px; color:\
    \ #34495e; } #tab1:checked ~ nav .tab1 label, #tab2:checked ~ nav .tab2 label,\
    \ #tab3:checked ~ nav .tab3 label, #tab4:checked ~ nav .tab4 label, #tab5:checked\
    \ ~ nav .tab5 label, #tab6:checked ~ nav .tab6 label, #tab7:checked ~ nav .tab7\
    \ label, #tab8:checked ~ nav .tab8 label { background: white; color: #111; position:\
    \ relative; } #tab1:checked ~ nav .tab1 label:after, #tab2:checked ~ nav .tab2\
    \ label:after, #tab3:checked ~ nav .tab3 label:after, #tab4:checked ~ nav .tab4\
    \ label:after, #tab5:checked ~ nav .tab5 label:after, #tab6:checked ~ nav .tab6\
    \ label:after, #tab7:checked ~ nav .tab7 label:after, #tab8:checked ~ nav .tab8\
    \ label:after { content: \"\"; display: block; position: absolute; height: 2px;\
    \ width: 100%; background: #ffffff; left: 0; bottom: -1px; } .hide{ display: none;\
    \ } .myblue{ color: #0D71F9; } .mygreen{ color: #39B54A; } .myred{ color: #D4145A;\
    \ } .mypink{ color: #EF2AC1; } @media only screen and (max-width: 600px) { .hide_mobile\
    \ { display: none; } } </style>"
  name: Single Payment
- description: |-
    Payments used on frequent services with amounts and periodicity changes <br/> <div id="freq"> <div class="pc-tab"> <input checked="checked" id="tab1a" type="radio" name="pcta" /> <input id="tab2a" type="radio" name="pcta" /> <input id="tab3a" type="radio" name="pcta" /> <input id="tab4a" type="radio" name="pcta" /> <nav> <ul> <li class="tab1a"> <label id="ico1a" for="tab1a" class="active" onclick='document.getElementById("ico1a").className = "active"; document.getElementById("ico2a").className = ""; document.getElementById("ico3a").className = ""; document.getElementById("ico4a").className = ""'><img src="https://easypay-cdn-delivery.s3.amazonaws.com/docs/icons/mb.png"/></label> </li> <li class="tab2a"> <label id="ico2a" for="tab2a" onclick='document.getElementById("ico2a").className = "active"; document.getElementById("ico1a").className = ""; document.getElementById("ico3a").className = ""; document.getElementById("ico4a").className = ""'><img src="https://easypay-cdn-delivery.s3.amazonaws.com/docs/icons/mbway.png"/></label> </li> <li class="tab3a"> <label id="ico3a" for="tab3a" onclick='document.getElementById("ico3a").className = "active"; document.getElementById("ico2a").className = ""; document.getElementById("ico1a").className = ""; document.getElementById("ico4a").className = ""'><img src="https://easypay-cdn-delivery.s3.amazonaws.com/docs/icons/visa.png"/></label> </li> <li class="tab4a"> <label id="ico4a" for="tab4a" onclick='document.getElementById("ico4a").className = "active"; document.getElementById("ico2a").className = ""; document.getElementById("ico1a").className = ""; document.getElementById("ico3a").className = ""'><img src="https://easypay-cdn-delivery.s3.amazonaws.com/docs/icons/dd.png"/></label> </li> </ul> </nav> <section> <div class="tab1a"> <h2>Multibanco Reference</h2> <br/> <p>After one Frequent MB request our system will return an <b><i>entity</i></b> and a <b><i>reference</i></b> in the JSON response. The customer can always pay between the min and max values several times before the expiration date or when the method  <a href="#tag/Frequent-Payment%2Fpaths%2F~1frequent~1%7Bid%7D%2Fdelete">Deletes Frequent</a> is called with success. If the parameter <b><i>unlimited_payments</i></b> is active transactions will be unlimited, <b><i>entity</i></b> and <b><i>reference</i></b> is reseted on our provider 3 times a day, otherwise the total value of payments can’t exceed the max defined. For each payment made with this entity and reference, our system sends a <a href="#tag/Payment-Generic-Operations">Generic Notification</a> with the Frequent <b><i>ID</i></b>.</p> <br/> <a href="https://easypay-cdn-delivery.s3.amazonaws.com/docs/freq/mb_freq.png" target="_blank"><img src="https://easypay-cdn-delivery.s3.amazonaws.com/docs/thumbnails/img_thumb.png"/></a> <a href="https://easypay-cdn-delivery.s3.amazonaws.com/docs/freq/mb_freq.pdf" target="_blank"><img src="https://easypay-cdn-delivery.s3.amazonaws.com/docs/thumbnails/pdf_thumb.png"/></a> </div> <div class="tab2a"> <h2>MBWay</h2> <br/> <p>After successfully calling the API 2.0 on a Frequent MBW you can capture funds through the Frequent <b><i>ID</i></b> on a Capture call, our system will communicate to the end customer's <b>MBWAY App</b>. If the final customer accepts / rejects payment, the system sends a <a href="#tag/Payment-Generic-Operations">Generic Notification</a> with the Capture <b><i>ID</i></b> and a <b><i>status</i></b> (success or failed). Upon successful receipt, the system should call the <a href="#tag/Frequent-Payment%2Fpaths%2F~1frequent~1%7Bid%7D%2Fget">Frequent Details</a> endpoint with the Frequent <b><i>ID</i></b> reported as successful in order to confirm it.</p> <p>Only for <B>Test Environment</B>, we have these possible cases on phone:</p> &nbsp;&nbsp;911234567 - Authorized for all operations<br/> &nbsp;&nbsp;917654321 - Declined for all operations<br/> &nbsp;&nbsp;919876543 - Pending for all operations<br/> <br/> <a href="https://easypay-cdn-delivery.s3.amazonaws.com/docs/freq/mbway_freq.png" target="_blank"><img src="https://easypay-cdn-delivery.s3.amazonaws.com/docs/thumbnails/img_thumb.png"/></a> <a href="https://easypay-cdn-delivery.s3.amazonaws.com/docs/freq/mbway_freq.pdf" target="_blank"><img src="https://easypay-cdn-delivery.s3.amazonaws.com/docs/thumbnails/pdf_thumb.png"/></a> </div> <div class="tab3a"> <h2>Visa & Mastercard</h2> <br/> <p>When calling the API 2.0 successfully on a Frequent CC, the system returns a <b><i>URL</i></b> in JSON for the client to be forwarded to our credit card gateway. The end customer must enter the card data. The system validates the card in the <b>VISA / MASTERCARD</b> and notifies <a href="#tag/Payment-Generic-Operations">Generic Notification</a> with the Frequent <b><i>ID</i></b> and a status (success or failed). Upon successful receipt, the system should call the <a href="#tag/Frequent-Payment%2Fpaths%2F~1frequent~1%7Bid%7D%2Fget">Frequent Details</a> endpoint with the Frequent <b><i>ID</i></b> reported as successful. From a successful communication, you can capture funds using the Frequent <b><i>ID</i></b> in a Capture call. The system will capture the funds from the card and sends a <a href="#tag/Payment-Generic-Operations">Generic Notification</a> with the Capture <b><i>ID</i></b> and a status (success or failed). Upon successful receipt, the system should call the <a href="#tag/Frequent-Payment%2Fpaths%2F~1frequent~1%7Bid%7D%2Fget">Frequent Details</a> endpoint with the Frequent <b><i>ID</i></b> reported as successful.</p><p>For Visa forward and Visa details configurations follow this <a target="_blank" href="https://github.com/Easypay/documentation/blob/master/apiv2/Visa-Details-and-Fwd-v2.md">link</a>.</p> <br/> <a href="https://easypay-cdn-delivery.s3.amazonaws.com/docs/freq/visa_freq.png" target="_blank"><img src="https://easypay-cdn-delivery.s3.amazonaws.com/docs/thumbnails/img_thumb.png"/></a> <a href="https://easypay-cdn-delivery.s3.amazonaws.com/docs/freq/visa_freq.pdf" target="_blank"><img src="https://easypay-cdn-delivery.s3.amazonaws.com/docs/thumbnails/pdf_thumb.png"/></a> </div> <div class="tab4a"> <h2>SEPA Direct Debit</h2> <br/> <p>When calling API 2.0 successfully on a Frequent DD, the system returns in JSON including the  SEPA Direct Debit Mandate <b><i>ID</i></b> and an additional <b><i>entity</i></b>/<b><i>reference</i></b> for additional payments. From now on funds can be captured through the Frequent <b><i>ID</i></b> using the <a href="#tag/Payment-Generic-Operations%2Fpaths%2F~1capture~1%7Bid%7D%2Fpost">Capture</a> endpoint, these funds can take up to 48 business hours to obtain a SEPA direct debit response. When responding, the system notifies with  <a href="#tag/Payment-Generic-Operations">Generic Notification</a> with the Capture <b><i>ID</i></b> and a <b><i>status</i></b> (success or failed). Upon successful receipt, the system should call the <a href="#tag/Frequent-Payment%2Fpaths%2F~1frequent~1%7Bid%7D%2Fget">Frequent Details</a> endpoint with the Frequent <b><i>ID</i></b> reported as successful.</p> <br/> <a href="https://easypay-cdn-delivery.s3.amazonaws.com/docs/freq/dd_freq.png" target="_blank"><img src="https://easypay-cdn-delivery.s3.amazonaws.com/docs/thumbnails/img_thumb.png"/></a> <a href="https://easypay-cdn-delivery.s3.amazonaws.com/docs/freq/dd_freq.pdf" target="_blank"><img src="https://easypay-cdn-delivery.s3.amazonaws.com/docs/thumbnails/pdf_thumb.png"/></a> </div> </section> </div> </div> <style> #freq .pc-tab section div{ display: none; } #freq .pc-tab input{ display: none; } #freq #tab1a:checked ~ section .tab1a, #freq #tab2a:checked ~ section .tab2a, #freq #tab4a:checked ~ section .tab4a, #freq #tab3a:checked ~ section .tab3a { display: block; } #freq #tab1a:checked ~ nav .tab1a, #freq #tab2a:checked ~ nav .tab2a, #freq #tab4a:checked ~ nav .tab4a, #freq #tab3a:checked ~ nav .tab3a { color: red; } #freq .pc-tab { width: 100%; max-width: 700px; margin: 0 auto; } #freq .pc-tab ul { list-style: none; margin: 0; padding: 0 !important; } #freq .pc-tab ul li label { float: left; padding: 5px 25px; border: 1px solid #ddd; cursor: pointer;
    background: #eeeeee; color: #444; position: relative; top: 1px; } #freq .pc-tab ul li label:hover { background: #dddddd; } #freq .pc-tab ul li label:active { background: #ffffff; } #freq .pc-tab ul li label.active { background: #ffffff; border-bottom: 1px solid #ffffff; } #freq .pc-tab ul li label:focus { background: #ffffff; }
    #freq .pc-tab ul li:not(:last-child) label { border-right-width: 0; } #freq .pc-tab section { clear: both; } #freq .pc-tab section div { padding: 20px; width: 100%; border: 1px solid #ddd; background: #fff; line-height: 1.5em; letter-spacing: 0.3px; color: #444; } #freq .pc-tab section div h2 { margin: 0; letter-spacing: 1px; color: #34495e; } #freq #tab1a:checked ~ nav .tab1a label, #freq #tab2a:checked ~ nav .tab2a label, #freq #tab4a:checked ~ nav .tab4a label, #freq #tab3a:checked ~ nav .tab3a label { background: white; color: #111; position: relative; } #freq #tab1a:checked ~ nav .tab1a label:after, #freq #tab2a:checked ~ nav .tab2a label:after, #freq #tab4a:checked ~ nav .tab4a label:after, #freq #tab3a:checked ~ nav .tab3a label:after { content: ""; display: block; position: absolute; height: 2px; width: 100%; background: #ffffff; left: 0; bottom: -1px; } </style>
  name: Frequent Payment
- name: Subscription Payment
- description: "These operations can be used on all our payment types: single, frequent\
    \ and subscription"
  name: Payment Generic Operations
- description: |
    ## What are notifications and why they are useful
    Easypay use notifications (webhooks) for event notifications.

    Notifications are **POST API** calls (JSON encoded) that let your application know an event has happened.

    This is a server-to-server service that sends near real-time notifications, informing about a payment status change.

    Notifications are particularly useful for asynchronous events like:

    * when a customer pays a MB reference.
    * a frequent payment succeeds/fails.
    * subscription succeeds/fails, among other useful events.
    * a checkout single sale payment succeeds/fails.

    With notifications your system can automate custom actions in response to the transitions that happen in a payment flow.


    ## Supported Notification types

    Easypay supports 3 notification types:

    - **Generic notification**: a notification informing about all state transitions of some payment resource.
    - **Authorisation notification**: a notification informing about some payment transitioning to authorization status. Available for single and frequent payments.
    - **Transaction notification**: a notification informing about some payment transitioning to capture status. Available for single and frequent payments.

    As an example, if you subscribe to Generic and Authorisation notifications, we will inform you about the payment status transition to authorized in two different formats and you will receive two notifications for the same event.

    What varies in these two notifications, for the same event, is the contract of the notification message.

    ## Generic Notification

    All transitions that happen in a payment flow are notified via generic notification.

    The notification flow follows the following diagram:

    ![Recommended flow](https://easypay-cdn-delivery.s3.eu-central-1.amazonaws.com/docs/checkout/notification_recommended_flow.png)

    1. A change of payment state is notified to the configured generic notification endpoint.
    2. The integrator system that received a generic notification, queries Easypay API's. This is a recommended to ensure that the received notification was issued by Easypay.
    3. The integrator system performs its internal application logic regarding the payment state transition, according to API response.

    The generic notification message contains the following fields:
    ```json
    {
      "id": "5eca7446-14e9-47bb-aabb-5ee237159b8b",
      "key": "dcf9ab3fd95ca3d5607853f36d46f161c8715858",
      "type": "capture",
      "status": "success",
      "messages": ["Your request was successfully captured"],
      "date": "2022-08-10 14:56:54"
    }
    ```

    ### Payload Attributes

    | Name         | Type   | Description                                                                                                                                                                                                          |
    |--------------|--------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | **type**     | string | the type of payment status change.                                                                                                                                                                                   |
    | **status**   | string | the status of the given payment status change.                                                                                                                                                                       |
    | **messages** | string | messages associated with this payment status change.                                                                                                                                                                 |
    | **date**     | string | the expiration associated with this single or frequent payment. Follows the format <Y-m-d H:i> If none was given, defaults to empty.he merchant identification key provided on a single or frequent payment request. |

    In a generic notification, the fields `id` and `key` will change according to the **payment type** and **operation**.

    The following table describes the possible combinations:

    | Payment Type                           | Name                  | Type                  | Description                                                                                                                              |
    |----------------------------------------|-----------------------|-----------------------|------------------------------------------------------------------------------------------------------------------------------------------|
    | **Single Authorisation**               | **id** <br /> **key** | string  <br /> string | the `id` of the single payment.<br /> the field `key` given to create single request payload.                                            |
    | **Single Capture**                     | **id** <br /> **key** | string  <br /> string | the `id` of the single payment.<br />the field `transaction_key` given to capturing single payload.                                      |
    | **Single Sale**                        | **id** <br /> **key** | string  <br /> string | the `id` of the single payment. <br />the field `transaction_key`, inside of object `capture`, given to create single request payload.   |
    | **Frequent Create**                    | **id** <br />**key**  | string  <br /> string | the `id` of the frequent payment.<br />the field `key` given to create frequent request payload.                                         |
    | **Frequent Authorization**             | **id** <br />**key**  | string  <br /> string | the `id` of the frequent payment.<br />the field `transaction_key` given to authorisation frequent request payload.                      |
    | **Frequent Capture**                   | **id** <br />**key**  | string  <br /> string | the `id` of the capture operation. <br />the field `transaction_key` given to capture frequent request payload.                          |
    | **Refund Single/Frequent Capture**     | **id** <br />**key**  | string <br /> string  | the `id` of the refund.<br />the field `transaction_key` given to refund capture request payload.                                        |
    | **Void Single/Frequent Authorisation** | **id** <br />**key**  | string <br /> string  | the `id` of the void.<br />the field `transaction_key` given to void authorisation request payload.                                      |
    | **Subcription Create**                 | **id** <br />**key**  | string <br /> string  | the `id` of the subscription.<br />the field `key` given to create subscription request payload.                                         |
    | **Subcription Capture**                | **id** <br />**key**  | string <br /> string  | the `id` of the subscription.<br />the field `transaction_key` inside of object `capture`, given to create subscription request payload. |
    | **Chargeback Single**                  | **id** <br />**key**  | string <br /> string  | the `id` of the single.<br />the field `transaction_key` given to create frequent request payload.                                       |
    | **Chargeback Frequent**                | **id** <br />**key**  | string <br /> string  | the `id` of the capture operation.<br />the field `transaction_key` given to capture frequent request payload.                           |
    | **Outpayment**                         | **id** <br />**key**  | string <br /> string  | the `id` of the outpayment operation.<br />the field `key` given to create outpayment request payload.                                   |

    ### Authorisation Notification Message structure

    The delivered authorisation notification message contains the following fields:
    ```json
    {
      "id": "1bbc14c3-8ca8-492c-887d-1ca86400e4fa",
      "value": 1,
      "currency": "EUR",
      "key": "the merchant key",
      "expiration_time": "2022-01-01 10:20",
      "customer": {
        "id": "22ea3cc9-424b-489a-91b7-8955f643dc93",
        "name": "Customer Example",
        "email": "customer@example.com",
        "phone": "911234567",
        "phone_indicative": "+351",
        "fiscal_number": "PT123456789",
        "key": "Key Example",
        "language": "PT"
      },
      "method": "mb",
      "account": {
        "id": "4c67e74b-a256-4e0a-965d-97bf5d01bd50"
      },
      "authorisation": {
        "id": "4c67e74b-a256-4e0a-965d-97bf5d01bd50"
      }
    }
    ```

    ### Attributes

    | Name                | Type   | Description                                                                                                                          |
    |---------------------|--------|--------------------------------------------------------------------------------------------------------------------------------------|
    | **id**              | string | the uuid of a single or frequent payment                                                                                             |
    | **value**           | double | the amount requested on single/frequent creation. Rounded to 2 decimals.                                                             |
    | **key**             | string | the merchant identification key provided on a single or frequent payment request                                                     |
    | **expiration_time** | string | the expiration associated with this single or frequent payment. Follows the format <Y-m-d H:i> If none was given, defaults to empty. |
    | **customer**        | object | the customer associated at single or frequent payment request                                                                        |
    | **method**          | string | the choosen payment method associated with single or frequent payment                                                                |
    | **account**         | object | the account from which this notification was originated                                                                              |
    | **authorization**   | object | the authorization details.                                                                                                           |

    ## Transaction Notification Message structure

    The transaction notification message contains the following fields:
    ```json
    {
      "id": "87615356-0a88-42bd-8abb-aab3e90128de",
      "value": "40",
      "currency": "EUR",
      "key": "the merchant key",
      "expiration_time": "2023-08-07 20:00",
      "method": "MBW",
      "customer": {
        "id": "2eb64a7f-90a7-4dc6-959b-1d9aba44910c",
        "phone": "910410419"
      },
      "account": {
        "id": "0b8de6e7-89c8-4d76-93e8-019bc058f27d"
      },
      "transaction": {
        "id": "eb23923b-3529-4b71-b54e-1e707a8d55c4",
        "key": "transaction_key_of_this_capture",
        "type": "capture",
        "date": "2022-08-10T12:45:50Z",
        "values": {
          "requested": "40",
          "paid": "40",
          "fixed_fee": "0",
          "variable_fee": "0",
          "tax": "0",
          "transfer": "0"
        }
      }
    }
    ```

    ### Attributes

    | Name                | Type   | Description                                                                                                                          |
    |---------------------|--------|--------------------------------------------------------------------------------------------------------------------------------------|
    | **id**              | string | the uuid of a single or frequent payment                                                                                             |
    | **value**           | double | the amount requested on single/frequent creation. Rounded to 2 decimals.                                                             |
    | **currency**        | string | the currency of requested amount requested on single/frequent creation.                                                              |
    | **key**             | string | the merchant identification key provided on a single or frequent payment request.                                                    |
    | **expiration_time** | string | the expiration associated with this single or frequent payment. Follows the format <Y-m-d H:i> If none was given, defaults to empty. |
    | **method**          | string | the choosen payment method associated with single or frequent payment.                                                               |
    | **customer**        | object | the customer associated at single or frequent payment request.                                                                       |
    | **account**         | object | the account from which this notification was originated.                                                                             |
    | **transaction**     | object | the details of this transaction.                                                                                                     |

    ## Configuring Notifications

    On Easypay backoffice, navigate to `Web Services > Configuration API 2.0`.

    Select the payment account you want to receive notifications.

    Select `Notifications`.

    To receive generic notifications, place your system url on `Generic - URL `.

    To receive authorisation notifications, place your system url on `Authorisation - URL`.

    To receive capture notifications, place your system url on `Payment - URL`.

    ## Following Notification via Backoffice

    On Easypay backoffice, navigate to `Web Services > Notifications API 2.0`.

    There, you can select the payment account whose notifications you are interested in.
  name: Notifications / Webhooks
- name: Reports
- description: These operations will allow our clients to transfer their funds from
    Easypay Accounts to a Sepa Bank Account.
  name: Out Payment
- description: Account URL configuration for notifications and credit card transactions
  name: Config
- description: |
    ## Overview

    Checkout is easypay's integrated solution for collecting payments in any website.

    It requires no extensive programming knowledge by including a pre-built payment form directly in your website. Checkout is responsible for:
    - Collecting user information.
    - Allowing payment method selection.
    - Collecting payment information.
    - Invoking payment APIs.
    - Displaying payment feedback.

    ![Checkout](https://easypay-cdn-delivery.s3.eu-central-1.amazonaws.com/docs/checkout/overview.png)

    ## Supported payment methods

    Currently, the supported payment methods are:
    - [Credit Card](#section/Payment-Methods)
    - [MB WAY](#section/Payment-Methods)
    - [Apple Pay](#section/Payment-Methods)
    - [Google Pay](#section/Payment-Methods)
    - [Multibanco Reference](#section/Payment-Methods)
    - [Direct Debit](#section/Payment-Methods)
    - [Virtual IBAN](#section/Payment-Methods)
    - [Universo Flex](#section/Payment-Methods)
    - [Santander Consumer](#section/Payment-Methods)

    To know how to choose from the available methods and integrate them with Checkout, read the [integration guide](#tag/Checkout).

    ## Supported payment types

    Both [single](#section/Payment-Types) and [frequent](#section/Payment-Types) payments, as well as [subscriptions](#section/Payment-Types) are accepted by Checkout.

    ## Integration methods

    All Checkout interactions begin by making a server-to-server [request to create a Checkout session](#section/Guide). The request will return a *Checkout **manifest***, which is then used to configure and display a Checkout form created exclusively for that payment interaction.

    You can then display a Checkout form in your page by invoking our [Checkout SDK](#section/Guide). The SDK can be included from a CDN, via HTML `<script>` tag, or you can use it as an NPM dependency in your project and import it in JavaScript/TypeScript.

    This two-step approach makes Checkout the easiest way to integrate easypay payments in your custom website.

    ## Demo

    You can explore a [live integration of Checkout](https://checkout-demo.easypay.pt) to see what exactly is included in the solution, as well as trying out each payment flow.

    The source code for the application, as well as instructions for running it locally, is available at the [public repository](https://github.com/Easypay/checkout-demo).

    ## Guide

    ### Requirements

    Before using Checkout, you will need an [easypay payment account](https://www.easypay.pt/en/blog/onboarding-on-the-website/).

    An example app that demonstrates the steps described in this guide is available at https://github.com/Easypay/checkout-demo .

    ### Creating a checkout session

    To create a Checkout session, you are required to send a server-to-server `POST` request to the [`/checkout`](#tag/Checkout) endpoint. The created session will have an expiration time of 30 minutes at most, after which the users won't be able to pay that specific Checkout anymore.

    Like all API requests, this request is authenticated as described in [Authentication](#section/Authentication), which means you must include the `AccountId` and `ApiKey` headers.

    An example payload is:

    ```json
    {
      "type": ["single"],
      "payment": {
        "methods": ["cc", "mb", "mbw", "dd", "vi", "uf", "sc"],
        "type": "sale",
        "capture": {
          "descriptive": "Purchase in MyStore"
        },
        "currency": "EUR",
        "expiration_time": null
      },
      "order": {
        "items": [
          {
            "description": "T-shirt",
            "quantity": 1,
            "key": "t-shirt",
            "value": 12.5
          },
          {
            "description": "Gloves",
            "quantity": 1,
            "key": "gloves",
            "value": 7
          }
        ],
        "key": "order-123",
        "value": 19.5
      }
    }
    ```

    You can check all the possible parameters in the [Checkout reference](#tag/Checkout).

    The service will return something like:

    ```json
    {
      "id": "57cc19e9-f393-4cfa-9516-8807763b5096",
      "session": "8zoaBOC0Mj5Mg_YAbdRCqYGI66Zc2DttAWeyVcedzhuT3r2IE8aS7l7H-sQOyppgawIv-wO48H_oKDHMzvMf1TeIJwo3Xu7HO7Tmj7y1iblt8t9JlEzyNdf5HurTvCeszC8PdRS4mbaPBCMCQ7g4xkG0qUuOEhiee5OB49MJJQ-Mo9vEnC_R4hzRBi-HSIMviTNDcCm5NiMnn__nWZxpfAmh6pYUg_eznqTGNbheYLu7ku_mBn7HvAdJQcgsmk6eeD-Z9S8SsK-ONHpbJQz1LNZsUkIIiWpNxPMrzD5Je0r2veawzAaIQmCeN8hYncHDfl5YZ7PP28MFVtEjMGOxsOsqxL4wmDOLPO5s6aWMq7Dxns-OGgf0r7dmaka4Y2mXovLVtNxsGgsNbBav8K86f5DceCDmPKBzYh-X5i1nx07LuqYKoJmA8NfyVP5tb-R3Y9dtwbPzcHc_AyQVKlsM0HtW3JXAdqoIBfsDgUqwASeuqQHEyIITKlcRvDIzWFaxTgXmmJauj6et7mo1GEM4L1gDkA1IXOd3n4HU2GvfPw==",
      "config": null
    }
    ```

    This return object is referred to as a **Checkout manifest**, and will be needed in the steps below.

    ### Integrating in your page

    #### Script tag

    Include the easypay Checkout SDK in your page:

    ```html
    <script src="https://cdn.easypay.pt/checkout/2.6.2/"></script>
    ```

    Prepare an empty element in your page where you'd like the Checkout form to be and give it the `easypay-checkout` id:

    ```html
    <div id="easypay-checkout"></div>
    ```

    Make sure to trigger the server-to-server call described above and get the contents of the manifest:

    ```javascript
    const manifest = await yourFunctionToGetTheManifest()
    ```

    Then, use the globally available `easypayCheckout` variable to initialize the SDK and display the form:

    ```javascript
    easypayCheckout.startCheckout(manifest)
    ```

    And the Checkout should be running smoothly.

    #### Testing

    <partial path="/en/checkout/_testing"></partial>

    #### NPM import

    Instead of directly including the JavaScript library from the CDN, you can import it as an NPM module:

    ```bash
    npm install --save @easypaypt/checkout-sdk
    ```

    And use it like any other importable dependency:

    ```javascript
    import { startCheckout } from '@easypaypt/checkout-sdk'

    startCheckout(manifest)
    ```

    All the other steps are the same as for the CDN.

    #### Customizing element id

    If you'd like to have the Checkout form displayed in an element with another id, for instance:

    ```html
    <div id="checkout-form"></div>
    ```

    You can pass the id in the options parameter of the Checkout initialization:

    ```javascript
    startCheckout(manifest, {id: 'checkout-form',
    })
    ```

    #### Removing Checkout contents

    When starting a Checkout form, you can store the return value to later manage it (particularly by removing it from the page at a later date).

    ```javascript
    const checkoutInstance = startCheckout(manifest)
    ```

    When you no longer wish to display the Checkout contents, call the `unmount()` method on the return object:

    ```javascript
    checkoutInstance.unmount()
    ```

    #### Reacting to successful payment interactions

    Even before the Checkout process is completed (by the user pressing the End button or closing the popup), the Checkout SDK is able to notify you of a successful payment interaction.

    This doesn't necessarily mean that the funds were transferred, but that no more user interaction with the Checkout is needed.

    For instance, for a Credit Card payment, this means that the user successfully authorized the operation, and for Multibanco payments this means the user has requested the entity and reference values to pay later.

    ```javascript
    function mySuccessHandler(checkoutSuccessInfo) {// There was a successful payment interaction// You can react to details in checkoutSuccessInfo
    }

    const checkoutInstance = startCheckout(manifest, {onSuccess: mySuccessHandler,
    })
    ```

    Your callback function can receive a parameter with additional details about the outcome of the payment process. The full reference of the details is available on the [reference page](#tag/Checkout).
    #### Reacting to Checkout UI close

    It will often be useful to know when users finish the Checkout process, so you can hide the Checkout contents and display a thank you message.
    The SDK includes a callback parameter that you can pass to get notified when the Checkout process is closed. In inline mode, this always means that the user finished a payment interaction, but in popup mode the user can choose to close the Checkout popup without finishing a payment interaction.


    ```javascript
    let successfulPaymentInteraction = false

    function mySuccessHandler(checkoutSuccessInfo) {successfulPaymentInteraction = true
    }

    function myCloseHandler() {if (successfulPaymentInteraction) {
        checkoutInstance.unmount()
        document.write('Your order was received. Thank you.')
    }
    }

    const checkoutInstance = startCheckout(manifest, {onSuccess: mySuccessHandler, onClose: myCloseHandler,
    })
    ```

    #### Saving frequent payment information

    Processing a frequent payment means you have to save tokenized payment details to later use them to actually transfer funds.

    To create a frequent payment Checkout session, your initial `POST` request to `/checkout` will have to include the `type` property set to `['frequent']`.

    After the user selects a payment method and fills in their details (if any), the SDK will call the success handler with the result information. It is at this point that you should send the `payment.id` field to your server.

    ```javascript
    function saveTokenizedPayment(checkoutSuccessInfo) {sendTokenToServer(checkoutSuccessInfo.payment.id)
    }

    const checkoutInstance = startCheckout(manifest, {onSuccess: saveTokenizedPayment,
    })
    ```

    From then on, you can use the payment ID to send server-to-server requests capturing funds.

    Each capture is created by sending a `POST` request to the `/capture/<payment id>` endpoint. The request must be authenticated with the AccountId and ApiKey headers as usual.
    The payload has to include at least the `descriptive` and `value` for the capture. Learn more in the [service reference](#section/Authorisations-and-Captures).

    ```json
    {
      "descriptive": "Purchase in MyStore",
      "value": 20
    }
    ```

    On success, the service will return something similar to:

    ```json
    {
      "status": "ok",
      "message": ["Your request was successfully created"],
      "id": "c68d8d1a-4c95-4a87-b9b5-031057b3a68e"
    }
    ```

    You can use the resulting capture `id` to get information about the specific capture by issuing an authenticated `GET` request to `/capture/<capture id>`. Learn more in the [service reference](#section/Authorisations-and-Captures).

    It will reply with the capture details:

    ```json
    {
      "account": {
        "id": "1a398de4-d318-48fc-a9fd-230f863dc0e1"
      },
      "capture_date": "2022-08-02",
      "descriptive": "Purchase in MyStore",
      "force_3ds":false,
      "id": "c68d8d1a-4c95-4a87-b9b5-031057b3a68e",
      "payment_id": "76ab3c32-7883-459f-a0ef-5fe0541e0ec7",
      "payment_type": "frequent",
      "status": "success",
      "transaction_key": "",
      "value": 20
    }
    ```

    **Note**: for frequent Multibanco Reference payments, no capture request is necessary. It's the customer's responsibility to make new payments to the same reference.

    If you wish to be notified each time a payment is successful, follow our [Notifications documentation](#tag/Notifications-Webhooks).

    #### Accepting subscriptions

    For periodical payments with a set frequency, you can accept subscription payments in Checkout.

    To do so, you will need to specify a payment `type` of `["subscription"]`.

    You will also need to define:
    - A `payment.start_time`, that determines when the subscription payments start. The start time must be in the future.
    - A `payment.frequency` that sets the periodicity of the payments (weekly, monthly, etc). Available values are:
    - `"1D"` (daily)
    - `"1W"` (weekly)
    - `"2W"` (biweekly)
    - `"1M"` (monthly)
    - `"2M"` (bimonthly)
    - `"3M"` (trimonthly)
    - `"4M"` (quadmonthly)
    - `"6M"` (semiannually)
    - `"1Y"` (annually)
    - `"2Y"` (biannually)
    - `"3Y"` (triannually)
    - Either a `payment.expiration_time` or a `payment.max_captures`, so that the subscription has an end eventually.

    Check the [reference](#tag/Checkout) for additional details and all the available properties.

    An example request payload would therefore be:

    ```json
    {
      "type": ["subscription"],
      "payment": {
        "methods": ["cc", "dd"],
        "type": "sale",
        "capture": {
          "descriptive": "Purchase in MyStore"
        },
        "start_time": "2023-01-01 00:00",
        "frequency": "1M",
        "expiration_time": "2030-12-31 23:59"
      },
      "order": {
        "items": [
          {
            "description": "My streaming service",
            "quantity": 1,
            "key": "streaming-service",
            "value": 12.5
          }
        ],
        "key": "order-123",
        "value": 12.5
      }
    }
    ```

    After typing their details, the customer would then see a confirmation dialog for the subscription:

    ![Subscription](https://easypay-cdn-delivery.s3.eu-central-1.amazonaws.com/docs/checkout/subscription.png)

    Pressing the proceed button allows to continue on with the payment method selection and the remaining interaction is the same as for single and frequent payments.

    #### Reacting to Checkout errors

    The Checkout process is resilient to most forms of errors and allows the customer to retry multiple times with different payment methods until the payment is completed.
    However, there are cases where the Checkout form is unable to recover on its own, such as an expired Checkout session, an attempt to pay a Checkout that was already paid or a Checkout that was canceled.

    You can be notified of such cases by passing the callback parameter `onError`:

    ```javascript
    function myErrorHandler(error) {checkoutInstance.unmount()switch (error.code) {
        case 'checkout-expired':// In this case a new Checkout session must be createdconst manifest = await yourFunctionToGetTheManifest()checkoutInstance = startCheckout(manifest, {
            onError: myErrorHandler
    })
        break
    case 'already-paid':
        document.write('Your order was already paid. Thank you.')
        break
    case 'checkout-canceled':
        document.write('Your checkout was canceled.')
        break
    default:
        document.write('Unable to process payment, please try again.')
    }
    }

    const checkoutInstance = startCheckout(manifest, {onError: myErrorHandler
    })
    ```

    The list of possible errors is further documented in [the reference](#section/Errors)

    #### How to use popup module

    If you want to integrate Checkout and display it in a popup this is what you need to do:

    1. Import easypay's Checkout SDK into you project:

    - See [Integrating in your page](tag#Integrating-in-your-page)

    2. Add a button with an id to your page:

    ```html
    <button id="checkout">Open Popup</button>
    ```

    ```js
    function initEasypayCheckoutSDK(manifest) {checkoutInstance = easypayCheckout.startCheckout(manifest, {
        id: 'checkout',
        display: 'popup',
    })
    }
    ```

    Result:

    <img width="746" alt="Checkout Popup Mode" src="https://user-images.githubusercontent.com/30448483/172881494-7265ff97-d142-4fee-9a2b-047b986dbefc.png">

    #### Changing Checkout's appearance

    Checkout supports a robust styling API that allows integrators to change its appearance in order to better blend it in their website.

    The list of customizations include:
    - An optional company logo to display in the header
    - The colors used in:
    - The background
    - Highlights (the more colorful sections of the page, originally blue)
    - Buttons
    - Input borders and backgrounds
    - Whether to use floating labels in the inputs
    - Whether to use box-shadow in the buttons
    - The font family used to render the text
    - The overall text size

    With a combination of some of these options, it's possible to change the Checkout entirely, fitting it in your website with ease.

    Example:

    ```js
    const checkoutInstance = easypayCheckout.startCheckout(manifest, {logoUrl: 'www.example.com/mylogo.png', accentColor: 'orange', buttonBackgroundColor: '#111', buttonBoxShadow: false, buttonBorderRadius: 5, inputBorderRadius: 5, inputBorderColor: '#000', inputBackgroundColor: '#ffe7c4', backgroundColor: '#eee', fontFamily: 'https://fonts.gstatic.com/s/raleway/v28/1Ptxg8zYS_SKggPN4iEgvnHyvveLxVvaorCIPrEVIT9d0c8.woff2',
    })
    ```

    Outcome:

    ![Checkout](https://easypay-cdn-delivery.s3.eu-central-1.amazonaws.com/docs/checkout/stylingapi.png)

    To see every individual option in detail, check the [reference](/checkout/reference#examples-of-each-appearance-property).

    ## SDK

    ### `startCheckout(manifest, [options])`

    #### Parameters:

    - `manifest`: The return object from the [checkout service](#operation/checkout-post!c=201&path=session&t=response).
    - `options`: An optional object containing any of the following properties:
      | Option           | Type       | Required | Default              | Description                                                                |
      | ---------------- | ---------- | -------- | -------------------- | -------------------------------------------------------------------------- |
      | `id`             | `string`   | no       | `'easypay-checkout'` | The id of the HTML element where the Checkout form should be included.     |
      | `onSuccess`      | `function` | no       | `() => {}`           | Callback function to be called when the Checkout is finished successfully. |
      | `onError`        | `function` | no       | `() => {}`           | Callback function to be called on (unrecoverable) errors.                  |
      | `onPaymentError` | `function` | no       | `() => {}`           | Callback function to be called on (recoverable) payment errors.            |
      | `onClose`        | `function` | no       | `undefined`          | Callback function to be called when the Checkout interaction is closed.    |
      | `testing`        | `boolean`  | no       | `false`              | Whether to use the testing API (`true`) or the production one (`false`).   |
      | `display`(1)     | `string`   | no       | `'inline'`           | The display style of the element that hosts the Checkout.                  |
      | `hideDetails`    | `boolean`  | no       | `false` | Whether to hide the details form or not. An expandable summary will be shown with the details, instead. |
      | `language`(2)    | `string`   | no       | `undefined`          | The language in which to display the Checkout.                             |
      | `logoUrl`               | `string`  | no       | `undefined`     | The merchant logo url to display in the Checkout.                           |
      | `backgroundColor`       | `string`  | no       | `'#ffffff'`     | The color used as the background of the Checkout page.                      |
      | `accentColor`           | `string`  | no       | `'#0d71f9'`     | The color used in highlights, as well as default buttons and input borders. |
      | `errorColor`            | `string`  | no       | `'#ff151f'`     | The color used for errors.                                                  |
      | `inputBackgroundColor`  | `string`  | no       | `'transparent'` | The color used for the input backgrounds.                                   |
      | `inputBorderColor`      | `string`  | no       | *accentColor*   | The color for input borders.                                                |
      | `inputBorderRadius`     | `number`  | no       | `50`            | The border radius for inputs, in `px`.                                      |
      | `inputFloatingLabel`    | `boolean` | no       | `true`          | Whether inputs should use floating labels.                                  |
      | `buttonBackgroundColor` | `string`  | no       | *accentColor*   | The color used for the button backgrounds.                                  |
      | `buttonBorderRadius`    | `number`  | no       | `50`            | The border radius for buttons, in `px`.                                     |
      | `buttonBoxShadow`       | `boolean` | no       | `true`          | Whether the buttons should have box-shadow.                                 |
      | `fontFamily`            | `string`  | no       | `'Overpass'`    | The font used for the text.                                                 |
      | `baseFontSize`          | `number`  | no       | `10`            | The value in `px` for the font size of the root element (`1rem`).           |

      ##### Options

      (1) `display` available values: `inline` (default) or `popup`.
      (2) `language` available values: `en` or `pt_PT`. If left `undefined`, a default language will be selected according to the customer's browser language.

    #### Return:

    - A `CheckoutInstance` object, containing the following method:
        - `unmount()`: Removes all Checkout form content and event listener.

    <br>

    #### Success handler:

    `onSuccess(checkoutInfo)`

    Receives an object with the following properties:

    | Property  | Type     | Description                                                                        |
    |-----------|----------|------------------------------------------------------------------------------------|
    | `id`      | `string` | The id of the Checkout session.                                                    |
    | `type`    | `string` | The payment type for this Checkout (`'single'`, `'frequent'` or `'subscription'`). |
    | `payment` | `Object` | Detailed information about the payment.                                            |

    Properties of the `payment` Object:

    **Note**: Some properties only appear with certain payment methods.

    | Property             | Method                   | Type     | Description                                                                      |
    |----------------------|--------------------------|----------|----------------------------------------------------------------------------------|
    | `id`                 | All                      | `string` | The payment's id.                                                                |
    | `method` (1)         | All                      | `string` | The payment method chosen by the customer.                                       |
    | `status` (2)         | All                      | `Object` | The status of the payment.                                                       |
    | `value`              | All                      | `number` | The order value, rounded to two decimal places. Not used in `frequent` payments. |
    | `cardType`           | Credit Card              | `string` | The credit card type (`'VISA'` or `'MasterCard'`).                               |
    | `lastFour`           | Credit Card              | `string` | The last four digits of the credit card.                                         |
    | `cardCountryCode`    | Credit Card              | `string` | The country code of the credit card.                                             |
    | `expirationDate` (3) | Credit Card / Multibanco | `string` | The expiration date of the card (Credit Card) or the payment (Multibanco).       |
    | `entity`             | Multibanco               | `string` | The Multibanco entity.                                                           |
    | `reference`          | Multibanco               | `string` | The Multibanco reference.                                                        |
    | `sddMandate` (4)     | Direct Debit             | `Object` | SEPA Direct Debit mandate.                                                       |
    | `iban`               | Virtual IBAN             | `string` | The created IBAN.                                                                |

    (1) Possible method values are the same as in the [Checkout creation](/checkout/reference#create-checkout-session).

    (2) Possible payment status values:
    <details><summary>Expand</summary>

    - `'authorised'`
    - `'deleted'`
    - `'enrolled'`
    - `'error'`
    - `'failed'`
    - `'paid'`
    - `'pending'`
    - `'success'`
    - `'tokenized'` (To be used later in `frequent` payments.)
    - `'voided'`
    </details>

    (3) Format of the expiration varies between Credit Card (`'MM/YY'` format) and Multibanco (`'Y-m-d H:i'`).

    (4) Properties of the `sddMandate` Object:
    <details><summary>Expand</summary>

    | Property        | Type     | Description                                                           |
    |-----------------|----------|-----------------------------------------------------------------------|
    | `accountHolder` | `string` | Name of the account holder.                                           |
    | `billingEntity` | `string` | The billing entity for the payments.                                  |
    | `countryCode`   | `string` | Country code of the bank account.                                     |
    | `email`         | `string` | The customer's e-mail address.                                        |
    | `iban`          | `string` | The IBAN.                                                             |
    | `id`            | `string` | The mandate's id.                                                     |
    | `maxNumDebits`  | `string` | The maximum number of debits allowed for this Direct Debit.           |
    | `name`          | `string` | The customer's name. May be different from the account holder's name. |
    | `phone`         | `string` | The customer's phone number.                                          |
    | `referenceAdc`  | `string` | The authorization reference.                                          |

    </details>

    <br>

    #### Error handler:

    `onError(error)`

    Receives an object with the following property:

    | Property | Type      | Description                                                               |
    |----------|-----------|---------------------------------------------------------------------------|
    | `code`   | `string ` | The type of error that occurred. See the table below for possible values. |

    The error `code` has the following possible values and recommended solutions:

    | Value               | Cause                             | Recommended solution                                                                                                                 |
    |---------------------|-----------------------------------|--------------------------------------------------------------------------------------------------------------------------------------|
    | `checkout-expired`  | The Checkout session has expired. | Create a new Checkout session with the server-to-server call and use the newly returned Manifest to instantiate a new Checkout form. |
    | `already-paid`      | The Checkout was already paid.    | Refresh the order information and confirm that it was paid. Give feedback to the user accordingly.                                   |
    | `checkout-canceled` | The Checkout was canceled.        | Create a new Checkout session with the server-to-server call and use the newly returned Manifest to instantiate a new Checkout form. |
    | `generic-error`     | An unspecified error occurred.    | Since the root cause is unclear, you can try creating a new session or signal an error to the user.                                  |

    <br>

    #### Payment error handler:

    `onPaymentError(error)`

    Signals the occurrence of a recoverable error during a payment attempt. These errors are informative and for logging/analysis purposes, as the user is allowed (and encouraged) to try the payment again with the same or other payment method.

    Receives an object with the following properties:

    | Property        | Type     | Description                                                               |
    | --------------- | -------- | ------------------------------------------------------------------------- |
    | `code`          | `string` | The type of error that occurred. See the table below for possible values. |
    | `paymentMethod` | `string` | The payment method for which the error happened.                          |
    | `checkout`      | `object` | On `payment-failure` errors, the Checkout object containing the payment information that had already been created. Has the same properties as the [onSuccess](/checkout/reference#success-handler) `checkoutInfo` object. |

    The error `code` has the following possible values and recommended solutions:

    | Value             | Cause                                                      | Recommended solution                           |
    | ----------------- | ---------------------------------------------------------- | ---------------------------------------------- |
    | `generic-error`   | There was an error before the payment process had started. | Allow the user to try again. If problem persists, report it to easypay.                                                       |
    | `payment-failure` | There was an error after the payment process had started.  | Allow the user to try again. If problem persists, use the attached `checkout` object to get details about the payment intent. |

    #### Examples of each appearance property

    ##### Changing the logo

    ```js
    const checkoutInstance = easypayCheckout.startCheckout(manifest, {
      logoUrl: 'www.example.com/mylogo.png'
    })
    ```

    Outcome:

    ![Checkout](https://easypay-cdn-delivery.s3.eu-central-1.amazonaws.com/docs/checkout/withlogo.png)

    ##### Changing the background color


    ```js
    const checkoutInstance = easypayCheckout.startCheckout(manifest, {
      backgroundColor: '#222222'
    })
    ```

    The text colors are automatically adjusted to shades of black or white depending on the background color, in order to achieve the best contrast possible.

    Outcome:

    ![Checkout](https://easypay-cdn-delivery.s3.eu-central-1.amazonaws.com/docs/checkout/withbgcolor.png)


    ##### Changing the accent color

    ```js
    const checkoutInstance = easypayCheckout.startCheckout(manifest, {
      accentColor: '#ffa861'
    })
    ```

    The text colors (over the accent, such as in buttons) are automatically adjusted to black or white, in order to achieve the best contrast possible.

    Outcome:

    ![Checkout](https://easypay-cdn-delivery.s3.eu-central-1.amazonaws.com/docs/checkout/withaccentcolor.png)


    ##### Changing the error color

    ```js
    const checkoutInstance = easypayCheckout.startCheckout(manifest, {
      errorColor: '#d18800'
    })
    ```

    Outcome:

    ![Checkout](https://easypay-cdn-delivery.s3.eu-central-1.amazonaws.com/docs/checkout/witherrorcolor.png)


    ##### Changing the input background color

    ```js
    const checkoutInstance = easypayCheckout.startCheckout(manifest, {
      inputBackgroundColor: '#001f3d'
    })
    ```

    Outcome:

    ![Checkout](https://easypay-cdn-delivery.s3.eu-central-1.amazonaws.com/docs/checkout/withinputbgcolor.png)


    ##### Changing the input border color

    ```js
    const checkoutInstance = easypayCheckout.startCheckout(manifest, {
      inputBorderColor: '#000000'
    })
    ```

    Outcome:

    ![Checkout](https://easypay-cdn-delivery.s3.eu-central-1.amazonaws.com/docs/checkout/withinputbordercolor.png)


    ##### Changing the input border radius

    ```js
    const checkoutInstance = easypayCheckout.startCheckout(manifest, {
      inputBorderRadius: 0
    })
    ```

    Outcome:

    ![Checkout](https://easypay-cdn-delivery.s3.eu-central-1.amazonaws.com/docs/checkout/withinputborderradius.png)


    ##### Using non-floating labels

    ```js
    const checkoutInstance = easypayCheckout.startCheckout(manifest, {
      inputFloatingLabel: false
    })
    ```

    Outcome:

    ![Checkout](https://easypay-cdn-delivery.s3.eu-central-1.amazonaws.com/docs/checkout/withoutfloatinglabels.png)


    ##### Changing button background color

    ```js
    const checkoutInstance = easypayCheckout.startCheckout(manifest, {
      buttonBackgroundColor: '#000000'
    })
    ```

    The button text color is automatically adjusted to black or white, in order to achieve the best contrast possible.

    Outcome:

    ![Checkout](https://easypay-cdn-delivery.s3.eu-central-1.amazonaws.com/docs/checkout/withbuttonbgcolor.png)


    ##### Changing button border radius

    ```js
    const checkoutInstance = easypayCheckout.startCheckout(manifest, {
      buttonBorderRadius: 0
    })
    ```

    Outcome:

    ![Checkout](https://easypay-cdn-delivery.s3.eu-central-1.amazonaws.com/docs/checkout/withbuttonborderradius.png)


    ##### Disabling button box-shadow

    ```js
    const checkoutInstance = easypayCheckout.startCheckout(manifest, {
      buttonBoxShadow: false
    })
    ```

    Outcome:

    ![Checkout](https://easypay-cdn-delivery.s3.eu-central-1.amazonaws.com/docs/checkout/withoutbuttonboxshadow.png)


    ##### Changing font family

    ```js
    const checkoutInstance = easypayCheckout.startCheckout(manifest, {
      fontFamily: 'cursive'
    })
    ```

    The `fontFamily` property can have three types of values:
    - Generic family name (e.g. `'sans-serif'`, `'serif'`, `'cursive'`)
    - Web safe font (e.g. `'arial'`, `'verdana'`)
    - Web font URL (e.g. `'https://fonts.gstatic.com/s/overpass/v12/qFda35WCmI96Ajtm83upeyoaX6QPnlo6_PPbM5qKl8Kuo8AzesE.woff2'`, must include the protocol `http`/`https`)

    Outcome:

    ![Checkout](https://easypay-cdn-delivery.s3.eu-central-1.amazonaws.com/docs/checkout/withfontfamily.png)


    ##### Changing base font size

    ```js
    const checkoutInstance = easypayCheckout.startCheckout(manifest, {
      baseFontSize: 8
    })
    ```

    Changes the value in `px` for the font size of the root element (`1rem`). The default value is `10`, so any value below will reduce the font size, while a value above will increase it.

    Besides changing the size of the text (while keeping the proportions), this setting changes most of the layout dimensions, effectively increasing or decreasing the scale.

    Outcome:

    ![Checkout](https://easypay-cdn-delivery.s3.eu-central-1.amazonaws.com/docs/checkout/withbasefontsize.png)
  name: Checkout
- description: Pay By Link introduction
  name: Pay By Link
paths:
  /single:
    get:
      description: Full report with all the single payments from your Account
      operationId: single-get
      parameters:
      - $ref: '#/components/parameters/PageQuery'
      - $ref: '#/components/parameters/RecordsPerPage'
      - $ref: '#/components/parameters/Type'
      - $ref: '#/components/parameters/ExpirationTime'
      - $ref: '#/components/parameters/Method'
      - $ref: '#/components/parameters/CustomerKey'
      - $ref: '#/components/parameters/Id'
      - $ref: '#/components/parameters/Key'
      - $ref: '#/components/parameters/Value'
      - $ref: '#/components/parameters/CreatedAt'
      responses:
        "200":
          $ref: '#/components/responses/ListSingle'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "412":
          $ref: '#/components/responses/PreConditionFailed'
        "500":
          $ref: '#/components/responses/InternalError'
      security:
      - accountId: []
        apiKey: []
      summary: Lists single payments
      tags:
      - Single Payment
    post:
      description: Creates a Single Payment
      operationId: single-post
      parameters: []
      requestBody:
        $ref: '#/components/requestBodies/CreateSinglePayment'
      responses:
        "201":
          $ref: '#/components/responses/CreateSinglePayment'
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Forbidden'
        "412":
          $ref: '#/components/responses/PreConditionFailed'
        "500":
          $ref: '#/components/responses/InternalError'
      summary: Create single payment
      tags:
      - Single Payment
  /single/{id}:
    delete:
      description: |-
        This endpoint allows for the deletion of a single payment identified by its unique ID. The DELETE operation performs the following actions based on the payment method:

          - MBWay and Credit Cards: Voids all authorizations.
          - Multibanco: Cancels the Multibanco Reference.
          - Direct Debit: Cancels the Direct Debit if the request is made before the cutoff hour(18:00 Europe/Lisbon).

        This operation ensures that all associated authorizations and references are properly handled and terminated according to the specified payment method.
      operationId: single-delete
      parameters:
      - description: Resource Identification
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalError'
      summary: Deletes single payment
      tags:
      - Single Payment
    get:
      description: Retrive a single payment details
      operationId: single-id-get
      parameters:
      - description: Resource Identification
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          $ref: '#/components/responses/GetSingleDetails'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalError'
      summary: Shows single payment details
      tags:
      - Single Payment
    parameters:
    - explode: false
      in: path
      name: id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    patch:
      description: Apply partial modifications to a single payment resource.
      operationId: single-update
      parameters:
      - description: Resource Identification
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/UpdateSingle'
      responses:
        "200":
          $ref: '#/components/responses/SingleUpdate'
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalError'
      summary: Update a single Payment
      tags:
      - Single Payment
  /frequent:
    get:
      description: Full report with all the frequent payments from your Account Id
      operationId: frequent-get
      parameters:
      - description: Page Number
        explode: true
        in: query
        name: page
        required: false
        schema:
          type: number
        style: form
      - description: "Limit records per page (Max: 100)"
        explode: true
        in: query
        name: records_per_page
        required: false
        schema:
          default: 20
          type: number
        style: form
      - description: Filter by expiration time interval (max 30 days)
        explode: true
        in: query
        name: expiration_time
        required: false
        schema:
          type: string
        style: form
      - description: Filter by method
        explode: true
        in: query
        name: method
        required: false
        schema:
          type: string
        style: form
      - description: Filter by customer key
        explode: true
        in: query
        name: customer
        required: false
        schema:
          type: string
        style: form
      - description: Filter by id
        explode: true
        in: query
        name: id
        required: false
        schema:
          type: string
        style: form
      - description: Filter by frequent key
        explode: true
        in: query
        name: key
        required: false
        schema:
          type: string
        style: form
      - description: Filter by created datetime interval (max 30 days)
        explode: true
        in: query
        name: created_at
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                Response:
                  value:
                    meta:
                      page:
                        current: 1
                        total: 2335
                      records:
                        total: 4669
                        per_page: 2
                      links:
                        first: ?page=1
                        prev: ""
                        next: ?page=2
                        last: ?page=2335
                    data:
                    - id: ab2f2eb6-3655-4951-98ae-36367d5f3727
                      key: Default Key
                      expiration_time: 2022-12-12T16:05:00Z
                      value: 10
                      customer:
                        id: 06300032-5cbd-4393-b73d-9f4c9875270a
                        name: '***'
                        email: ema***@example.com
                        phone: '***'
                        fiscal_number: '***'
                        key: Customer key
                        language: PT
                      method:
                        type: cc
                        status: waiting
                        url: https://cc.test.easypay.pt/start/ab2f2eb6-3655-4951-98ae-36367d5f3727
                      currency: EUR
                      max_value: 20.55
                      min_value: 2.32
                      unlimited_payments: false
                      created_at: 2022-11-23 12:03:29
                    - id: f15cee45-d5a5-469d-8cb2-79a6dcba977f
                      key: Default Key
                      expiration_time: 2022-12-12T16:05:00Z
                      value: 10
                      customer:
                        id: 48307582-91bc-4e15-a9f6-84633fbdd2c7
                        name: '***'
                        email: ema***@example.com
                        phone: '***'
                        fiscal_number: '***'
                        key: Customer key
                        language: PT
                      method:
                        type: dd
                        status: active
                        sdd_mandate:
                          id: "50124502381"
                          billing_entity: PT16103627
                          iban: PT500027**XX7833
                          key: Sdd Mandate key
                          name: Fre*** DD***
                          email: cus***@example.com
                          phone: 911***567
                          account_holder: Acc*** Exa***
                          country_code: PT
                          max_num_debits: "0"
                      currency: EUR
                      max_value: 20.55
                      min_value: 2.32
                      unlimited_payments: false
                      created_at: 2022-11-23 11:56:35
              schema:
                $ref: '#/components/schemas/frequent_get_200_response'
            application/xml:
              example: |-
                <report>
                   <meta>
                      <page>
                         <current>1</current>
                         <total>40</total>
                      </page>
                      <records>
                         <total>40</total>
                         <per_page>1</per_page>
                      </records>
                      <links>
                         <first>?page=1</first>
                         <prev></prev>
                         <next>?page=2</next>
                         <last>?page=40</last>
                      </links>
                   </meta>
                   <data>
                      <payment>
                         <id>4c67e74b-a256-4e0a-965d-97bf5d01bd50</id>
                         <key>Key Example</key>
                         <expiration_time>2017-12-12 16:05</expiration_time>
                         <customer>
                            <id>22ea3cc9-424b-489a-91b7-8955f643dc93</id>
                            <name>Customer Example</name>
                            <email>customer@example.com</email>
                            <phone>911234567</phone>
                            <phone_indicative>+351</phone_indicative>
                            <fiscal_number>PT123456789</fiscal_number>
                            <key>Customer Key Example</key>
                            <language>PT</language>
                         </customer>
                         <method>
                            <type>MB</type>
                            <status>active</status>
                            <entity>10611</entity>
                            <reference>987654321</reference>
                            <url>https://www.easypay.pt/_s/c11.php?e=10611&r=987654321&v=19&t_key=example+key&c=EN&l=EN</url>
                            <last_four>1234</last_four>
                            <card_type>VISA</card_type>
                            <expiration_date>01/22</expiration_date>
                            <alias>626E6AA2224D017917D839D4D39296B49441A1D10DA7E8DB6E7E1A4356DDE75429531BEB32190C6D736FA12C7A116CA5F3FCAEE72570406F51371A0CB6E14B6B</alias>
                            <sdd_mandate>
                               <id>12345678901</id>
                               <billing_entity>PT16103627</billing_entity>
                               <iban>PT50002700000001234567833</iban>
                               <key>Key Example</key>
                               <name>Name Example</name>
                               <email>customer@example.com</email>
                               <phone>911234567</phone>
                               <account_holder>Account Name Example</account_holder>
                               <country_code>PT</country_code>
                               <max_num_debits>12</max_num_debits>
                            </sdd_mandate>
                         </method>
                         <currency>EUR</currency>
                         <max_value>0</max_value>
                         <min_value>10</min_value>
                         <authorisations></authorisations>
                         <transactions></transactions>
                         <unlimited_payments>true</unlimited_payments>
                      </payment>
                   </data>
                </report>
          description: Success
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Internal Error
      summary: Lists frequent payments
      tags:
      - Frequent Payment
    post:
      description: |
        Frequent payments are repeatable transactions of varying sums without the client having to enter their payment details again.

        It is possible to limit the transferred sums by choosing minimum or maximum values, either to the total sum of the transactions or each individual transaction.

        Supported methods for frequent payments are: <i style="color:red">Credit Card, MB WAY, Multibanco, Direct Debit</i> and <i style="color:red">Virtual IBAN</i>
      parameters: []
      requestBody:
        $ref: '#/components/requestBodies/CreateFrequent'
      responses:
        "201":
          content:
            application/json:
              examples:
                Response from CC method:
                  value:
                    status: ok
                    message:
                    - Your request was successfully created
                    id: cd90455e-4ab3-42cf-a91c-cfc6e3afa65a
                    method:
                      type: cc
                      status: waiting
                      url: https://cc.test.easypay.pt/start/cd90455e-4ab3-42cf-a91c-cfc6e3afa65a
                    customer:
                      id: 68d07e52-3e04-493f-aaeb-bffe7ddb81ee
              schema:
                $ref: '#/components/schemas/_frequent_post_201_response'
            application/xml:
              example: |-
                <response>
                   <status>ok</status>
                   <message>
                      <string>Your request was successfully created</string>
                   </message>
                   <id>4c67e74b-a256-4e0a-965d-97bf5d01bd50</id>
                   <method>
                      <type>MB</type>
                      <status>waiting</status>
                      <entity>10611</entity>
                      <reference>987654321</reference>
                      <url>https://www.easypay.pt/_s/c11.php?e=10611&r=987654321&v=19&t_key=example+key&c=EN&l=EN</url>
                      <last_four>1234</last_four>
                      <card_type>VISA</card_type>
                      <expiration_date>01/22</expiration_date>
                      <alias>626E6AA2224D017917D839D4D39296B49441A1D10DA7E8DB6E7E1A4356DDE75429531BEB32190C6D736FA12C7A116CA5F3FCAEE72570406F51371A0CB6E14B6B</alias>
                      <sdd_mandate>
                         <id>12345678901</id>
                         <billing_entity>PT16103627</billing_entity>
                         <iban>PT50002700000001234567833</iban>
                         <key>Key Example</key>
                         <name>Name Example</name>
                         <email>customer@example.com</email>
                         <phone>911234567</phone>
                         <account_holder>Account Name Example</account_holder>
                         <country_code>PT</country_code>
                         <max_num_debits>12</max_num_debits>
                      </sdd_mandate>
                   </method>
                   <customer>
                      <id>22ea3cc9-424b-489a-91b7-8955f643dc93</id>
                   </customer>
                </response>
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Bad Request
        "403":
          $ref: '#/components/responses/Forbidden'
        "412":
          $ref: '#/components/responses/PreConditionFailed'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Internal Error
      summary: Create frequent payment
      tags:
      - Frequent Payment
  /frequent/{id}:
    delete:
      description: "3 times a day (10am, 3pm and 10pm) our system will attempt to\
        \ close your deleted MB payments.<br>All CC and MBW authorisations will be\
        \ deleted, releasing the funds.<br>All MBW operations waiting for user interaction\
        \ will be cancelled.<br>Before 6pm all Sepa Direct Debits waiting for file\
        \ processing will be cancelled."
      parameters:
      - description: Resource Identification
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Unauthorized
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Resource Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Internal Error
      summary: Deletes frequent payment
      tags:
      - Frequent Payment
    get:
      description: Retrieve a Frequent Payment details
      operationId: frequent-id-get
      parameters:
      - description: Resource Identification
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Response:
                  value:
                    id: ac1913a3-fd78-4822-8394-0a14f4169247
                    key: Default Key
                    expiration_time: 2022-12-12T16:05:00Z
                    customer:
                      id: fdc4bc82-8e45-4597-b46d-51d3285cf935
                      name: Robert Stuart
                      email: email@example.com
                      phone: "911234567"
                      key: Customer key
                      language: PT
                    method:
                      type: cc
                      status: active
                      url: https://cc.test.easypay.pt/start/ac1913a3-fd78-4822-8394-0a14f4169247
                      last_four: "0000"
                      card_type: VISA
                      expiration_date: 04/25
                    currency: EUR
                    max_value: 20
                    min_value: 2
                    unlimited_payments: false
                    created_at: 2022-11-23 13:16:58
              schema:
                $ref: '#/components/schemas/Frequent'
            application/xml:
              example: |-
                <payment>
                   <id>4c67e74b-a256-4e0a-965d-97bf5d01bd50</id>
                   <key>Example Key</key>
                   <expiration_time>2019-12-12T16:05:00Z</expiration_time>
                   <customer>
                      <id>22ea3cc9-424b-489a-91b7-8955f643dc93</id>
                      <name>Customer Example</name>
                      <email>customer@example.com</email>
                      <phone>911234567</phone>
                      <phone_indicative>+351</phone_indicative>
                      <fiscal_number>PT123456789</fiscal_number>
                      <key>Key Example</key>
                      <language>PT</language>
                   </customer>
                   <method>
                      <type>MB</type>
                      <status>active</status>
                      <entity>10611</entity>
                      <reference>987654321</reference>
                      <url>https://www.easypay.pt/_s/c11.php?e=10611&r=987654321&v=19&t_key=example+key&c=EN&l=EN</url>
                      <last_four>1234</last_four>
                      <card_type>VISA</card_type>
                      <expiration_date>01/22</expiration_date>
                      <alias>626E6AA2224D017917D839D4D39296B49441A1D10DA7E8DB6E7E1A4356DDE75429531BEB32190C6D736FA12C7A116CA5F3FCAEE72570406F51371A0CB6E14B6B</alias>
                      <sdd_mandate>
                         <id>12345678901</id>
                         <billing_entity>PT16103627</billing_entity>
                         <iban>PT50002700000001234567833</iban>
                         <key>Key Example</key>
                         <name>Name Example</name>
                         <email>customer@example.com</email>
                         <phone>911234567</phone>
                         <account_holder>Account Name Example</account_holder>
                         <country_code>PT</country_code>
                         <max_num_debits>12</max_num_debits>
                      </sdd_mandate>
                   </method>
                   <currency>EUR</currency>
                   <max_value>20</max_value>
                   <min_value>2</min_value>
                   <unlimited_payments>false</unlimited_payments>
                   <transactions>
                      <transaction>
                         <id>e71d9cd2-89dc-4662-a160-47def7c3ff82</id>
                         <key>chave capt</key>
                         <date>2019-06-28T16:52:59Z</date>
                         <values>
                            <requested>10.02</requested>
                            <paid>10.02</paid>
                            <fixed_fee>0</fixed_fee>
                            <variable_fee>0</variable_fee>
                            <tax>0</tax>
                            <transfer>10.02</transfer>
                         </values>
                         <transfer_date>2019-06-28T00:00:00Z</transfer_date>
                         <method>MBW</method>
                         <document_number>TEST12300000000</document_number>
                      </transaction>
                   </transactions>
                   <authorisations>
                      <authorisation>
                         <id>71fef07d-e566-4b53-a467-a5181dd804a7</id>
                         <status>success</status>
                         <key>chave capt</key>
                         <value>10.02</value>
                         <transactions></transactions>
                      </authorisation>
                   </authorisations>
                </payment>
              schema:
                $ref: '#/components/schemas/Payment_FrequentWithTransactions'
            text/csv:
              schema:
                $ref: '#/components/schemas/Payment_FrequentWithTransactions'
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
              schema:
                $ref: '#/components/schemas/StatusFailed'
            text/csv:
              schema:
                $ref: '#/components/schemas/StatusFailed'
          description: Unauthorized
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
              schema:
                $ref: '#/components/schemas/StatusFailed'
            text/csv:
              schema:
                $ref: '#/components/schemas/StatusFailed'
          description: Resource Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
              schema:
                $ref: '#/components/schemas/StatusFailed'
            text/csv:
              schema:
                $ref: '#/components/schemas/StatusFailed'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
              schema:
                $ref: '#/components/schemas/StatusFailed'
            text/csv:
              schema:
                $ref: '#/components/schemas/StatusFailed'
          description: Internal Error
      summary: Shows frequent payment details
      tags:
      - Frequent Payment
    patch:
      parameters:
      - description: Resource Identification
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_frequent__id__patch_request'
        description: Frequent Payment object to edit existing one
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                Full Response:
                  value:
                    method:
                      type: dd
                      sdd_mandate:
                        id: "12345678901"
                        iban: PT50002700000001234567833
                        key: Key Example
                        name: Name Example
                        email: customer@example.com
                        phone: "911234567"
                        account_holder: Acount Name Example
                        country_code: PT
                        max_num_debits: "12"
                        reference_adc: "987654321123"
                    status: ok
                    message:
                    - Your request was successfully created
                Response from CC Method:
                  value:
                    status: ok
                    message:
                    - Your request was successfully created
                    id: 86401037-1c8d-4cf3-9172-d0a29b17b9fd
                    method:
                      type: cc
                      status: waiting
                      entity: "59126"
                      reference: "810000618"
                      url: https://cc.test.easypay.pt/start/86401037-1c8d-4cf3-9172-d0a29b17b9fd
                    customer:
                      id: e7bb115b-3e59-441a-bdb4-60b0f066c2d0
              schema:
                $ref: '#/components/schemas/_frequent__id__patch_200_response'
            application/xml:
              example: |-
                <payment>
                   <id>4c67e74b-a256-4e0a-965d-97bf5d01bd50</id>
                   <key>Example Key</key>
                   <expiration_time>2019-12-12T16:05:00Z</expiration_time>
                   <customer>
                      <id>22ea3cc9-424b-489a-91b7-8955f643dc93</id>
                      <name>Customer Example</name>
                      <email>customer@example.com</email>
                      <phone>911234567</phone>
                      <phone_indicative>+351</phone_indicative>
                      <fiscal_number>PT123456789</fiscal_number>
                      <key>Key Example</key>
                      <language>PT</language>
                   </customer>
                   <method>
                      <type>MB</type>
                      <status>active</status>
                      <entity>10611</entity>
                      <reference>987654321</reference>
                      <url>https://www.easypay.pt/_s/c11.php?e=10611&r=987654321&v=19&t_key=example+key&c=EN&l=EN</url>
                      <last_four>1234</last_four>
                      <card_type>VISA</card_type>
                      <expiration_date>01/22</expiration_date>
                      <alias>626E6AA2224D017917D839D4D39296B49441A1D10DA7E8DB6E7E1A4356DDE75429531BEB32190C6D736FA12C7A116CA5F3FCAEE72570406F51371A0CB6E14B6B</alias>
                      <sdd_mandate>
                         <id>12345678901</id>
                         <billing_entity>PT16103627</billing_entity>
                         <iban>PT50002700000001234567833</iban>
                         <key>Key Example</key>
                         <name>Name Example</name>
                         <email>customer@example.com</email>
                         <phone>911234567</phone>
                         <account_holder>Account Name Example</account_holder>
                         <country_code>PT</country_code>
                         <max_num_debits>12</max_num_debits>
                      </sdd_mandate>
                   </method>
                   <currency>EUR</currency>
                   <max_value>20</max_value>
                   <min_value>2</min_value>
                   <unlimited_payments>false</unlimited_payments>
                </payment>
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Unauthorized
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Resource Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Internal Error
      summary: Updates frequent payment details
      tags:
      - Frequent Payment
  /frequent/authorisation/{id}:
    post:
      description: Create a new authorisation on a given Frequent Payment
      operationId: frequent-authorisation
      parameters:
      - description: Resource Identification
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              Create MBWAY Frequent Authorisation:
                value:
                  transaction_key: string
                  descriptive: Descriptive Example
                  value: 17.5
              Create CC Frequent Authorisation:
                value:
                  transaction_key: string
                  descriptive: Descriptive Example
                  value: 17.5
              Create CC Frequent Authorisation with 3DS authentication:
                value:
                  transaction_key: string
                  descriptive: Descriptive Example
                  value: 17.5
                  force_3ds: true
            schema:
              $ref: '#/components/schemas/frequent_authorisation_request'
        description: Payment configuration object to generate a payment
        required: true
      responses:
        "201":
          content:
            application/json:
              examples:
                Response:
                  value:
                    id: 4c67e74b-a256-4e0a-965d-97bf5d01bd50
                    status: ok
                    message:
                    - Your request was successfully created
              schema:
                $ref: '#/components/schemas/frequent_authorisation_201_response'
            application/xml:
              example: |-
                <response>
                   <status>ok</status>
                   <message>
                      <string>Your request was successfully created</string>
                   </message>
                   <id>3dc66505-3117-4b62-b2b7-814aec7f0e84</id>
                </response>
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Bad Request
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          content:
            application/json:
              examples:
                Response:
                  value:
                    status: error
                    message:
                    - no frequent found
              schema:
                $ref: '#/components/schemas/StatusFailed'
          description: Not Found
        "412":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Precondition Failed
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Internal Error
      summary: Request Authorisation
      tags:
      - Frequent Payment
  /config:
    get:
      parameters: []
      responses:
        "200":
          content:
            application/json:
              examples:
                Response:
                  value:
                    generic: https://www.easypay.pt/generic
                    authorisation: https://www.easypay.pt/authorisation
                    transaction: https://www.easypay.pt/transaction
                    visa_fwd: https://www.easypay.pt/visa_fwd
                    visa_detail: https://www.easypay.pt/visa_detail
                    account: b2080452-bad1-4455-8ae7-9f5ea552a274
                    client_id: EASYP030002
                    payment_methods:
                    - mb
              schema:
                $ref: '#/components/schemas/Config_Details'
          description: Success
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Internal Error
      summary: Get Account Config
      tags:
      - Config
    patch:
      parameters: []
      requestBody:
        content:
          application/json:
            examples: {}
            schema:
              $ref: '#/components/schemas/_config_patch_request'
        description: Payment configuration object to generate a payment
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                Response:
                  value:
                    generic: https://www.easypay.pt/generic
                    authorisation: https://www.easypay.pt/authorisation
                    transaction: https://www.easypay.pt/transaction
                    visa_fwd: https://www.easypay.pt/visa_fwd
                    visa_detail: https://www.easypay.pt/visa_detail
                    account: b2080452-bad1-4455-8ae7-9f5ea552a274
                    client_id: EASYP030002
                    payment_methods:
                    - mb
              schema:
                $ref: '#/components/schemas/Config_Details'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Bad Request
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Internal Error
      summary: Patch Account Config
      tags:
      - Config
      x-codegen-request-body-name: body
  /capture:
    get:
      parameters:
      - $ref: '#/components/parameters/Cursor'
      - $ref: '#/components/parameters/Limit'
      - $ref: '#/components/parameters/CreatedAt'
      - $ref: '#/components/parameters/UpdatedAt'
      responses:
        "200":
          $ref: '#/components/responses/ListCaptures'
        "401":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "412":
          $ref: '#/components/responses/PreConditionFailed'
        "500":
          $ref: '#/components/responses/InternalError'
      summary: List captures
      tags:
      - Payment Generic Operations
  /capture/{id}:
    get:
      parameters:
      - description: Resource Identification
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          $ref: '#/components/responses/GetCaptureDetails'
        "401":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalError'
      summary: Shows capture details
      tags:
      - Payment Generic Operations
    post:
      parameters:
      - description: Resource Identification
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              Request:
                value:
                  transaction_key: key example
                  capture_date: 2022-11-11
                  account:
                    id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                  splits:
                  - split_key: example key
                    split_descriptive: string
                    value: 0.01
                    account:
                      id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                    margin_value: 0.01
                    margin_account:
                      id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                  mbway_sdk:
                    purchase_token: 626E6AA2224D017917D839D4D39296B49441A1D10DA7E8DB6E7E1A4356DDE75429531BEB32190C6D736FA12C7A116CA5F3FCAEE72570406F51371A0CB6E14B6B
                    initial_timestamp: 2018-01-01 23:59:59
                    merchant_operation_id: TESTACCOUNT5436
                    payload: "{'purchase_token':'EDEB342D3588DDDEEE3E070476E72A6B222E3456C1C825D3E89A734005CE81F69986045424984F55B3233CBFD090A8A564071BBB493F34C4849C964','initial_timestamp':'2018-09-20T10:46:08+01:00','merchant_operation_id':'TESTACCOUNT5436','payload':{'amount':1000,'currencyCode':'9782'}}"
                  force_3ds: false
                  descriptive: string
                  value: 20.55
            schema:
              $ref: '#/components/schemas/_capture__id__post_request'
        description: Payment configuration object to generate a payment
        required: true
      responses:
        "201":
          content:
            application/json:
              examples:
                Response:
                  value:
                    status: ok
                    message:
                    - Your request was successfully created
                    id: 522b83f3-cd98-48ee-8e40-9a94d6b79eb1
              schema:
                $ref: '#/components/schemas/_capture__id__post_201_response'
            application/xml:
              example: |-
                <response>
                   <status>ok</status>
                   <message>
                      <string>Your request was successfully created</string>
                   </message>
                   <id>d01a2919-ffa6-4f81-a208-7f153249fd48</id>
                </response>
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Bad Request
        "403":
          $ref: '#/components/responses/Forbidden'
        "412":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Precondition Failed
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Unprocessable Entity
        "428":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Precondition Required
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Internal Error
      summary: "Captures a Single Auth, Frequent and Frequent Auth"
      tags:
      - Payment Generic Operations
  /capture/{capture-uuid}/splits/{capture-split-uuid}:
    patch:
      parameters:
      - description: Capture Identification
        explode: false
        in: path
        name: capture-uuid
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Capture Split Identification
        explode: false
        in: path
        name: capture-split-uuid
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_capture__capture_uuid__splits__capture_split_uuid__patch_request'
        description: Payment configuration object to generate a payment
      responses:
        "201":
          content:
            application/json:
              examples:
                Response:
                  value:
                    status: ok
                    message:
                    - Your request was successfully created
              schema:
                $ref: '#/components/schemas/_capture__capture_uuid__splits__capture_split_uuid__patch_201_response'
            application/xml:
              example: |-
                <response>
                   <status>ok</status>
                   <message>
                      <string>Your request was successfully created</string>
                   </message>
                </response>
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Bad Request
        "403":
          $ref: '#/components/responses/Forbidden'
        "412":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Precondition Failed
        "428":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Precondition Required
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Internal Error
      summary: Updates the split of a capture
      tags:
      - Payment Generic Operations
  /authorisation/{id}:
    get:
      description: Retrieves the details of an authorisation
      parameters:
      - description: Resource Identification
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Response:
                  value:
                    id: ef7d7bc6-6c1a-4193-a33e-d9e7bba29727
                    status: success
                    message: Operação concluída com sucesso
                    key: Example Key
                    customer:
                      id: 88702340-8aa2-44b5-8e6c-dadbd25538c7
                      name: Robert Stuart
                      email: email@example.com
                      phone: "911234567"
                      key: Customer key
                      language: PT
                    method:
                      type: cc
                      status: active
                      url: https://test.easypay.pt/_s/cof/c11_freq.php?e=59126&r=810009391&c=PT&l=PT&ep_k1=d2152db6-2e36-4436-9a46-f8cf4b7aca43
                      last_four: "0000"
                      card_type: VISA
                      expiration_date: 03/24
                    currency: EUR
                    value: 20
                    value_captured: 20
                    transactions:
                    - id: 760d105e-950d-4b41-8017-cad840ca3baa
                      key: Example Key
                      date: 2022-11-25T10:30:14Z
                      values:
                        requested: -1
                        paid: -1
                        fixed_fee: 1
                        variable_fee: 0
                        tax: 0.23
                        transfer: -2.23
                      transfer_date: 2022-11-25T00:00:00Z
                      transfer_batch: ""
                      method: fp
                      document_number: MARCEL0208220453362220221125103014
                      descriptive: ""
              schema:
                $ref: '#/components/schemas/_authorisation__id__get_200_response'
            application/xml:
              example: |-
                <authorisation>
                   <currency>EUR</currency>
                   <customer>
                      <email>customer@example.com</email>
                      <fiscal_number>PT123456789</fiscal_number>
                      <id>22ea3cc9-424b-489a-91b7-8955f643dc93</id>
                      <message>Operação concluída com sucesso</message>
                      <key>Key Example</key>
                      <language>PT</language>
                      <name>Customer Example</name>
                      <phone>911234567</phone>
                      <phone_indicative>+351</phone_indicative>
                   </customer>
                   <id>4c67e74b-a256-4e0a-965d-97bf5d01bd50</id>
                   <key>Example Key</key>
                   <message>string</message>
                   <method>
                      <card_type>VISA</card_type>
                      <entity>10611</entity>
                      <expiration_date>01/22</expiration_date>
                      <last_four>1234</last_four>
                      <reference>987654321</reference>
                      <status>pending</status>
                      <type>MB</type>
                      <url>https://www.easypay.pt/_s/c11.php?e=10611&amp;r=987654321&amp;v=19&amp;t_key=example+key&amp;c=EN&amp;l=EN</url>
                   </method>
                   <status>pending</status>
                   <transations>
                      <transaction>
                         <date>2017-12-12 10:10:59</date>
                         <id>4c67e74b-a256-4e0a-965d-97bf5d01bd50</id>
                         <key>Example Key</key>
                         <method>MB</method>
                         <transfer_date>2017-12-12</transfer_date>
                         <values>
                            <fixed_fee>0.3</fixed_fee>
                            <paid>15.63</paid>
                            <requested>15.63</requested>
                            <tax>2.03</tax>
                            <transfer>10</transfer>
                            <variable_fee>3.3</variable_fee>
                         </values>
                      </transaction>
                   </transations>
                   <value>10</value>
                   <value_captured>10</value_captured>
                </authorisation>
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Unauthorized
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Resource Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Internal Error
      summary: Shows authorisation details
      tags:
      - Payment Generic Operations
  /checkout/{id}:
    delete:
      description: This cancels the Checkout and deletes the payment associated with
        it if possible.
      parameters:
      - description: Resource Identification
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Unauthorized
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Resource Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Internal Error
      security:
      - accountId: []
        apiKey: []
      summary: Cancels a checkout
      tags:
      - Checkout
    get:
      parameters:
      - description: Resource Identification
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Checkout_Details'
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Unauthorized
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Resource Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Internal Error
      security:
      - accountId: []
        apiKey: []
      summary: Shows checkout details
      tags:
      - Checkout
  /checkout:
    post:
      description: Creates a Checkout Session.
      operationId: checkout-post
      parameters: []
      requestBody:
        content:
          application/json:
            examples:
              Post Subscription Payment:
                value:
                  type:
                  - subscription
                  payment:
                    methods:
                    - dd
                    type: sale
                    sdd_mandate:
                      iban: PT50002700000001234567833
                      name: Name Example
                      email: customer@example.com
                      phone: "912997715"
                      account_holder: Acount Name Example
                      key: Sdd Mandate key
                    capture:
                      descriptive: Purchase in MyStore
                    expiration_time: 2022-10-12 16:05
                    currency: EUR
                    key: Example Key
                    frequency: 1Y
                    max_captures: 10
                    start_time: 2022-10-12 16:05
                    failover: true
                    capture_now: true
                    retries: 2
                  order:
                    items:
                    - description: T-shirt
                      quantity: 1
                      key: t-shirt
                      value: 12.5
                    - description: Gloves
                      quantity: 1
                      key: gloves
                      value: 7
                    key: order-123
                    value: 19.5
                  customer:
                    name: Customer Example
                    email: customer@example.com
                    phone: "911234567"
                    phone_indicative: "+351"
                    fiscal_number: PT123456789
                    key: Key Example
                    language: PT
              Post Frequent Payment:
                value:
                  type:
                  - frequent
                  payment:
                    methods:
                    - dd
                    type: sale
                    sdd_mandate:
                      iban: PT50002700000001234567833
                      name: Name Example
                      email: customer@example.com
                      phone: "912997715"
                      account_holder: Acount Name Example
                      key: Sdd Mandate key
                    capture:
                      descriptive: Purchase in MyStore
                    expiration_time: 2022-10-12 16:05
                    currency: EUR
                    key: Example Key
                    max_value: 20
                    min_value: 2
                    unlimited_payments: false
                  order:
                    items:
                    - description: T-shirt
                      quantity: 1
                      key: t-shirt
                      value: 12.5
                    - description: Gloves
                      quantity: 1
                      key: gloves
                      value: 7
                    key: order-123
                    value: 19.5
                  customer:
                    name: Customer Example
                    email: customer@example.com
                    phone: "911234567"
                    phone_indicative: "+351"
                    fiscal_number: PT123456789
                    key: Key Example
                    language: PT
              Post Single Payment:
                value:
                  type:
                  - single
                  payment:
                    methods:
                    - dd
                    type: sale
                    sdd_mandate:
                      iban: PT50002700000001234567833
                      name: Name Example
                      email: customer@example.com
                      phone: "912997715"
                      account_holder: Acount Name Example
                      key: Sdd Mandate key
                    capture:
                      descriptive: Purchase in MyStore
                    expiration_time: 2022-10-12 16:05
                    currency: EUR
                    key: Example Key
                  order:
                    items:
                    - description: T-shirt
                      quantity: 1
                      key: t-shirt
                      value: 10.5
                    - description: Gloves
                      quantity: 1
                      key: gloves
                      value: 10.5
                    key: order-123
                    value: 21
                  customer:
                    name: Customer Example
                    email: customer@example.com
                    phone: "911234567"
                    phone_indicative: "+351"
                    fiscal_number: PT123456789
                    key: Key Example
                    language: PT
              Full example:
                value:
                  type:
                  - single
                  - frequent
                  - subscription
                  payment:
                    methods:
                    - mb
                    - cc
                    - mbw
                    - vi
                    - uf
                    - sc
                    type: sale
                    capture:
                      transaction_key: string
                      capture_date: 2024-06-30
                      account:
                        id: 22ea3cc9-424b-489a-91b7-8955f643dc93
                      splits:
                      - split_key: string
                        split_descriptive: Descriptive Example
                        value: 1
                        account:
                          id: 22ea3cc9-424b-489a-91b7-8955f643dc93
                        margin_value: 0.1
                        margin_account:
                          id: 22ea3cc9-424b-489a-91b7-8955f643dc93
                      descriptive: Descriptive Example
                    expiration_time: 2017-12-12 16:05
                    currency: EUR
                    key: Example Key
                    sdd_mandate:
                      id: "12345678901"
                      iban: PT50002700000001234567833
                      key: Key Example
                      name: Name Example
                      email: customer@example.com
                      phone: "911234567"
                      account_holder: Acount Name Example
                      country_code: PT
                      max_num_debits: "12"
                    max_value: 20
                    min_value: 2
                    unlimited_payments: false
                    frequency: 1D
                    max_captures: 10
                    start_time: 2017-12-12 16:05
                    failover: true
                    capture_now: true
                    retries: 2
                  order:
                    items:
                    - description: Item in Shopping Cart
                      quantity: 2
                      key: Example Key
                      value: 17.5
                    key: Example Key
                    value: 17.5
                  config:
                  - null
                  customer:
                    id: 22ea3cc9-424b-489a-91b7-8955f643dc93
                    name: Customer Example
                    email: customer@example.com
                    phone: "911234567"
                    phone_indicative: "+351"
                    fiscal_number: PT123456789
                    key: Key Example
                    language: PT
            schema:
              $ref: '#/components/schemas/checkout_post_request'
        description: Checkout request details
        required: true
      responses:
        "201":
          content:
            application/json:
              examples:
                example-1:
                  value:
                    id: 10d3a41a-c9c4-486e-8da7-9490e5f097b7
                    session: XkhRqoQtbBakUnjEJA4lYSCtboITWSb-ijxRMWKj7C9ormZ_4JubSB3qjy4XuORJFSrR0OsQ0ypE2Ws9Zl0N2REmR0CMNewH8ghyR1NBnPzDJ1AAuj9LvAhdv9SS-MXRh20_jmVz0MTcaD6E9WfHMiGSyej8eLMaE2hbSHn8DAO7kUSy8nzIIIUbR3pbpEpwxeO6fgHB3hdLGWrGUjeRq-Dq1Q_RF_ZWDPOGPwehXb3YRTatcjBG_2yoyGWWBaABOlkOx_uLaZIdrHMRXaDwLFDoN-eiu3BH1KKrut6pcE_Gc6laTf2AINBQIuSzKHLT4MFpTkrxdfPiD67w8aENm2HuzFc08I46KxdQG-2dSN522jZWDC2z4r4HFZ8LWVlDPuLbpui-WoWOJrJAnW3nPhyaKfUeu4KuU3BKYtJrtOoqs5ingkKWen0jm6AuFeZDeYRlRtj19S6d3P4q7Om3PVwil7c0K0brq31SmLHZdvsG_gHOPSZ6qrQy_95NZO0x934tBIUK91C1Bnm1Z9wA2Pp2hIeprOXMuZXkuanODro=
                    config: null
              schema:
                $ref: '#/components/schemas/checkout_post_201_response'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Bad Request
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Internal Error
      security:
      - accountId: []
        apiKey: []
      summary: Create Checkout
      tags:
      - Checkout
  /subscription:
    get:
      description: Full report with all the subscriptions payments from your Account
        Id
      parameters:
      - description: Page Number
        explode: true
        in: query
        name: page
        required: false
        schema:
          type: number
        style: form
      - description: "Limit records per page (Max: 100)"
        explode: true
        in: query
        name: records_per_page
        required: false
        schema:
          default: 20
          type: number
        style: form
      - description: Filter by expiration time interval (max 30 days)
        explode: true
        in: query
        name: expiration_time
        required: false
        schema:
          type: string
        style: form
      - description: Filter by method
        explode: true
        in: query
        name: method
        required: false
        schema:
          type: string
        style: form
      - description: Filter by customer key
        explode: true
        in: query
        name: customer
        required: false
        schema:
          type: string
        style: form
      - description: Filter by id
        explode: true
        in: query
        name: id
        required: false
        schema:
          type: string
        style: form
      - description: Filter by subscription key
        explode: true
        in: query
        name: key
        required: false
        schema:
          type: string
        style: form
      - description: Filter by created datetime interval (max 30 days)
        explode: true
        in: query
        name: created_at
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                Response:
                  value:
                    meta:
                      page:
                        current: 1
                        total: 827
                      records:
                        total: 1654
                        per_page: 2
                      links:
                        first: ?page=1
                        prev: ""
                        next: ?page=2
                        last: ?page=827
                    data:
                    - id: 7a3b9c3b-8bc8-4aa9-b67b-43b7a8e0377f
                      key: Default Key
                      expiration_time: 2022-12-04T12:00:00Z
                      start_time: 2022-12-04T12:00:00Z
                      frequency: 1Y
                      retries: 2
                      max_captures: 2
                      failover: false
                      capture_now: false
                      customer:
                        id: 93a0b7e4-d0ae-4da2-bdcf-c9a735e44a9a
                        name: '***'
                        email: cus***@example.com
                        phone: '***'
                        fiscal_number: '***'
                        key: Customer Key
                        language: PT
                      method:
                        type: DD
                        status: active
                        sdd_mandate:
                          id: "50124440050"
                          billing_entity: PT16103627
                          iban: PT500027**XX7833
                          key: Sdd Mandate key
                          name: Fre*** DD***
                          email: cus***@example.com
                          phone: 911***567
                          account_holder: Acc*** Exa***
                          country_code: PT
                          max_num_debits: "0"
                      currency: EUR
                      value: 17.5
                      created_at: 2022-11-22 15:29:54
                    - id: 2e41fc8e-76ee-4533-a296-809c7bfbc811
                      key: ""
                      expiration_time: ""
                      start_time: 2022-12-04T12:00:00Z
                      frequency: 1Y
                      retries: 0
                      max_captures: 2
                      failover: false
                      capture_now: false
                      customer:
                        id: 33058cb5-ca1e-4314-b4ae-c6a86b218157
                        language: ""
                      method:
                        type: CC
                        status: deleted
                        url: https://cc.test.easypay.pt/start/2e41fc8e-76ee-4533-a296-809c7bfbc811
                      currency: EUR
                      value: 17.5
                      created_at: 2022-11-22 15:19:51
              schema:
                $ref: '#/components/schemas/_subscription_get_200_response'
          description: Success
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Internal Error
      summary: List subscription payments
      tags:
      - Subscription Payment
    post:
      description: |-
        Subscriptions are periodic payments of the same amount of money, configured through Checkout or our Payments API.

        Subscriptions support a number of different frequencies, ranging from daily to once every three years. Their last payment can be determined by the end date of the subscription, as well as the total number of payments captured.

        They also support a configurable number of retries for each capture in case of failure, as well as falling back to another (single) payment method if the recurring one is not successful.

        Supported methods for subscriptions are: <i style="color:red">Credit Card</i> and <i style="color:red">Direct Debit.</i>
      parameters: []
      requestBody:
        content:
          application/json:
            examples:
              Create a Subscription with a CC payment method:
                value:
                  expiration_time: 2022-12-04 12:00
                  max_captures: 2
                  start_time: 2022-12-04 12:00
                  value: 17.55
                  frequency: 1D
                  method: cc
              Create a Subscription with a DD payment method:
                value:
                  max_captures: 2
                  start_time: 2022-12-04 12:00
                  value: 17.5
                  frequency: 1Y
                  method: dd
                  sdd_mandate:
                    iban: PT50002700000001234567833
                    name: Frequent Payment DD
                    email: customer@example.com
                    phone: "911234567"
                    account_holder: Account Name Example
                    key: Sdd Mandate key
              Full filled example:
                value:
                  frequent_id: 4c67e74b-a256-4e0a-965d-97bf5d01bd50
                  capture:
                    transaction_key: string
                    account:
                      id: 22ea3cc9-424b-489a-91b7-8955f643dc93
                    descriptive: Descriptive Example
                  expiration_time: 2017-12-12 16:05
                  currency: EUR
                  customer:
                    id: 22ea3cc9-424b-489a-91b7-8955f643dc93
                    name: Customer Example
                    email: customer@example.com
                    phone: "911234567"
                    phone_indicative: "+351"
                    fiscal_number: PT123456789
                    key: Key Example
                    language: PT
                  key: Example Key
                  value: 17.5
                  frequency: 1D
                  max_captures: 10
                  start_time: 2017-12-12 16:05
                  failover: true
                  capture_now: true
                  retries: 2
                  method: cc
                  sdd_mandate:
                    id: "12345678901"
                    iban: PT50002700000001234567833
                    key: Key Example
                    name: Name Example
                    email: customer@example.com
                    phone: "911234567"
                    account_holder: Acount Name Example
                    country_code: PT
                    max_num_debits: "12"
            schema:
              $ref: '#/components/schemas/_subscription_post_request'
        description: Payment configuration object to generate a payment
        required: true
      responses:
        "201":
          content:
            application/json:
              examples:
                Expect Response from cc payment method:
                  value:
                    status: ok
                    message:
                    - Your request was successfully created
                    id: b3dd33b8-ace7-4239-89ef-c9bdf4fdb14b
                    method:
                      type: CC
                      status: waiting
                      url: https://cc.test.easypay.pt/start/b3dd33b8-ace7-4239-89ef-c9bdf4fdb14b
                    customer:
                      id: f80e90fb-9cc5-40c2-832f-0497a2092f82
                Expect Response from dd payment method:
                  value:
                    status: ok
                    message:
                    - Your request was successfully created
                    id: b4d8c977-9e71-48b3-a251-5ecb49ee69c7
                    method:
                      type: DD
                      status: active
                      sdd_mandate:
                        id: "50124435919"
                        billing_entity: PT16103627
                        iban: PT50002700000001234567833
                        key: Sdd Mandate key
                        name: Frequent Payment DD
                        email: customer@example.com
                        phone: "911234567"
                        account_holder: Account Name Example
                        country_code: PT
                        reference_adc: "50124435919"
                    customer:
                      id: e9e62539-67b2-4180-97e3-38e706d64138
              schema:
                $ref: '#/components/schemas/_subscription_post_201_response'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Bad Request
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Internal Error
      summary: Create subscription payment
      tags:
      - Subscription Payment
      x-codegen-request-body-name: body
  /subscription/{id}:
    delete:
      parameters:
      - description: Resource Identification
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Unauthorized
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Resource Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Internal Error
      summary: Deletes subscription payment
      tags:
      - Subscription Payment
    get:
      parameters:
      - description: Resource Identification
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Response:
                  value:
                    id: 7a3b9c3b-8bc8-4aa9-b67b-43b7a8e0377f
                    key: Default Key
                    expiration_time: 2022-12-04T12:00:00Z
                    start_time: 2022-12-04T12:00:00Z
                    frequency: 1Y
                    retries: 2
                    max_captures: 2
                    failover: false
                    capture_now: false
                    customer:
                      id: 93a0b7e4-d0ae-4da2-bdcf-c9a735e44a9a
                      email: customer@example.com
                      key: Customer Key
                      language: PT
                    method:
                      type: DD
                      status: active
                      sdd_mandate:
                        id: "50124440050"
                        billing_entity: PT16103627
                        iban: PT50002700XXXXXXXXXXX7833
                        key: Sdd Mandate key
                        name: Frequent Payment DD
                        email: customer@example.com
                        phone: "911234567"
                        account_holder: Account Name Example
                        country_code: PT
                        max_num_debits: "0"
                    currency: EUR
                    value: 17.5
                    created_at: 2022-11-22 15:29:54
              schema:
                $ref: '#/components/schemas/_subscription__id__get_200_response'
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Unauthorized
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Resource Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Internal Error
      summary: Shows subscription payment details
      tags:
      - Subscription Payment
    patch:
      description: Retrieves the subscription payment details.
      parameters:
      - description: Resource Identification
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_subscription__id__patch_request'
        description: Subscription Payment object to edit existing one
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                Response:
                  value:
                    status: ok
                    message:
                    - Your request was successfully created
                    id: 63f3f5a0-1543-4ed7-9b44-7f0f802ff476
                    method:
                      type: dd
                      status: inactive
                    customer:
                      id: d927731a-8684-4aa9-bc50-f691d666c117
              schema:
                $ref: '#/components/schemas/_subscription__id__patch_200_response'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Unauthorized
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Resource Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Internal Error
      summary: Updates subscription payment details
      tags:
      - Subscription Payment
      x-codegen-request-body-name: body
  /void/{id}:
    get:
      parameters:
      - description: Resource Identification
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Response:
                  value:
                    status: success
                    id: 9ef96025-47e3-4007-b1a4-b6915099668b
                    transaction_key: example_key
                    descriptive: Descriptive Example
                    authorisation:
                      id: 848cb022-bc78-44e0-9b97-5d7b810a637a
                      status: success
                      message: "Sucesso: Operação concluída com sucesso."
                      key: Robertos Key
                      customer:
                        id: aaaa3891-a0f1-4589-a417-56ca595815e0
                        name: Alucard
                        email: roberto@example.com
                        phone: "911234567"
                        language: PT
                      method:
                        type: MBW
                        status: active
                      currency: EUR
                      value: 200
              schema:
                $ref: '#/components/schemas/_void__id__get_200_response'
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Unauthorized
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Resource Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Internal Error
      summary: Shows void details
      tags:
      - Payment Generic Operations
    post:
      parameters:
      - description: Resource Identification
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_void__id__post_request'
        description: Void details
        required: true
      responses:
        "201":
          content:
            application/json:
              examples:
                Response:
                  value:
                    status: ok
                    message:
                    - Your request was successfully created
                    id: 9ef96025-47e3-4007-b1a4-b6915099668b
              schema:
                $ref: '#/components/schemas/_capture__id__post_201_response'
            application/xml:
              example: |-
                <response>
                   <status>ok</status>
                   <message>
                      <string>Your request was successfully created</string>
                   </message>
                   <id>3dc66505-3117-4b62-b2b7-814aec7f0e84</id>
                </response>
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Bad Request
        "403":
          $ref: '#/components/responses/Forbidden'
        "412":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Precondition Failed
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Internal Error
      summary: Voids a Single Auth or Frequent Auth
      tags:
      - Payment Generic Operations
      x-code-samples:
      - lang: PHP
        source: |-
          $id = "dc835144-1f7d-4a55-a5d5-c6617f990c7b"

          $body = [
              "transaction_key" => "Void Key Example",
              "descriptive" => "Descriptive Example",
          ];

          $headers = [
              "AccountId: 5fe2e102-dfee-4880-bd87-1d9a6ec6fdd2",
              "ApiKey: b0ea270d-9f50-4bbc-af58-44fed3df4b2b",
              'Content-Type: application/json',
          ];

          $url = "https://api.prod.easypay.pt/2.0/void/" . $id

          $curlOpts = [
              CURLOPT_URL => $url,
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_POST => 1,
              CURLOPT_TIMEOUT => 60,
              CURLOPT_POSTFIELDS => json_encode($body),
              CURLOPT_HTTPHEADER => $headers,
          ];

          $curl = curl_init();
          curl_setopt_array($curl, $curlOpts);
          $response_body = curl_exec($curl);
          curl_close($curl);
          $response = json_decode($response_body, true);
      - lang: CURL
        source: |
          curl -XPOST -H "AccountId: 5fe2e102-dfee-4880-bd87-1d9a6ec6fdd2" -H "ApiKey: b0ea270d-9f50-4bbc-af58-44fed3df4b2b" \
          -d '{"transaction_key": "Void Key Example","descriptive": "Descriptive Example"}' \
          https://api.prod.easypay.pt/2.0/void/dc835144-1f7d-4a55-a5d5-c6617f990c7b
      x-codegen-request-body-name: body
  /report/ledger:
    get:
      description: |-
        The /reports/ledger endpoint provides access to detailed reports of ledger entries within the Easypay reconciliation system. This endpoint retrieves comprehensive financial data for each transaction recorded in the ledger, including captures, refunds, fees, and other financial operations, and it was designed to help users generate precise and relevant financial reports, aiding in effective account reconciliation and financial management.

        By using this endpoint, clients can obtain an itemized list of all ledger entries, including relevant financial details such as transaction amounts, fees, taxes, and net transferred amounts. The data returned by this endpoint is ideal for accounting, auditing, and financial analysis purposes, as it ensures transparency and accuracy in financial reporting.
      parameters:
      - $ref: '#/components/parameters/Cursor'
      - description: "The maximum number of records to return in a single response.\
          \ This value determines how many items are included in each page of the\
          \ results. The default value is 100, and the maximum allowable limit is\
          \ 100. If not specified, the default limit will be used. Adjust the limit\
          \ to control the size of the response and manage the data load for each\
          \ request."
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          type: number
        style: form
      - $ref: '#/components/parameters/CreatedAt'
      - description: Filter by **LedgerTransactionType**
        example: CP
        explode: true
        in: query
        name: transaction_type
        required: false
        schema:
          enum:
          - CP
          - RF
          - RV
          - FEE
          - SP
          - MAN
          - TB
          - OT
          - CB
          - OP
          type: string
        style: form
      - description: Filter by **LedgerTransferBatch**
        example: "584"
        explode: true
        in: query
        name: transfer_batch
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/responses/ReportLedger'
        "403":
          $ref: '#/components/responses/Forbidden'
        "412":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
              schema:
                $ref: '#/components/schemas/StatusFailed'
            text/csv:
              schema:
                $ref: '#/components/schemas/StatusFailed'
          description: Precondition Failed
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
              schema:
                $ref: '#/components/schemas/StatusFailed'
            text/csv:
              schema:
                $ref: '#/components/schemas/StatusFailed'
          description: Internal Error
      summary: Report Ledger
      tags:
      - Reports
  /report/transactions:
    get:
      description: List your transactions
      parameters:
      - description: Filter from this date
        explode: true
        in: query
        name: start_date
        required: false
        schema:
          format: Y-m-d H:i
          type: string
        style: form
      - description: Filter until this date
        explode: true
        in: query
        name: end_date
        required: false
        schema:
          format: Y-m-d H:i
          type: string
        style: form
      - description: Page Number
        explode: true
        in: query
        name: page
        required: false
        schema:
          type: number
        style: form
      - description: "Limit records per page (Max: 2500)"
        explode: true
        in: query
        name: records_per_page
        required: false
        schema:
          default: 20
          type: number
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                Response:
                  value:
                    meta:
                      page:
                        current: 1
                        total: 47
                      records:
                        total: 231
                        per_page: 5
                      links:
                        first: ?page=1
                        prev: ""
                        next: ?page=2
                        last: ?page=47
                    data:
                    - id: b41921f1-a255-41bc-9e92-9a28d266d378
                      key: Merchant identification key
                      date: 2022-11-16T16:45:19Z
                      values:
                        requested: 44
                        paid: 44
                        fixed_fee: 0.25
                        variable_fee: 0.66
                        tax: 1.5
                        transfer: 42.88
                      transfer_date: 2022-11-21T00:00:00Z
                      transfer_batch: ""
                      method: DD
                      document_number: MARCEL0208220452011220221116164519
                      payment_type: single
                      payment_id: 2a9112fe-6510-4366-b55e-24a3ae188d67
                      payment_account:
                        id: 76f190b9-2b8a-4bd0-9490-411241a9dc81
                      payment_key: Merchant identification key
                      payment_transaction_key: Merchant identification key
                      descriptive: Descriptive Josefa
                    - id: b3fad7da-69bf-4320-b3ad-ccfaecaf8d16
                      key: Robertos Key
                      date: 2022-11-16T11:46:58Z
                      values:
                        requested: 100
                        paid: 100
                        fixed_fee: 0
                        variable_fee: 0
                        tax: 0
                        transfer: 100
                      transfer_date: 2022-11-18T00:00:00Z
                      transfer_batch: ""
                      method: MBW
                      document_number: MARCEL0208220451979520221116114658
                      payment_type: single
                      payment_id: 0cccc05d-1964-4648-a32b-fe7107746881
                      payment_account:
                        id: 76f190b9-2b8a-4bd0-9490-411241a9dc81
                      payment_key: Robertos Key
                      payment_transaction_key: ""
                      descriptive: Description of Roberto
                    - id: 65196366-3afe-45b6-be79-0f1025c9e2d5
                      key: Merchant identification key
                      date: 2022-11-15T10:06:19Z
                      values:
                        requested: 44
                        paid: 44
                        fixed_fee: 0.25
                        variable_fee: 0.66
                        tax: 1.5
                        transfer: 42.88
                      transfer_date: 2022-11-17T00:00:00Z
                      transfer_batch: ""
                      method: DD
                      document_number: MARCEL0208220451822420221115100619
                      payment_type: single
                      payment_id: 8798e233-43c8-4a73-8e24-e440a083b157
                      payment_account:
                        id: 76f190b9-2b8a-4bd0-9490-411241a9dc81
                      payment_key: Merchant identification key
                      payment_transaction_key: Merchant identification key
                      descriptive: Descriptive Josefa
                    - id: a03c6452-ae7a-4495-993d-b6608d999edb
                      key: Merchant identification key
                      date: 2022-11-15T10:06:19Z
                      values:
                        requested: 44
                        paid: 44
                        fixed_fee: 0.25
                        variable_fee: 0.66
                        tax: 1.5
                        transfer: 42.88
                      transfer_date: 2022-11-17T00:00:00Z
                      transfer_batch: ""
                      method: DD
                      document_number: MARCEL0208220451822320221115100619
                      payment_type: single
                      payment_id: b81d392b-b0d0-47ae-b76a-94ded2de404b
                      payment_account:
                        id: 76f190b9-2b8a-4bd0-9490-411241a9dc81
                      payment_key: Merchant identification key
                      payment_transaction_key: Merchant identification key
                      descriptive: Descriptive Josefa
                    - id: 5b145b82-8ff1-4caf-bb5e-f72dccfff376
                      key: Merchant identification key
                      date: 2022-11-15T10:06:19Z
                      values:
                        requested: 44
                        paid: 44
                        fixed_fee: 0.25
                        variable_fee: 0.66
                        tax: 1.5
                        transfer: 42.88
                      transfer_date: 2022-11-17T00:00:00Z
                      transfer_batch: ""
                      method: DD
                      document_number: MARCEL0208220451822220221115100619
                      payment_type: single
                      payment_id: e605e589-ccf8-4739-8fdb-8502a609bda4
                      payment_account:
                        id: 76f190b9-2b8a-4bd0-9490-411241a9dc81
                      payment_key: Merchant identification key
                      payment_transaction_key: Merchant identification key
                      descriptive: Descriptive Josefa
              schema:
                $ref: '#/components/schemas/_report_transactions_get_200_response'
            application/xml:
              example: |-
                <report>
                   <meta>
                      <page>
                         <current>1</current>
                         <total>196</total>
                      </page>
                      <records>
                         <total>196</total>
                         <per_page>2</per_page>
                      </records>
                      <links>
                         <first>?page=1</first>
                         <prev></prev>
                         <next>?page=2</next>
                         <last>?page=196</last>
                      </links>
                   </meta>
                   <data>
                      <transaction>
                         <id>4c67e74b-a256-4e0a-965d-97bf5d01bd50</id>
                         <key>Example Key</key>
                         <date>2019-05-03T15:18:04Z</date>
                         <values>
                            <requested>20</requested>
                            <paid>20</paid>
                            <fixed_fee>0</fixed_fee>
                            <variable_fee>0</variable_fee>
                            <tax>0</tax>
                            <transfer>20</transfer>
                         </values>
                         <transfer_date>2019-05-03T00:00:00Z</transfer_date>
                         <method>MB</method>
                         <document_number>TESTE12308267487210000000</document_number>
                         <payment_type>single</payment_type>
                         <payment_id>ace99c76-5292-4518-8bee-3c09d5ee067d</payment_id>
                         <payment_account>
                            <id>22ea3cc9-424b-489a-91b7-8955f643dc93</id>
                         </payment_account>
                         <payment_key>Example Key</payment_key>
                         <payment_transaction_key>Example Transaction Key</payment_transaction_key>
                         <descriptive>Descriptive Example</descriptive>
                      </transaction>
                   </data>
                </report>
              schema:
                $ref: '#/components/schemas/_report_transactions_get_200_response_1'
            text/csv:
              schema:
                $ref: '#/components/schemas/_report_transactions_get_200_response_1'
          description: Success
        "403":
          $ref: '#/components/responses/Forbidden'
        "412":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
              schema:
                $ref: '#/components/schemas/StatusFailed'
            text/csv:
              schema:
                $ref: '#/components/schemas/StatusFailed'
          description: Precondition Failed
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
              schema:
                $ref: '#/components/schemas/StatusFailed'
            text/csv:
              schema:
                $ref: '#/components/schemas/StatusFailed'
          description: Internal Error
      summary: Report Transactions
      tags:
      - Reports
      x-code-samples:
      - lang: CURL
        source: |
          curl -XGET -H "AccountId: 5fe2e102-dfee-4880-bd87-1d9a6ec6fdd2" -H "ApiKey: b0ea270d-9f50-4bbc-af58-44fed3df4b2b" \
          -G --data-urlencode "start_date=2019-01-07 15:10" --data-urlencode "end_date=2019-02-05 15:14" --data-urlencode "page=1" --data-urlencode "records_per_page=10" \
          https://api.prod.easypay.pt/2.0/report/transactions
  /out_payment:
    get:
      description: Full report with all the out payments from your Account Id
      parameters:
      - description: Page Number
        explode: true
        in: query
        name: page
        required: false
        schema:
          type: number
        style: form
      - description: "Limit records per page (Max: 100)"
        explode: true
        in: query
        name: records_per_page
        required: false
        schema:
          default: 20
          type: number
        style: form
      - description: Filter by type
        explode: true
        in: query
        name: type
        required: false
        schema:
          type: string
        style: form
      - description: Filter by method
        explode: true
        in: query
        name: method
        required: false
        schema:
          type: string
        style: form
      - description: Filter by id
        explode: true
        in: query
        name: id
        required: false
        schema:
          type: string
        style: form
      - description: Filter by out payment key
        explode: true
        in: query
        name: key
        required: false
        schema:
          type: string
        style: form
      - description: Filter by value
        explode: true
        in: query
        name: value
        required: false
        schema:
          format: double
          type: number
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                Response:
                  value:
                    meta:
                      page:
                        current: 1
                        total: 0
                      records:
                        total: 0
                        per_page: 1
                      links:
                        first: ?page=1
                        prev: ""
                        next: ?page=2
                        last: ?page=0
                    data:
                    - id: 20efcd82-be96-4aa0-89a1-c6365633a72e
                      status: success
                      type: normal
                      method: transfer
                      customer:
                        id: 09dbe8e2-5703-401e-9adc-6317f67a4fd9
                      account:
                        id: 76f190b9-2b8a-4bd0-9490-411241a9dc81
                      out_account:
                        id: bcd387ca-1835-4c95-9003-2da45f39e396
                      key: ""
                      value: 50
                      schedule_at: 2022-09-15 20:28:58
                      transactions:
                      - id: 20efcd82-be96-4aa0-89a1-c6365633a72e
                        key: ""
                        date: 2022-09-15T21:28:58Z
                        values:
                          requested: -50
                          paid: -50
                          fixed_fee: 1
                          variable_fee: 0
                          tax: 0.23
                          transfer: -51.23
                        transfer_date: 2022-09-15T00:00:00Z
                        transfer_batch: ""
                        method: transfer
                        document_number: MARCEL0208220435165820220915212858
                        descriptive: ""
                      created_at: 2022-09-15 20:28:58
                      timestamp: ""
                    - id: 12f21a3c-52a6-4274-ad1e-5e774093f7dd
                      status: success
                      type: normal
                      method: transfer
                      customer:
                        id: b586685e-4e56-472b-b469-9b365c62d223
                      account:
                        id: 76f190b9-2b8a-4bd0-9490-411241a9dc81
                      out_account:
                        id: 898d3a41-8013-4262-a432-0bd09e301dff
                      key: ""
                      value: 50
                      schedule_at: 2022-09-16 08:03:25
                      transactions:
                      - id: 12f21a3c-52a6-4274-ad1e-5e774093f7dd
                        key: ""
                        date: 2022-09-16T09:03:27Z
                        values:
                          requested: -50
                          paid: -50
                          fixed_fee: 1
                          variable_fee: 0
                          tax: 0.23
                          transfer: -51.23
                        transfer_date: 2022-09-16T00:00:00Z
                        transfer_batch: ""
                        method: transfer
                        document_number: MARCEL0208220435236620220916090327
                        descriptive: ""
                      created_at: 2022-09-16 08:03:27
                      timestamp: ""
              schema:
                $ref: '#/components/schemas/_out_payment_get_200_response'
          description: Success
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Internal Error
      summary: Lists out payments
      tags:
      - Out Payment
    post:
      description: Get your strong authentication RSA private key from Easypay Backoffice
        on menu:</br>Web Services->Configuration API 2.0->Keys.
      requestBody:
        $ref: '#/components/requestBodies/CreateOutPayment'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_out_payment_post_201_response'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Bad Request
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Internal Error
      security:
      - accountId: []
        apiKey: []
        signatureAuth: []
      summary: Create out payment
      tags:
      - Out Payment
      x-code-samples:
      - lang: PHP
        source: "$body = [\n    \"key\" => \"Key Example\",\n    \"method\" => \"\
          transfer\",\n    \"type\"\t=> \"normal\",\n    \"value\"\t=> floatval(17.50),\n\
          \    \"schedule_at\" =>\"2018-12-31 12:00\",\n    \"account\" => [\n   \
          \     \"id\" => \"22ea3cc9-424b-489a-91b7-8955f643dc93\",\n    ],\n    \"\
          customer\" => [\n        \"name\" => \"Customer Example\",\n        \"email\"\
          \ => \"customer@example.com\",\n        \"key\" => \"Key Example\",\n  \
          \      \"phone_indicative\" => \"+351\",\n        \"phone\" => \"911234567\"\
          ,\n        \"fiscal_number\" =>\"PT123456789\",\n    ],\n    \"out_account\"\
          \ => [\n        \"name\" => \"Name Example\",\n        \"email\" => \"sdd_email@example.com\"\
          ,\n        \"account_holder\" => \"Account Holder Example\",\n        \"\
          key\" => \"SDD Key Example\",\n        \"iban\" => \"PT50002700000001234567833\"\
          ,\n        \"phone\" => \"911234567\",\n        \"max_num_debits\" =>\"\
          12\",\n    ],\n    \"timestamp\" => (string)time()\n];\n\n$private = <<<PRIVATE\n\
          -----BEGIN RSA PRIVATE KEY-----\nMIIEpQIBAAKCAQEA6qYjzhYlveoAy9gQsHrzjFMqDV6vL7qBvO7EWV/KCFrBlAmP\n\
          V7ZQYyZ9leS/iZXp2GWeKf6djLAkjY9Z/BkNrNccLbVKCaUqlPMaRG83YOYNRWHZ\n5uzxX4e3KgEdIq5PTFVbloWCk4GqUO1LSq9ES0yC5GRvqeWDvcqrZh+SFMPKj0B3\n\
          yVEvjgwStIlJoamcQt330z4yPGs03q+VRaHFx8bFQdp21M4fY826lKlijEMPeB09\nexS3yzlCobDutLayUSJlb0abAEYMCNqDoEilqrnTvYYD9nNOyZJNZ913UrxSjNdb\n\
          8zoMaixKZze7hR4MLkzNALZLAQUf7RFhXpcMLQIDAQABAoIBAQDSYnPn62Obi5t7\nKRaNpS+IuWgS5LoeCRMZ2tqhZ4k1RGob2RZ0hjo9K92d76LsMUWhiDrvXCLWaXfc\n\
          lJMRvUTNm3DgapMfYr9zHSSIB0+XyaxMcRd2PSuNg5luR+Ffnvnqbv3XT41rw+54\n8Ml5BPwup0MUlBiqM+aS3Iwg3F2Vzt7iVMy3haHAUgbaErFymlzSyJRGiVRP3d6X\n\
          kfBjW3i4ZofFK2hXoTdv1adCrhsDfhN67x7zPtGyFaThZ2ZgeQbYVfUvQSrD25cX\nb8AQwMM93W+cccks/1Ex43I9Ajl6KrAB6nhYBXAlVxGdF2nFFAIeTU0AigLixotR\n\
          s5fL0HPhAoGBAPcn/eAom9iP5t0cTxsL+w4m1qvhEQSD+pg/cxlX8fMKPDOz60Vj\nMnEH38PryRQpAfRwgS1bWP/xBHCfCev9QmQ7g9oGXBlzBk/jHz6iT+kbM/2Fq4/0\n\
          6nZ5NStiqlWKTYGUdiUCd483clE0MDSWR96ksWaSjx1w7iLgXgs8UeA7AoGBAPML\nlDlCl+IIaSSIiVG6nDCTInySGG2jB75w8sTRt6XDJ+6Y+Bd27xcFHy5I3arY80gp\n\
          KY+A8yYXKxDbCj1pJApA2gzwJ8Ucb1UJgU9gUzL/0XrtpNLiBlNyU2z0IwlC/reu\naNZ0aV4YuqPk8+jROIDluk0ICUI10AjmFmJM5Sa3AoGBAJ6ccZaLOQiPwO6hHjsT\n\
          QzhfwGBpfYxSTl2qSmk3QTRhmyTrD89ly5cyIG4RQOfJMVH3aU78Um9d8yV7StjB\nnPvKHeGrNyu135UhAooli/bi2EiYofMuj9EcE/0Vwo5GxVqlNfSmUqf8Q0bNoSn+\n\
          T30YYCidYW7ZbFnBd1jqivjFAoGBAOdGPm7acqMRM9Qi5ODTvWrvp+J4Nyyk9WqA\nGlO16JahBW+jOnlBoLP8GLa3ec/okGA7YyP+JeI6K63ncXAMi9IB8jxbjsyfiUWX\n\
          POhmleUyz4i1eKF/mVtwr/g+vNREXxQ0r+hacCWtTHVHGd6SsLzfXg+NNRo/EM5W\n/DfgSjIzAoGAbWRUTaX9jcb9NQDMtXuUM5PoUfA7yDJl0K7oL6G6jOtcXnVfTtHG\n\
          00MnWn6yt227CYOB0lnd+F2wL64pdmcJnlvO+Gtq5pw4NmGcZadUWj3jcZbkyxMu\noLOfKIfyBPOUNWCosoGjPXVvgpIFrHFWJt6Rl7gjSqoXaeKlzEqZiv0=\n\
          -----END RSA PRIVATE KEY-----\nPRIVATE;\n\n$encoded_body = json_encode($body);\n\
          \n$pkeyid = openssl_pkey_get_private($private);\n\nopenssl_sign($encoded_body,\
          \ $signature, $pkeyid, OPENSSL_ALGO_SHA256);\n\n$headers = [\n    \"AccountId:\
          \ 5fe2e102-dfee-4880-bd87-1d9a6ec6fdd2\",\n    \"ApiKey: b0ea270d-9f50-4bbc-af58-44fed3df4b2b\"\
          ,\n    \"Signature: \" . base64_encode($signature),\n    'Content-Type:\
          \ application/json',\n];\n\n$curlOpts = [\n    CURLOPT_URL => \"https://api.prod.easypay.pt/2.0/out_payment\"\
          ,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_POST => 1,\n    CURLOPT_TIMEOUT\
          \ => 60,\n    CURLOPT_POSTFIELDS => $encoded_body,\n    CURLOPT_HTTPHEADER\
          \ => $headers,\n];\n\n$curl = curl_init();\ncurl_setopt_array($curl, $curlOpts);\n\
          $response_body = curl_exec($curl);\ncurl_close($curl);\n$response = json_decode($response_body,\
          \ true);\n"
  /out_payment/{id}:
    delete:
      description: "If the payment is not processed, it will be cancelled. </br> Get\
        \ your strong authentication RSA private key from Easypay Backoffice on menu:\
        \ </br> Web Services->Configuration API 2.0->Keys."
      parameters:
      - description: Resource Identification
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Unauthorized
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Resource Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Internal Error
      summary: Deletes out payment
      tags:
      - Out Payment
    get:
      parameters:
      - description: Resource Identification
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Response:
                  value:
                    id: 760d105e-950d-4b41-8017-cad840ca3baa
                    status: success
                    type: normal
                    method: transfer
                    descriptive: descriptive
                    customer:
                      id: 7e47c256-4bea-41a8-b578-727d60004c7a
                    account:
                      id: 76f190b9-2b8a-4bd0-9490-411241a9dc81
                    out_account:
                      id: 343a8a78-8deb-4d4a-aa41-0a9140c95346
                    key: Example Key
                    value: 1
                    schedule_at: 2022-11-25 10:30:11
                    transactions:
                    - id: 760d105e-950d-4b41-8017-cad840ca3baa
                      key: Example Key
                      date: 2022-11-25T10:30:14Z
                      values:
                        requested: -1
                        paid: -1
                        fixed_fee: 1
                        variable_fee: 0
                        tax: 0.23
                        transfer: -2.23
                      transfer_date: 2022-11-25T00:00:00Z
                      transfer_batch: ""
                      method: transfer
                      document_number: MARCEL0208220453362220221125103014
                      descriptive: ""
                    created_at: 2022-11-25 10:30:14
              schema:
                $ref: '#/components/schemas/_out_payment__id__get_200_response'
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Unauthorized
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Resource Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Internal Error
      summary: Shows out payment details
      tags:
      - Out Payment
  /refund:
    get:
      description: Cursor based endpoint to retrieve all account refunds.
      operationId: list-refund
      parameters:
      - $ref: '#/components/parameters/Cursor'
      - $ref: '#/components/parameters/Limit'
      - $ref: '#/components/parameters/CreatedAt'
      - $ref: '#/components/parameters/UpdatedAt'
      responses:
        "200":
          $ref: '#/components/responses/ListRefunds'
      summary: List Refunds
      tags:
      - Payment Generic Operations
  /refund/{id}:
    get:
      parameters:
      - description: Resource Identification
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Response:
                  value:
                    id: 4db3d9ab-f4c0-41a6-a80e-6cbbdd1508f4
                    status: success
                    transaction_key: internal key identifying this refund
                    value: 50
                    account_holder: Account Name Example
                    email: customer@example.com
                    phone: "911234567"
                    iban: PT50002700000001234567833
                    capture:
                      transaction_key: string
                      capture_date: string
                      account:
                        id: 22ea3cc9-424b-489a-91b7-8955f643dc93
                      status: success
                      splits:
                      - split_key: string
                        split_descriptive: Descriptive Example
                        value: 1
                        account:
                          id: 22ea3cc9-424b-489a-91b7-8955f643dc93
                        margin_value: 0.1
                        margin_account:
                          id: 22ea3cc9-424b-489a-91b7-8955f643dc93
                      payment_type: single
                      payment_id: bfd3518d-fe73-4fb8-b8e6-0ce38cd3ced8
                      id: 4c67e74b-a256-4e0a-965d-97bf5d01bd50
                      descriptive: Descriptive Example
                      value: 17.5
              schema:
                $ref: '#/components/schemas/_refund__id__get_200_response'
            application/xml:
              example: |-
                <refund>
                   <account_holder>Account Name Example</account_holder>
                   <email>customer@example.com</email>
                   <iban>PT50002700000001234567833</iban>
                   <id>4c67e74b-a256-4e0a-965d-97bf5d01bd50</id>
                   <phone>911234567</phone>
                   <status>success</status>
                   <transaction_key>string</transaction_key>
                   <value>17.5</value>
                </refund>
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Unauthorized
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Resource Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Internal Error
      summary: Shows refund details
      tags:
      - Payment Generic Operations
    post:
      parameters:
      - description: The capture uuid associated with Single or Frequent Transaction
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              Refund CC:
                value:
                  transaction_key: string
                  value: 17.5
              Refund MBWAY:
                value:
                  transaction_key: string
                  value: 17.5
              Refund MB:
                value:
                  transaction_key: string
                  value: 17.5
                  email: customer@example.com
                  phone: "351911234567"
                  iban: PT50002700000001234567833
                  account_holder: account_holder
              Refund VI:
                value:
                  transaction_key: string
                  value: 17.5
                  email: customer@example.com
                  phone: "351911234567"
                  iban: PT50002700000001234567833
                  account_holder: account_holder
              Refund with total split reversal:
                value:
                  transaction_key: internal key identifying this refund
                  iban: PT50002700000001234567833
                  email: customer@example.com
                  phone: "911234567"
                  account_holder: Account Name Example
                  value: 22
                  revert:
                    mode: TOTAL
              Refund with partial split reversal:
                value:
                  transaction_key: internal key identifying this refund
                  iban: PT50002700000001234567833
                  email: customer@example.com
                  phone: "911234567"
                  account_holder: Account Name Example
                  value: 12
                  revert:
                    mode: PARTIAL
                    splits:
                    - id: 396f5eec-5b5b-4170-95bb-6d42f7d4d7eb
            schema:
              $ref: '#/components/schemas/_refund__id__post_request'
        description: Refund details
        required: true
      responses:
        "201":
          content:
            application/json:
              examples:
                Response:
                  value:
                    status: ok
                    message:
                    - Your request was successfully created
                    id: 5e2fee01-71e8-47e1-896a-3e2153222afd
              schema:
                $ref: '#/components/schemas/_capture__id__post_201_response'
            application/xml:
              example: |-
                <response>
                   <status>ok</status>
                   <message>
                      <string>Your request was successfully created</string>
                   </message>
                   <id>3dc66505-3117-4b62-b2b7-814aec7f0e84</id>
                </response>
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Bad Request
        "403":
          $ref: '#/components/responses/Forbidden'
        "412":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Precondition Failed
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusFailed'
            application/xml:
              example: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Custom error message</string>
                   </message>
                </response>
          description: Internal Error
      summary: Refunds a Single Transaction or Frequent Transaction
      tags:
      - Payment Generic Operations
      x-code-samples:
      - lang: PHP
        source: |-
          $id = "dc835144-1f7d-4a55-a5d5-c6617f990c7b"

          $body = [
              "transaction_key" =>" RefundKeyExample",
              "value" => floatval(17.50),
              "iban" => "PT50002700000001234567833",
              "email" => "customer@example.com",
              "phone" => "911234567",
              "account_holder" => "AccountNameExample",
          ];

          $headers = [
              "AccountId: 5fe2e102-dfee-4880-bd87-1d9a6ec6fdd2",
              "ApiKey: b0ea270d-9f50-4bbc-af58-44fed3df4b2b",
              'Content-Type: application/json',
          ];

          $url = "https://api.prod.easypay.pt/2.0/refund/" . $id

          $curlOpts = [
              CURLOPT_URL => $url,
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_POST => 1,
              CURLOPT_TIMEOUT => 60,
              CURLOPT_POSTFIELDS => json_encode($body),
              CURLOPT_HTTPHEADER => $headers,
          ];

          $curl = curl_init();
          curl_setopt_array($curl, $curlOpts);
          $response_body = curl_exec($curl);
          curl_close($curl);
          $response = json_decode($response_body, true);
      - lang: CURL
        source: |
          curl -XPOST -H "AccountId: 5fe2e102-dfee-4880-bd87-1d9a6ec6fdd2" -H "ApiKey: b0ea270d-9f50-4bbc-af58-44fed3df4b2b" \
          -d '{"transaction_key": "RefundKeyExample","iban": "PT50002700000001234567833","value" : 17.50,"email": "customer@example.com","phone": "911234567","account_holder": "AccountNameExample","account": {"id":"22ea3cc9-424b-489a-91b7-8955f643dc93"}}' \
          https://api.prod.easypay.pt/2.0/refund/dc835144-1f7d-4a55-a5d5-c6617f990c7b
      x-codegen-request-body-name: body
  /chargeback:
    get:
      description: "This endpoint retrieves a list of chargebacks associated with\
        \ your account. A Chargeback is a mandatory transaction reversal initiated\
        \ by the consumer's card issuer or bank, usually due to a dispute over a transaction.\
        \ When a chargeback occurs, the costumer effectively reverses the transaction,\
        \ resulting in a debit of the disputed amount from the merchant's account.\
        \ This endpoint allows you to view details of chargebacks, including the reason\
        \ for the dispute, transaction amount, and status, providing insights into\
        \ consumer disputes and their impact on your financials."
      operationId: list-chargeback
      parameters:
      - $ref: '#/components/parameters/Cursor'
      - $ref: '#/components/parameters/Limit'
      - $ref: '#/components/parameters/CreatedAt'
      responses:
        "200":
          $ref: '#/components/responses/ListChargebacks'
        "403":
          $ref: '#/components/responses/Forbidden'
        "412":
          $ref: '#/components/responses/PreConditionFailed'
        "500":
          $ref: '#/components/responses/InternalError'
      summary: List chargebacks
      tags:
      - Payment Generic Operations
  /link:
    get:
      operationId: get-link
      parameters:
      - $ref: '#/components/parameters/Cursor'
      - $ref: '#/components/parameters/Limit'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_link_200_response'
          description: OK
      security:
      - accountId: []
        apiKey: []
      summary: List all payment links
      tags:
      - Pay By Link
    post:
      operationId: post-link
      requestBody:
        $ref: '#/components/requestBodies/CreateLink'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Link'
          description: Created
      security:
      - accountId: []
        apiKey: []
      summary: Create a payment link
      tags:
      - Pay By Link
  /link/{id}:
    get:
      operationId: get-link-id
      parameters:
      - description: id of the link
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Link'
          description: OK
      security:
      - accountId: []
        apiKey: []
      summary: Show link details
      tags:
      - Pay By Link
    parameters:
    - description: id of the link
      explode: false
      in: path
      name: id
      required: true
      schema:
        type: string
      style: simple
    patch:
      operationId: patch-link
      parameters:
      - description: id of the link
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/UpdateLink'
      responses:
        "200":
          description: OK
      summary: Update Link
      tags:
      - Pay By Link
components:
  parameters:
    PageQuery:
      description: "Specifies the page number of the results to retrieve. This parameter\
        \ is used for paginating through a collection of records, allowing the client\
        \ to navigate to different pages of the dataset. The value must be a positive\
        \ integer (e.g., \"1\" for the first page)."
      explode: true
      in: query
      name: page
      required: false
      schema:
        default: 1
        example: 1
        type: integer
      style: form
    RecordsPerPage:
      description: "Specifies the number of records to retrieve per page. This parameter\
        \ is used for controlling the size of each page in a paginated collection\
        \ of records. The value must be a positive integer, determining how many records\
        \ are displayed on each page (e.g., \"20\" for 20 records per page)."
      explode: true
      in: query
      name: records_per_page
      required: false
      schema:
        default: 20
        example: 20
        type: integer
      style: form
    Key:
      description: "A user-defined identifier used to filter the results. This parameter\
        \ allows the client to specify a key to retrieve records or transactions that\
        \ match the provided key. The value is a string and may not be unique, as\
        \ it is determined by the user."
      explode: true
      in: query
      name: key
      required: false
      schema:
        example: 01J32EESEC1Z543P7J3PKSF1Q9
        type: string
      style: form
    Id:
      description: Filter by the unique identifier for the resource. Typically formatted
        as a UUID (Universally Unique Identifier).
      explode: true
      in: query
      name: id
      required: false
      schema:
        example: bb3e7e60-20f3-4208-9b21-64c635a51f42
        format: uuid
        type: string
      style: form
    CreatedAt:
      description: "Filter records by creation datetime interval. Maximum range of\
        \ 30 days. Format: interval(YYYY-MM-DD HH:MM,YYYY-MM-DD HH:MM)"
      explode: true
      in: query
      name: created_at
      required: false
      schema:
        example: "interval(2006-01-02 15:04,2006-01-02 15:04)"
        type: string
      style: form
    Value:
      description: Filter records by the exact transaction amount.
      explode: true
      in: query
      name: value
      required: false
      schema:
        example: 10.32
        format: double
        type: number
      style: form
    ExpirationTime:
      description: "Filter records by expiration datetime interval. Format: interval(YYYY-MM-DD\
        \ HH:MM,YYYY-MM-DD HH:MM)"
      explode: true
      in: query
      name: expiration_time
      required: false
      schema:
        example: "interval(2006-01-02 15:04,2006-01-02 15:04)"
        type: string
      style: form
    Type:
      description: Filter by type of financial operation being performed. Possible
        values are "Sale" (a complete transaction where funds are immediately captured)
        or "Authorisation" (a temporary hold on funds pending a future capture).
      explode: true
      in: query
      name: type
      required: false
      schema:
        enum:
        - sale
        - authorisation
        example: sale
        type: string
      style: form
    Method:
      description: Filter by payment method used in the transaction.
      explode: true
      in: query
      name: method
      required: false
      schema:
        enum:
        - cc
        - vi
        - dd
        - mb
        - mbw
        - ap
        - gp
        - sc
        - uf
        example: mb
        type: string
      style: form
    CustomerKey:
      description: "A user-defined identifier used to filter the customers. This parameter\
        \ allows the client to specify a key to retrieve records or transactions that\
        \ match the provided key. The value is a string and may not be unique, as\
        \ it is determined by the user."
      explode: true
      in: query
      name: customer
      required: false
      schema:
        example: 01J32EDWGNX94XMWP8PWB23KBK
        type: string
      style: form
    Cursor:
      description: "The cursor parameter is used for pagination. It specifies the\
        \ pointer to the start of the next set of results in a sequence of paginated\
        \ data. Typically, this is a unique identifier of the last item from the previous\
        \ response. If not provided, the API fetches the first page of results."
      explode: true
      in: query
      name: cursor
      required: false
      schema:
        type: string
      style: form
    Limit:
      description: 'The limit parameter is used for pagination. It specifies the maximum
        number of entries to return in a single page of results. Max 100. '
      explode: true
      in: query
      name: limit
      required: false
      schema:
        type: number
      style: form
    StartDate:
      description: Filter from this date (inclusive).
      explode: true
      in: query
      name: start_date
      required: false
      schema:
        format: Y-m-d H:i
        type: string
      style: form
    EndDate:
      description: Filter until this date (inclusive).
      explode: true
      in: query
      name: end_date
      required: false
      schema:
        format: Y-m-d H:i
        type: string
      style: form
    UpdatedAt:
      description: "Filter records by update datetime interval. Maximum range of 30\
        \ days. Format: interval(YYYY-MM-DD HH:MM,YYYY-MM-DD HH:MM)"
      explode: true
      in: query
      name: updated_at
      required: false
      schema:
        example: "interval(2006-01-02 15:04,2006-01-02 15:04)"
        type: string
      style: form
  requestBodies:
    CreateSinglePayment:
      content:
        application/json:
          examples:
            Multibanco:
              value:
                customer:
                  name: Customer Example
                  email: customer@example.com
                  phone: "911234567"
                  phone_indicative: "+351"
                  key: customer Key Example
                key: merchant identification key Example
                value: 15.5
                method: mb
                capture:
                  descriptive: transaction descriptive Example
                  transaction_key: transaction key Example
            Direct Debit:
              value:
                customer:
                  name: Customer Example
                  email: customer@example.com
                  phone: "911234567"
                  phone_indicative: "+351"
                  key: customer Key Example
                key: merchant identification key Example
                value: 17.5
                method: dd
                sdd_mandate:
                  iban: PT50002700000001234567833
                  key: Sdd mandate Key Example
                  name: Customer name Example
                  email: customer@example.com
                  phone: "911234567"
                  account_holder: acount holder name Example
                capture:
                  descriptive: transaction descriptive Example
                  transaction_key: transaction key Example
            CC Authorisation:
              value:
                currency: EUR
                customer:
                  name: Customer Example
                  email: customer@example.com
                  phone: "911234567"
                  phone_indicative: "+351"
                key: Example Key
                value: 17.5
                type: authorisation
                method: cc
            CC Sale:
              value:
                currency: EUR
                customer:
                  name: Customer Example
                  email: customer@example.com
                  phone: "911234567"
                  phone_indicative: "+351"
                key: Example Key
                value: 17.5
                type: sale
                method: cc
                capture:
                  descriptive: string
                  transaction_key: string
            MBWAY Authorisation:
              value:
                currency: EUR
                customer:
                  name: Customer Example
                  email: customer@example.com
                  phone: "911234567"
                  phone_indicative: "+351"
                key: Example Key
                value: 17.5
                type: authorisation
                method: mbw
            MBWAY Sale:
              value:
                currency: EUR
                customer:
                  name: Customer Example
                  email: customer@example.com
                  phone: "911234567"
                  phone_indicative: "+351"
                key: Example Key
                value: 17.5
                type: sale
                method: mbw
                capture:
                  descriptive: string
                  transaction_key: string
            Santander Consumer:
              value:
                customer:
                  name: Customer Example
                  email: customer@example.com
                  phone: "911234567"
                  phone_indicative: "+351"
                  key: customer Key Example
                key: merchant identification key Example
                value: 200
                method: sc
                capture:
                  descriptive: transaction descriptive Example
                  transaction_key: transaction key Example
            Universo Flex:
              value:
                customer:
                  name: Customer Example
                  email: customer@example.com
                  phone: "911234567"
                  phone_indicative: "+351"
                  key: customer Key Example
                key: merchant identification key Example
                value: 0.5
                method: uf
                capture:
                  descriptive: transaction descriptive Example
                  transaction_key: transaction key Example
            Virtual IBAN:
              value:
                customer:
                  name: Customer Example
                  email: customer@example.com
                  phone: "911234567"
                  phone_indicative: "+351"
                  key: customer Key Example
                key: merchant identification key Example
                value: 0.5
                method: vi
                capture:
                  descriptive: transaction descriptive Example
                  transaction_key: transaction key Example
            Sale with Splits:
              value:
                customer:
                  name: Customer Example
                  email: customer@example.com
                  phone: "911234567"
                  phone_indicative: "+351"
                  key: customer Key Example
                key: merchant identification key Example
                value: 649.99
                method: cc
                capture:
                  descriptive: transaction descriptive Example
                  transaction_key: 808254-9734
                  splits:
                  - split_key: 5d87a15c-dab6-441a-b9f6-ecd86171517e
                    split_descriptive: product
                    account:
                      id: 7e697e0c-c2bf-422a-9535-ab0b750bb832
                    margin_account:
                      id: b6f53027-0478-4728-9269-8bcc0f8088ea
                    margin_value: 26.39
                    value: 649.99
          schema:
            $ref: '#/components/schemas/single_post_request'
      description: Configuration object to generate a single payment
      required: true
    CreateOutPayment:
      content:
        application/json:
          examples:
            Create with new customer:
              value:
                customer:
                  id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                  name: Customer Example
                  email: user@example.com
                  phone: "911234567"
                  phone_indicative: "+351"
                  fiscal_number: PT123456789
                  key: Example Key
                  language: PT
                key: Example Key
                value: 0.5
                type: normal
                schedule_at: 2019-08-24T14:15:22Z
                descriptive: Descriptive Example
                account:
                  id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                out_account:
                  account_holder: Acount Name Example
                  iban: PT50002700000001234567833
                  email: customer@example.com
                  phone: "351911234567"
                  key: Key Example
                  country_code: PT
                method: transfer
                timestamp: "1696642539"
          schema:
            $ref: '#/components/schemas/_out_payment_post_request'
    CreateLink:
      content:
        application/json:
          examples:
            Create Single payment Pay-by-link with several payment methods and sms and email communication channel:
              value:
                type: SINGLE
                expiration_time: 2023-12-29T23:59:59.999Z
                payment:
                  single:
                    requested_amount: "21.55"
                  methods:
                  - CC
                  - MBW
                  - MB
                  - DD
                  - VI
                  - UF
                  capture:
                    descriptive: string
                    key: string
                customer:
                  name: pedro barros
                  email: barros@gmail.com
                  phone: "+351911234567"
                  language: PT
                communication_channels:
                - SMS
                - EMAIL
            Create Single payment Pay-by-link with one payment method and no communication channel:
              value:
                type: SINGLE
                expiration_time: 2033-12-29T23:59:59.999Z
                payment:
                  single:
                    requested_amount: "31.55"
                  methods:
                  - CC
                  - MBW
                  - MB
                  - DD
                  - VI
                  - UF
                  capture:
                    descriptive: string
                    key: string
                customer:
                  name: pedro barros
                  email: barros@gmail.com
                  phone: "+351911234567"
                  language: PT
          schema:
            $ref: '#/components/schemas/post_link_request'
    UpdateLink:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/patch_link_request'
    CreateFrequent:
      content:
        application/json:
          examples:
            Create a Frequent Payment DD:
              value:
                expiration_time: 2038-12-12 16:05
                currency: EUR
                customer:
                  name: Customer Example
                  email: customer@example.com
                  phone: "911234567"
                  phone_indicative: "351"
                  fiscal_number: PT123456789
                  key: Key Example
                  language: PT
                key: Key Example
                max_value: 25.5
                min_value: 10
                unlimited_payments: true
                method: dd
                sdd_mandate:
                  id: "12345678901"
                  iban: PT50002700000001234567833
                  key: Key Example
                  name: Name Example
                  email: customer@example.com
                  phone: "911234567"
                  account_holder: Acount Name Example
                  country_code: PT
                  max_num_debits: "12"
            Create a Frequent Payment CC:
              value:
                expiration_time: 2038-12-12 16:05
                currency: EUR
                customer:
                  name: Customer Example
                  email: customer@example.com
                  phone: "911234567"
                  phone_indicative: "351"
                  fiscal_number: PT123456789
                  key: Key Example
                  language: PT
                key: Key Example
                max_value: 25.5
                min_value: 10
                method: cc
            Create a Frequent Payment MBW:
              value:
                expiration_time: 2038-12-12 16:05
                currency: EUR
                customer:
                  name: Customer Example
                  email: customer@example.com
                  phone: "911234567"
                  phone_indicative: "351"
                  fiscal_number: PT123456789
                  key: Key Example
                  language: PT
                key: Key Example
                max_value: 25.5
                min_value: 10
                method: mbw
            Create a Frequent Payment Multibanco:
              value:
                expiration_time: 2038-12-12 16:05
                currency: EUR
                customer:
                  name: Customer Example
                  email: customer@example.com
                  phone: "911234567"
                  phone_indicative: "351"
                  fiscal_number: PT123456789
                  key: Key Example
                  language: PT
                key: Key Example
                max_value: 25.5
                min_value: 10
                method: mb
            Create a Frequent Payment Multibanco with specific Reference:
              value:
                expiration_time: 2038-12-12 16:05
                currency: EUR
                customer:
                  name: Customer Example
                  email: customer@example.com
                  phone: "911234567"
                  phone_indicative: "351"
                  fiscal_number: PT123456789
                  key: Key Example
                  language: PT
                key: Key Example
                max_value: 25.5
                min_value: 10
                method: mb
                multibanco:
                  reference: "505237431"
          schema:
            $ref: '#/components/schemas/_frequent_post_request'
    UpdateSingle:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/single_update_request'
  responses:
    NoContent:
      description: No content
    Forbidden:
      content:
        application/json:
          examples:
            Wrong credentials provided:
              value:
                status: error
                message:
                - Authentication failed
          schema:
            $ref: '#/components/schemas/inline_object'
        application/xml:
          examples:
            Example 1:
              value: |-
                <response>
                   <status>error</status>
                   <message>
                      <string>Authentication failed</string>
                   </message>
                </response>
          schema:
            $ref: '#/components/schemas/inline_object_1'
      description: Forbidden
    ReportLedger:
      content:
        application/json:
          examples:
            Example 1:
              value:
                metadata:
                  next_cursor: lL_j7ilk7rc
                  count: 10
                data:
                - id: dc0f1e47-4510-4058-8119-31b8f80b5a02
                  created_at: 2019-08-24T14:15:22Z
                  transaction_timestamp: 2019-08-24T14:15:22Z
                  transaction_type: CP
                  amount_details:
                    requested_amount:
                      amount: "13.5"
                      currency: EUR
                    payed_amount:
                      amount: "13.5"
                      currency: EUR
                    fixed_fee:
                      amount: "0.07"
                      currency: EUR
                    variable_fee:
                      amount: "0.1"
                      currency: EUR
                    tax_amount:
                      amount: "0.04"
                      currency: EUR
                    transfered_amount:
                      amount: "13.29"
                      currency: EUR
                  transfer_batch_date: 2019-08-24
                  transfer_batch: string
                  descriptive: some descriptive
                  details:
                    operation_id: 79921588-12fb-44c8-87c2-207362a8e467
                    operation_key: transaction key associated with operation
                    method: MBW
                    payment_id: 1717d252-7a25-43e9-a272-f1ae07a0f2d7
                    payment_type: single
                    payment_key: Merchant identification key associated with payment
          schema:
            $ref: '#/components/schemas/inline_object_2'
        application/xml:
          schema:
            properties: {}
            type: object
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/inline_object_3'
        text/html:
          schema:
            $ref: '#/components/schemas/inline_object_4'
      description: ""
    CreateSinglePayment:
      content:
        application/json:
          examples:
            Created Direct Debit with success:
              value:
                status: ok
                message:
                - Your request was successfully created
                id: ed7f8dac-0ea2-4846-8433-f5f8b0e70ed7
                method:
                  type: dd
                  status: pending
                  entity: "21098"
                  reference: "503564027"
                  sdd_mandate:
                    id: "50356402710"
                    billing_entity: PT16103627
                    iban: PT50002700000001234567833
                    key: sdd mandate key
                    name: Name Example
                    email: customer@example.com
                    phone: "912997715"
                    account_holder: Account Name Example
                    country_code: PT
                    max_num_debits: "1"
                    reference_adc: "50356402710"
                customer:
                  id: 2544ce48-ccec-465e-9722-d42ccf0aa640
                capture:
                  id: c6101a8b-b8c6-44a7-b128-bef8888e14d7
            Created Santander Consumer Finance with success:
              value:
                status: ok
                message:
                - Your request was successfully created
                id: e107b44e-ceef-40c3-9e2c-6f4bd9af6003
                method:
                  type: SC
                  status: pending
                  url: https://cc.test.easypay.pt/start/e107b44e-ceef-40c3-9e2c-6f4bd9af6003
                  alias: e107b44e-ceef-40c3-9e2c-6f4bd9af6003
                customer:
                  id: b9a473d1-36d3-46c4-b01a-55fc1f267631
                capture:
                  id: ee9b9595-840c-40f1-942c-de494d4a7dbe
            Created Digital IBAN with success:
              value:
                status: ok
                message:
                - Your request was successfully created
                id: 52a29de3-c337-4681-acc5-9e16a1bcbc76
                method:
                  type: VI
                  status: pending
                  iban: PT50123400009900032909922
                customer:
                  id: 9d66ceba-8daf-4f9e-af59-747b0d196096
                capture:
                  id: 833259eb-343d-4f4d-aac8-4797a7b2bfe6
            Created Multibanco with success:
              value:
                status: ok
                message:
                - Your request was successfully created
                id: e95dec61-fa63-461a-8e5b-ea42c4755bac
                method:
                  type: mb
                  status: pending
                  entity: "11683"
                  reference: "663000450"
                  expiration_date: 07/17
                customer:
                  id: fba21a72-70fc-4e15-92e0-bcc967dfb750
                capture:
                  id: 2a2b6501-b3eb-4b88-8e43-beb3d348fef0
            Created Universo Flex with success:
              value:
                status: ok
                message:
                - Your request was successfully created
                id: a5124ae8-2683-4465-bc3d-2a66711ccf3e
                method:
                  type: UF
                  status: pending
                  url: https://cc.test.easypay.pt/start/a5124ae8-2683-4465-bc3d-2a66711ccf3e
                customer:
                  id: 006fd2b8-b74e-49c7-96c6-de561756a66b
                capture:
                  id: ef8a2b8e-6d00-4b33-a3cb-7c82bf1557ce
            Created Credit Card with success:
              value:
                status: ok
                message:
                - Your request was successfully created
                id: 66d50369-1e80-4a6e-8346-ae7bc7e88355
                method:
                  type: cc
                  status: pending
                  url: https://cc.test.easypay.pt/v3/public/card-details/66d50369-1e80-4a6e-8346-ae7bc7e88355
                customer:
                  id: b929f784-3cd3-4a6d-b712-4e9f17e7fa2f
                capture:
                  id: 15962a97-3c67-41bf-8db7-f8e0cddc16b5
          schema:
            $ref: '#/components/schemas/inline_object_5'
      description: Single created with success response
    BadRequest:
      content:
        application/json:
          examples:
            Bad input provided:
              value:
                status: error
                message:
                - The field value is required
          schema:
            $ref: '#/components/schemas/inline_object_6'
      description: Bad Request
    PreConditionFailed:
      content:
        application/json:
          examples:
            Domain constraint failed:
              value:
                status: error
                message:
                - Min value can't be higher than max's
          schema:
            $ref: '#/components/schemas/inline_object'
      description: Pre condition failed
    UnprocessableEntity:
      content:
        application/json:
          examples:
            Transient processing error:
              value:
                status: error
                message:
                - Refund request cannot be completed at this time. Operations are
                  currently undergoing processing and are unavailable for modification.
                  Please try again later.
          schema:
            $ref: '#/components/schemas/inline_object_7'
      description: Unprocessable Entity
    InternalError:
      content:
        application/json:
          examples:
            Internal error:
              value:
                status: error
                message:
                - Internal Error
          schema:
            $ref: '#/components/schemas/inline_object_6'
      description: Unprocessable Entity
    NotFound:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_6'
      description: Not found response
    ListSingle:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_8'
      description: Success
    GetSingleDetails:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_9'
      description: Success
    SingleUpdate:
      content:
        application/json:
          examples:
            Example 1:
              value:
                status: ok
                message:
                - Your request was successfully created
                id: d4851c0a-66e2-4b34-9587-1e453ddcc650
                method:
                  type: CC
                  status: pending
                  url: https://cc.easypay.pt/v3/public/card-details/d4851c0a-66e2-4b34-9587-1e453ddcc650
                customer:
                  id: 156de567-b17d-4591-a154-442c873b76c7
          schema:
            $ref: '#/components/schemas/inline_object_10'
      description: Success
    ListCaptures:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_11'
      description: Example response
    GetCaptureDetails:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_12'
      description: Example response
    ListRefunds:
      content:
        application/json:
          examples:
            Example 1:
              value:
                data:
                - id: 03ec73bc-4b70-49ab-9f3a-1f0c0119d7bf
                  status: success
                  transaction_key: internal key identifying this refund
                  value: 10
                  account_holder: Account Name Example
                  email: customer@example.com
                  phone: "911234567"
                  iban: PT50002700000001234567833
                  created_at: 2024-09-19 09:05:42
                  updated_at: 2024-09-19 09:06:42
                  capture:
                    id: f2387117-0d06-4929-b78a-3c9b8d37cd44
                    payment_id: f2387117-0d06-4929-b78a-3c9b8d37cd44
                    payment_type: frequent
                - id: aa3f2a0f-4013-4b7e-aad1-a4c443a2affc
                  status: success
                  transaction_key: internal key identifying this refund
                  value: 10
                  account_holder: Account Name Example
                  email: customer@example.com
                  phone: "911234567"
                  iban: PT50002700000001234567833
                  created_at: 2024-09-19 08:59:42
                  updated_at: 2024-09-19 09:00:02
                  capture:
                    id: 92abad40-fc76-4054-9020-a991a0ee5588
                    payment_id: 92abad40-fc76-4054-9020-a991a0ee5588
                    payment_type: frequent
                metadata:
                  next_cursor: Yxk8mepPg2eMyJNj
                  count: 2
          schema:
            $ref: '#/components/schemas/inline_object_13'
      description: The ListRefunds endpoint retrieves a paginated list of refund transactions
        processed within the system.
    ListChargebacks:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_14'
      description: Success
  schemas:
    CommunicationChannels:
      description: the communication channels to where the final customer link should
        be forwarded
      items:
        enum:
        - SMS
        - EMAIL
        example: SMS
        type: string
      type: array
      x-stoplight:
        id: 4aj488axd58ai
    PaymentMethods:
      description: the payment methods available to some pay-by-link payment
      items:
        enum:
        - MB
        - MBW
        - DD
        - CC
        - SC
        - UF
        - VI
        example: MBW
        type: string
      type: array
      x-stoplight:
        id: rpugnuu99ss5o
    PayByLinkCustomer:
      description: customer data required to produce a pay-by-link
      example:
        phone: "+351911234567"
        name: Jonh Doe
        language: PT
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        email: example@easypay.pt
      properties:
        id:
          description: customer id that already exists in easypay.
          format: uuid
          type: string
        name:
          description: customer name
          example: Jonh Doe
          maxLength: 255
          type: string
        email:
          example: example@easypay.pt
          format: email
          maxLength: 70
          type: string
        phone:
          description: e164 formatted phone
          example: "+351911234567"
          type: string
        language:
          description: 2- or 3-letter ISO 3166-1
          example: PT
          type: string
      required:
      - email
      - language
      - name
      - phone
      title: Customer
      x-stoplight:
        id: 9u3olv2hfu3j0
    PayByLinkPaymentTypes:
      description: ""
      enum:
      - SINGLE
      - FREQUENT
      - SUBSCRIPTION
      title: PayByLinkPaymentTypes
      type: string
      x-stoplight:
        id: apea77mhcr2f0
    PayByLinkFrequent:
      example:
        maximum_amount: maximum_amount
        minimum_amount: minimum_amount
        unlimited_payments: true
      properties:
        minimum_amount:
          type: string
        maximum_amount:
          type: string
        unlimited_payments:
          type: boolean
      required:
      - maximum_amount
      - minimum_amount
      - unlimited_payments
      x-stoplight:
        id: 9b0w8pkgfa8p1
    Subscription:
      example:
        start_time: start_time
        retries: 0
        maximum_captures: maximum_captures
        failover: true
        capture_now: true
        frequency: frequency
      properties:
        frequency:
          type: string
        maximum_captures:
          type: string
        start_time:
          type: string
        capture_now:
          type: boolean
        retries:
          type: integer
        failover:
          type: boolean
      required:
      - capture_now
      - failover
      - frequency
      - maximum_captures
      - retries
      - start_time
      x-stoplight:
        id: stfma29gfaajc
    PayByLinkSingle:
      example:
        requested_amount: requested_amount
      properties:
        requested_amount:
          description: string representing a decimal number with up to two places
            after the decimal point (but not more)
          pattern: "^\\d+(\\.\\d{1,2})?$"
          type: string
      required:
      - requested_amount
      title: Single
      x-stoplight:
        id: cbs2lwr4wf7j8
    PayByLinkCapture:
      example:
        descriptive: descriptive
        key: key
      properties:
        descriptive:
          description: some descriptive associated with this capture operation
          maxLength: 255
          type: string
        key:
          description: some key associated with this capture operation
          maxLength: 50
          type: string
      title: Capture
      x-stoplight:
        id: an7csjfgv9d7t
    Link:
      example:
        image: https://cdn.easypay.pt/images/qr/XStDvnMKZaN
        communication_channels:
        - SMS
        - SMS
        expiration_time: 2000-01-23T04:56:07.000+00:00
        payment:
          single:
            requested_amount: requested_amount
          methods:
          - MBW
          - MBW
          expiration_time: 2000-01-23T04:56:07.000+00:00
          frequent:
            maximum_amount: maximum_amount
            minimum_amount: minimum_amount
            unlimited_payments: true
          capture:
            descriptive: descriptive
            key: key
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          subscription:
            start_time: start_time
            retries: 0
            maximum_captures: maximum_captures
            failover: true
            capture_now: true
            frequency: frequency
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        type: SINGLE
        url: https://easypay.pt/s/XStDvnMKZaN
        customer:
          phone: "+351911234567"
          name: Jonh Doe
          language: PT
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          email: example@easypay.pt
        status: ACTIVE
      properties:
        id:
          format: uuid
          readOnly: true
          type: string
        expiration_time:
          format: date-time
          type: string
        type:
          $ref: '#/components/schemas/PayByLinkPaymentTypes'
        customer:
          $ref: '#/components/schemas/PayByLinkCustomer'
        communication_channels:
          description: the communication channels to where the final customer link
            should be forwarded
          items:
            enum:
            - SMS
            - EMAIL
            example: SMS
            type: string
          type: array
          x-stoplight:
            id: 4aj488axd58ai
        payment:
          $ref: '#/components/schemas/Link_payment'
        url:
          example: https://easypay.pt/s/XStDvnMKZaN
          format: url
          type: string
        image:
          example: https://cdn.easypay.pt/images/qr/XStDvnMKZaN
          format: url
          type: string
        status:
          $ref: '#/components/schemas/Status'
      title: Link
      x-stoplight:
        id: idb1w6zf7twqv
    Status:
      enum:
      - ACTIVE
      - EXPIRED
      - DISABLED
      - USED
      title: Status
      type: string
      x-stoplight:
        id: 2wwn8fgzuint0
    Metadata:
      description: An object containing additional information about the response.
        It includes details that help manage and navigate the retrieved data.
      example:
        next_cursor: lL_j7ilk7rc
        count: 10
      properties:
        next_cursor:
          description: "Provides the cursor for the next set of records. This value\
            \ should be used as the cursor parameter in subsequent requests to continue\
            \ paginating through the data. If the cursor is an empty string or null,\
            \ it indicates that there are no more results. To retrieve all available\
            \ results, continue making subsequent requests until next_cursor is empty\
            \ or null."
          example: lL_j7ilk7rc
          type: string
        count:
          description: The total number of records in the current response. This field
            indicates the number of items returned in the current set of results.
          example: 10
          type: number
      required:
      - count
      - next_cursor
      title: Metadata
      x-stoplight:
        id: madvetzh3jlz4
    Config_Details:
      example:
        payment_methods:
        - payment_methods
        - payment_methods
        authorisation: authorisation
        visa_fwd: visa_fwd
        visa_detail: visa_detail
        generic: generic
        transaction: transaction
        account: account
        client_id: client_id
      properties:
        generic:
          type: string
        authorisation:
          type: string
        transaction:
          type: string
        visa_fwd:
          type: string
        visa_detail:
          type: string
        account:
          type: string
        client_id:
          type: string
        payment_methods:
          items:
            type: string
          type: array
      title: ""
      x-examples:
        Default Config:
          generic: https://www.easypay.pt/generic
          authorisation: https://www.easypay.pt/authorisation
          transaction: https://www.easypay.pt/transaction
          visa_fwd: https://www.easypay.pt/visa_fwd
          visa_detail: https://www.easypay.pt/visa_detail
          account: b2080452-bad1-4455-8ae7-9f5ea552a274
          client_id: EASYP030002
          payment_methods:
          - mb
      x-stoplight:
        id: 0jufsc718xd3e
    Notification_Generic:
      properties:
        id:
          description: ID of the related notified resource
          example: 1bbc14c3-8ca8-492c-887d-1ca86400e4fa
          format: uuid
          type: string
        key:
          description: Merchant identification key
          example: Example Key
          type: string
        type:
          enum:
          - authorisation
          - capture
          - frequent_create
          - void
          - refund
          - chargeback
          - subscription_create
          - subscription_capture
          - out_payment
          example: capture
          type: string
        status:
          enum:
          - failed
          - success
          example: success
          type: string
        messages:
          items:
            example: Your request was successfully created
            type: string
          type: array
        date:
          example: 2022-01-01 10:20:30
          type: string
      x-stoplight:
        id: 5l2wru9ympf80
    Notification_Capture:
      allOf:
      - $ref: '#/components/schemas/Properties_Has_AccountID'
      x-stoplight:
        id: wtt4exksvpd5i
    Notification_Authorisation:
      allOf:
      - $ref: '#/components/schemas/Properties_Has_AccountID'
      - $ref: '#/components/schemas/Properties_Has_AuthorisationID'
      x-stoplight:
        id: zou0f9uqe0pyv
    Capture:
      allOf:
      - $ref: '#/components/schemas/Properties_Has_ID'
      - $ref: '#/components/schemas/Properties_Has_Descriptive'
      - $ref: '#/components/schemas/Properties_Has_Value'
      x-stoplight:
        id: o3kn6cvr6llda
    Payment_FrequentWithTransactions:
      allOf:
      - $ref: '#/components/schemas/Payment_Frequent'
      title: ""
      x-stoplight:
        id: rya335obwphru
    Payment_Frequent_Method_Available:
      enum:
      - mb
      - cc
      - dd
      - mbw
      - vi
      example: dd
      type: string
      x-stoplight:
        id: vgdppogn95p21
    Payment_Frequent_Method_Response:
      properties:
        method:
          $ref: '#/components/schemas/Payment_Frequent_Method_Response_method'
      title: ""
      x-stoplight:
        id: 48vkikdr8elpk
    Payment_Frequent_Base:
      allOf:
      - $ref: '#/components/schemas/Payment_Base'
      - $ref: '#/components/schemas/Properties_Has_MinMaxValue'
      x-stoplight:
        id: gn5ta7jzl2v53
    Payment_Capture:
      example:
        payment_type: payment_type
        transaction_key: transaction_key
        splits:
        - reverts:
          - margin_value: 6.027456183070403
            id: c6056234-a3f9-42de-b944-3ed793fcb6bb
            value: 15.32
          - margin_value: 6.027456183070403
            id: c6056234-a3f9-42de-b944-3ed793fcb6bb
            value: 15.32
          clearing_date: 2000-01-23
          margin_account:
            id: c6056234-a3f9-42de-b944-3ed793fcb6bb
          split_key: 01J1PKR2RPHJNJQGFWGDYXY0KM
          margin_value: 0.8008281904610115
          id: c6056234-a3f9-42de-b944-3ed793fcb6bb
          clearing_period: clearing_period
          value: 15.32
          split_descriptive: Payment of Invoice Nº 1982652
          account:
            id: c6056234-a3f9-42de-b944-3ed793fcb6bb
          status: waiting
        - reverts:
          - margin_value: 6.027456183070403
            id: c6056234-a3f9-42de-b944-3ed793fcb6bb
            value: 15.32
          - margin_value: 6.027456183070403
            id: c6056234-a3f9-42de-b944-3ed793fcb6bb
            value: 15.32
          clearing_date: 2000-01-23
          margin_account:
            id: c6056234-a3f9-42de-b944-3ed793fcb6bb
          split_key: 01J1PKR2RPHJNJQGFWGDYXY0KM
          margin_value: 0.8008281904610115
          id: c6056234-a3f9-42de-b944-3ed793fcb6bb
          clearing_period: clearing_period
          value: 15.32
          split_descriptive: Payment of Invoice Nº 1982652
          account:
            id: c6056234-a3f9-42de-b944-3ed793fcb6bb
          status: waiting
        capture_date: capture_date
        payment_id: payment_id
        force_3ds: false
        descriptive: descriptive
        id: id
        value: 6.027456183070403
        account:
          id: id
        status: status
      properties:
        transaction_key:
          type: string
        capture_date:
          type: string
        account:
          $ref: '#/components/schemas/_subscription_post_201_response_customer'
        status:
          type: string
        splits:
          items:
            $ref: '#/components/schemas/CaptureSplit'
          type: array
        payment_type:
          type: string
        payment_id:
          type: string
        id:
          type: string
        descriptive:
          type: string
        value:
          format: double
          type: number
        force_3ds:
          default: false
          description: Whether or not you want to force the 3DS authentication.
          type: boolean
      x-examples:
        Capture with Splits:
          transaction_key: string
          capture_date: string
          account:
            id: 22ea3cc9-424b-489a-91b7-8955f643dc93
          status: success
          splits:
          - split_key: string
            split_descriptive: Descriptive Example
            value: 1
            account:
              id: 22ea3cc9-424b-489a-91b7-8955f643dc93
            margin_value: 0.1
            margin_account:
              id: 22ea3cc9-424b-489a-91b7-8955f643dc93
          payment_type: single
          payment_id: bfd3518d-fe73-4fb8-b8e6-0ce38cd3ced8
          id: 4c67e74b-a256-4e0a-965d-97bf5d01bd50
          descriptive: Descriptive Example
          value: 17.5
      x-stoplight:
        id: 5mzyhy6i9m2n5
    Payment_Frequent:
      allOf:
      - $ref: '#/components/schemas/Properties_Has_ID'
      - $ref: '#/components/schemas/Properties_Has_CreatedAt'
      - $ref: '#/components/schemas/Payment_Frequent_Base'
      - $ref: '#/components/schemas/Payment_Frequent_Method_Response'
      title: payment
      x-stoplight:
        id: m2hmpgfl5dqj2
    Payment_Base:
      allOf:
      - $ref: '#/components/schemas/Capture'
      - $ref: '#/components/schemas/Properties_Has_ExpirationTime'
      - $ref: '#/components/schemas/Properties_Has_Currency'
      - $ref: '#/components/schemas/Properties_Has_Customer'
      - $ref: '#/components/schemas/Properties_Has_Key'
      - $ref: '#/components/schemas/Properties_Has_Key'
      x-stoplight:
        id: v8v08yguexo08
    CreateSddMandate:
      description: The SDD Mandate object contains the necessary fields to create
        a SEPA Direct Debit mandate. This object ensures that all required information
        is provided to authorize and process SEPA Direct Debit transactions. Object
        required when method is Direct Debit.
      properties:
        id:
          description: "A unique identifier for the resource. While typically formatted\
            \ as a UUID (Universally Unique Identifier), it can also be in other formats\
            \ as defined by the user. This field ensures the resource can be distinctly\
            \ recognized and referenced."
          example: c6056234-a3f9-42de-b944-3ed793fcb6bb
          title: Identifier
          type: string
          x-stoplight:
            id: 08r7fnj0h7hlg
        iban:
          description: "The International Bank Account Number (IBAN) of the debtor's\
            \ account. This field is used to uniquely identify the debtor's bank account\
            \ across international borders, ensuring accurate and efficient processing\
            \ of SEPA Direct Debit transactions. The IBAN is a standardized format\
            \ that includes the country code, check digits, bank code, and account\
            \ number."
          example: PT50000747199140461443823
          maxLength: 34
          title: Iban
          type: string
          x-stoplight:
            id: c05s8oq7c27co
        key:
          description: A customizable text field for users to input their own identifier
            for the resource. This can be any string that helps the user uniquely
            identify or reference the resource in their own system.
          example: 01J1PKR2RPHJNJQGFWGDYXY0KM
          maxLength: 255
          title: Key
          type: string
          x-stoplight:
            id: dzsicjfvhoe5a
        name:
          description: The full name of the individual or entity. This field is used
            to identify the person or organization involved in the transaction or
            mandate.
          maxLength: 100
          type: string
          x-stoplight:
            id: yyytuo0dgfrbr
        email:
          description: "The contact phone number of the individual or entity, including\
            \ the country code indicator (e.g., \"+351\"). This field is used for\
            \ communication purposes, such as contacting the individual for verification\
            \ or support."
          maxLength: 50
          type: string
          x-stoplight:
            id: 5c13agl7g5j9m
        phone:
          description: "The contact phone number of the individual or entity, excluding\
            \ the country code indicator (e.g., \"+351\"). This field is used for\
            \ communication purposes, such as contacting the individual for verification\
            \ or support. If the payment method is MBWAY, the phone number is required\
            \ and is used to send the MBWAY push notification."
          maxLength: 20
          type: string
          x-stoplight:
            id: 40jxl6qdi4o8r
        account_holder:
          description: "The name of the person or entity that holds the bank account.\
            \ This field is used to identify the owner of the bank account involved\
            \ in the transaction, ensuring that the correct account is credited or\
            \ debited."
          maxLength: 100
          type: string
          x-stoplight:
            id: 7xwonnumdtrml
        country_code:
          description: "The two-letter ISO 3166-1 alpha-2 country code representing\
            \ the country of the individual or entity. This field is used to specify\
            \ the country associated with the address or account, ensuring correct\
            \ geographical identification."
          type: string
          x-stoplight:
            id: qs156pz683o6s
        max_num_debits:
          description: "The maximum number of debits that can be made under the mandate.\
            \ This field sets a limit on the number of transactions that can be processed,\
            \ providing control and security over the usage of the direct debit mandate."
          type: string
          x-stoplight:
            id: nlr4fe0ozi0td
      required:
      - account_holder
      - email
      - iban
      - name
      - phone
      x-stoplight:
        id: j99w8d340wgyl
    SddMandate:
      description: The SDD Mandate object contains the necessary fields to create
        a SEPA Direct Debit mandate. This object ensures that all required information
        is provided to authorize and process SEPA Direct Debit transactions. Object
        required when method is Direct Debit.
      example:
        country_code: country_code
        max_num_debits: max_num_debits
        phone: phone
        account_holder: account_holder
        iban: PT50000747199140461443823
        billing_entity: PT16103627
        name: name
        id: c6056234-a3f9-42de-b944-3ed793fcb6bb
        key: 01J1PKR2RPHJNJQGFWGDYXY0KM
        email: email
      properties:
        id:
          description: "A unique identifier for the resource. While typically formatted\
            \ as a UUID (Universally Unique Identifier), it can also be in other formats\
            \ as defined by the user. This field ensures the resource can be distinctly\
            \ recognized and referenced."
          example: c6056234-a3f9-42de-b944-3ed793fcb6bb
          title: Identifier
          type: string
          x-stoplight:
            id: 08r7fnj0h7hlg
        iban:
          description: "The International Bank Account Number (IBAN) of the debtor's\
            \ account. This field is used to uniquely identify the debtor's bank account\
            \ across international borders, ensuring accurate and efficient processing\
            \ of SEPA Direct Debit transactions. The IBAN is a standardized format\
            \ that includes the country code, check digits, bank code, and account\
            \ number."
          example: PT50000747199140461443823
          maxLength: 34
          title: Iban
          type: string
          x-stoplight:
            id: c05s8oq7c27co
        key:
          description: A customizable text field for users to input their own identifier
            for the resource. This can be any string that helps the user uniquely
            identify or reference the resource in their own system.
          example: 01J1PKR2RPHJNJQGFWGDYXY0KM
          maxLength: 255
          title: Key
          type: string
          x-stoplight:
            id: dzsicjfvhoe5a
        name:
          description: The full name of the individual or entity. This field is used
            to identify the person or organization involved in the transaction or
            mandate.
          maxLength: 100
          type: string
          x-stoplight:
            id: vpl9hkr6ljk9e
        email:
          description: "The contact phone number of the individual or entity, including\
            \ the country code indicator (e.g., \"+351\"). This field is used for\
            \ communication purposes, such as contacting the individual for verification\
            \ or support."
          maxLength: 50
          type: string
          x-stoplight:
            id: 2gjki44x85qxz
        phone:
          description: "The contact phone number of the individual or entity, excluding\
            \ the country code indicator (e.g., \"+351\"). This field is used for\
            \ communication purposes, such as contacting the individual for verification\
            \ or support. If the payment method is MBWAY, the phone number is required\
            \ and is used to send the MBWAY push notification."
          maxLength: 20
          type: string
          x-stoplight:
            id: cnq6wxtcdpdu6
        account_holder:
          description: "The name of the person or entity that holds the bank account.\
            \ This field is used to identify the owner of the bank account involved\
            \ in the transaction, ensuring that the correct account is credited or\
            \ debited."
          maxLength: 100
          type: string
          x-stoplight:
            id: s7hzfoyg6l1tv
        country_code:
          description: "The two-letter ISO 3166-1 alpha-2 country code representing\
            \ the country of the individual or entity. This field is used to specify\
            \ the country associated with the address or account, ensuring correct\
            \ geographical identification."
          type: string
          x-stoplight:
            id: nw5xbublx6mnp
        max_num_debits:
          description: "The maximum number of debits that can be made under the mandate.\
            \ This field sets a limit on the number of transactions that can be processed,\
            \ providing control and security over the usage of the direct debit mandate."
          type: string
          x-stoplight:
            id: ib188z7kt3dkn
        billing_entity:
          default: PT16103627
          description: The entity responsible for billing in the context of the SEPA
            Direct Debit (SDD) mandate. This field specifies the identifier of the
            organization that issues the bills and collects the payments under the
            mandate.
          example: PT16103627
          type: string
          x-stoplight:
            id: 8aktwgjln3pp7
      required:
      - account_holder
      - email
      - iban
      - name
      - phone
      x-stoplight:
        id: 4n9ywurvpbpdq
    UpdatableSddMandate:
      description: The SDD Mandate object contains the necessary fields to create
        a SEPA Direct Debit mandate. This object ensures that all required information
        is provided to authorize and process SEPA Direct Debit transactions. Object
        required when method is Direct Debit.
      properties:
        iban:
          description: "The International Bank Account Number (IBAN) of the debtor's\
            \ account. This field is used to uniquely identify the debtor's bank account\
            \ across international borders, ensuring accurate and efficient processing\
            \ of SEPA Direct Debit transactions. The IBAN is a standardized format\
            \ that includes the country code, check digits, bank code, and account\
            \ number."
          example: PT50000747199140461443823
          maxLength: 34
          title: Iban
          type: string
          x-stoplight:
            id: c05s8oq7c27co
        key:
          description: A customizable text field for users to input their own identifier
            for the resource. This can be any string that helps the user uniquely
            identify or reference the resource in their own system.
          example: 01J1PKR2RPHJNJQGFWGDYXY0KM
          maxLength: 255
          title: Key
          type: string
          x-stoplight:
            id: dzsicjfvhoe5a
        name:
          description: The full name of the individual or entity. This field is used
            to identify the person or organization involved in the transaction or
            mandate.
          maxLength: 100
          type: string
          x-stoplight:
            id: w1i92osi170l9
        email:
          description: "The contact phone number of the individual or entity, including\
            \ the country code indicator (e.g., \"+351\"). This field is used for\
            \ communication purposes, such as contacting the individual for verification\
            \ or support."
          maxLength: 50
          type: string
          x-stoplight:
            id: aplppx0vitq8j
        phone:
          description: "The contact phone number of the individual or entity, excluding\
            \ the country code indicator (e.g., \"+351\"). This field is used for\
            \ communication purposes, such as contacting the individual for verification\
            \ or support. If the payment method is MBWAY, the phone number is required\
            \ and is used to send the MBWAY push notification."
          maxLength: 20
          type: string
          x-stoplight:
            id: s1su6gi724lvx
        account_holder:
          description: "The name of the person or entity that holds the bank account.\
            \ This field is used to identify the owner of the bank account involved\
            \ in the transaction, ensuring that the correct account is credited or\
            \ debited."
          maxLength: 100
          type: string
          x-stoplight:
            id: u3tpr27j5ccvw
        country_code:
          description: "The two-letter ISO 3166-1 alpha-2 country code representing\
            \ the country of the individual or entity. This field is used to specify\
            \ the country associated with the address or account, ensuring correct\
            \ geographical identification."
          type: string
          x-stoplight:
            id: aiio5zv4omyho
        max_num_debits:
          description: "The maximum number of debits that can be made under the mandate.\
            \ This field sets a limit on the number of transactions that can be processed,\
            \ providing control and security over the usage of the direct debit mandate."
          type: string
          x-stoplight:
            id: ifvh0y96kfwe7
        billing_entity:
          default: PT16103627
          description: The entity responsible for billing in the context of the SEPA
            Direct Debit (SDD) mandate. This field specifies the identifier of the
            organization that issues the bills and collects the payments under the
            mandate.
          example: PT16103627
          type: string
          x-stoplight:
            id: hf9h2roks3g3o
      x-stoplight:
        id: xjipf2i9iffu8
    Checkout_Details:
      example:
        payment:
          methods:
          - mb
          - mb
          capture_now: true
          expiration_time: expiration_time
          max_captures: 1
          frequency: frequency
          min_value: 6
          start_time: start_time
          retries: 5
          failover: true
          currency: currency
          id: id
          key: key
          status: waiting
          max_value: 0
        message:
        - message
        - message
        checkout:
          id: id
          status: pending
        value: 5.637376656633329
        status: failed
      properties:
        status:
          enum:
          - failed
          - success
          type: string
        message:
          items:
            type: string
          type: array
        checkout:
          $ref: '#/components/schemas/Checkout_Details_checkout'
        payment:
          $ref: '#/components/schemas/Checkout_Details_payment'
        value:
          type: number
      x-examples:
        example-1:
          status: success
          message:
          - checkout is not finished yet
          checkout:
            id: ced0ff93-d64f-47fc-b29e-4e5481cb38ec
            status: pending
          payment:
            id: df9d691d-f7fe-4ce4-8205-323888a769f3
            status: success
            methods:
            - mb
            - cc
            - mbw
            - vi
            - uf
            expiration_time: 2022-12-12T16:05:00Z
            currency: EUR
            key: Example Key
            max_value: 20
            min_value: 2
            frequency: 1W
            max_captures: 10
            start_time: 2022-12-05T12:05:00Z
            failover: true
            capture_now: true
            retries: 2
          value: 17.5
      x-stoplight:
        id: hx443o3ud3moe
    Mbway_sdk:
      properties:
        purchase_token:
          example: 626E6AA2224D017917D839D4D39296B49441A1D10DA7E8DB6E7E1A4356DDE75429531BEB32190C6D736FA12C7A116CA5F3FCAEE72570406F51371A0CB6E14B6B
          type: string
        initial_timestamp:
          example: 2018-01-01 23:59:59
          type: string
        merchant_operation_id:
          description: unique-concatenation between client identifier and client operation
            id (total max 20 chars)
          example: TESTACCOUNT5436
          type: string
        payload:
          example: "{'purchase_token':'EDEB342D3588DDDEEE3E070476E72A6B222E3456C1C825D3E89A734005CE81F69986045424984F55B3233CBFD090A8A564071BBB493F34C4849C964','initial_timestamp':'2018-09-20T10:46:08+01:00','merchant_operation_id':'TESTACCOUNT5436','payload':{'amount':1000,'currencyCode':'9782'}}"
          type: string
      x-stoplight:
        id: 539kuyz7xgx2f
    Properties_Has_ReferenceAdc:
      properties:
        reference_adc:
          example: "987654321123"
          type: string
      x-stoplight:
        id: kc2hseoonokks
    Properties_Has_Value:
      properties:
        value:
          description: Value will be rounded to 2 decimals
          example: 17.5
          format: double
          minimum: 0.5
          type: number
      required:
      - value
      x-stoplight:
        id: m024euyw0v07t
    Properties_Has_Key:
      properties:
        key:
          description: Merchant identification key
          example: Example Key
          maxLength: 50
          type: string
      x-stoplight:
        id: jq7p2s3mvehvu
    Properties_Has_ListMetaData:
      properties:
        meta:
          $ref: '#/components/schemas/Properties_Has_ListMetaData_meta'
      x-stoplight:
        id: nhncz9o3urb37
    Properties_Has_AccountID:
      properties:
        account:
          allOf:
          - $ref: '#/components/schemas/Properties_Has_ID'
      x-stoplight:
        id: evhws48ete5te
    Properties_Has_MinMaxValue:
      properties:
        max_value:
          description: Value will be rounded to 2 decimals
          example: 20
          format: double
          minimum: 0
          type: number
        min_value:
          description: Value will be rounded to 2 decimals
          example: 2
          format: double
          minimum: 0
          type: number
        unlimited_payments:
          default: true
          description: "Transactions will be unlimited, max or min value will be refreshed\
            \ on each payment"
          example: false
          type: boolean
      x-stoplight:
        id: kujhkuifuf20v
    Properties_Has_CreatedAt:
      properties:
        created_at:
          description: Date when payment was created
          example: 2017-12-12 16:05:02
          type: string
      x-stoplight:
        id: kfuzjbzwhi748
    Properties_Has_Currency:
      properties:
        currency:
          $ref: '#/components/schemas/Currency'
      x-stoplight:
        id: gz109ur4b16vr
    Properties_Has_AuthorisationID:
      properties:
        authorisation:
          allOf:
          - $ref: '#/components/schemas/Properties_Has_ID'
      x-stoplight:
        id: vp81ccdulkjto
    Properties_Has_Descriptive:
      properties:
        descriptive:
          description: This will appear in the bank statement/mbway application
          example: Descriptive Example
          maxLength: 255
          type: string
      x-stoplight:
        id: jfj10x0nkbaso
    Properties_Has_ExpirationTime:
      properties:
        expiration_time:
          description: Optional
          example: 2017-12-12 16:05
          format: Y-m-d H:i
          type: string
      x-stoplight:
        id: ny0vy1thfzwjz
    Properties_Has_Customer:
      properties:
        customer:
          $ref: '#/components/schemas/Customer'
      x-stoplight:
        id: is9hjb1vijhzu
    Properties_Has_ID:
      example:
        id: 4c67e74b-a256-4e0a-965d-97bf5d01bd50
      properties:
        id:
          example: 4c67e74b-a256-4e0a-965d-97bf5d01bd50
          format: uuid
          type: string
      x-stoplight:
        id: 9ns2ltc48xqhx
    StatusFailed:
      example:
        message:
        - Custom error message
        - Custom error message
        status: error
      properties:
        status:
          example: error
          type: string
        message:
          items:
            example: Custom error message
            type: string
          type: array
      x-stoplight:
        id: 73oduwyb68rue
    StatusDetails:
      example:
        message:
        - Your request was successfully created
        - Your request was successfully created
        status: ok
      properties:
        status:
          example: ok
          type: string
        message:
          items:
            example: Your request was successfully created
            type: string
          type: array
      x-stoplight:
        id: 5mamz41lr2gax
    Customer:
      description: The Customer object contains detailed information about the customer
        involved in the transaction.
      example:
        fiscal_number: PT277712580
        phone: "962496235"
        name: Jonh Doe
        phone_indicative: "351"
        language: PT
        id: c6056234-a3f9-42de-b944-3ed793fcb6bb
        email: email
        key: 01J1PKR2RPHJNJQGFWGDYXY0KM
      properties:
        id:
          description: "A unique identifier for the resource. While typically formatted\
            \ as a UUID (Universally Unique Identifier), it can also be in other formats\
            \ as defined by the user. This field ensures the resource can be distinctly\
            \ recognized and referenced."
          example: c6056234-a3f9-42de-b944-3ed793fcb6bb
          title: Identifier
          type: string
          x-stoplight:
            id: 08r7fnj0h7hlg
        name:
          description: The full name of the customer. This field is used to identify
            the customer and personalize interactions. It typically includes the customer's
            first name and last name.
          example: Jonh Doe
          maxLength: 255
          type: string
          x-stoplight:
            id: qe4qu2kakw5m1
        email:
          description: "The email address of the customer. This field is used for\
            \ communication purposes, including sending transaction confirmations,\
            \ receipts, and other notifications related to the customer's activities."
          format: email
          maxLength: 70
          type: string
          x-stoplight:
            id: n0cacptc22df1
        phone:
          description: "The contact phone number of the customer, excluding the country\
            \ code indicator (e.g., \"+351\"). This field is used for communication\
            \ purposes. If the payment method is MBWAY, the phone_number is required\
            \ and is used to send the MBWAY push notification."
          example: "962496235"
          maxLength: 15
          type: string
          x-stoplight:
            id: tcjl0e3e166ku
        phone_indicative:
          default: 351
          description: "The country code indicator for the customer's phone number\
            \ (e.g., \"351\" for Portugal). This field is used in conjunction with\
            \ the phone number to ensure proper international dialing and communication."
          example: "351"
          maxLength: 5
          type: string
          x-stoplight:
            id: m6qte0ok491r0
        fiscal_number:
          description: The customer's fiscal number (prefixed by the country code).
          example: PT277712580
          maxLength: 20
          type: string
          x-stoplight:
            id: n0fmev0ntde6l
        key:
          description: A customizable text field for users to input their own identifier
            for the resource. This can be any string that helps the user uniquely
            identify or reference the resource in their own system.
          example: 01J1PKR2RPHJNJQGFWGDYXY0KM
          maxLength: 255
          title: Key
          type: string
          x-stoplight:
            id: dzsicjfvhoe5a
        language:
          default: PT
          description: |
            The language preference of the customer, specified in the ISO 639-1 Alpha-2 format (e.g., "EN" for English, "PT" for Portuguese). This field is used to indicate the customer's preferred language for communication and documentation.
          example: PT
          maxLength: 2
          minLength: 2
          type: string
          x-stoplight:
            id: vzog3cvywipbf
      x-stoplight:
        id: 6by4p622mp4th
    UpdatableCustomer:
      description: The Customer object contains detailed information about the customer
        involved in the transaction.
      properties:
        name:
          description: The full name of the customer. This field is used to identify
            the customer and personalize interactions. It typically includes the customer's
            first name and last name.
          example: Jonh Doe
          maxLength: 255
          type: string
          x-stoplight:
            id: gfapiunn783vb
        email:
          description: "The email address of the customer. This field is used for\
            \ communication purposes, including sending transaction confirmations,\
            \ receipts, and other notifications related to the customer's activities."
          format: email
          maxLength: 70
          type: string
          x-stoplight:
            id: utvzxsh8wfc40
        phone:
          description: "The contact phone number of the customer, excluding the country\
            \ code indicator (e.g., \"+351\"). This field is used for communication\
            \ purposes. If the payment method is MBWAY, the phone_number is required\
            \ and is used to send the MBWAY push notification."
          example: "962496235"
          maxLength: 15
          type: string
          x-stoplight:
            id: dt9smbcias1i1
        phone_indicative:
          default: 351
          description: "The country code indicator for the customer's phone number\
            \ (e.g., \"351\" for Portugal). This field is used in conjunction with\
            \ the phone number to ensure proper international dialing and communication."
          example: "351"
          maxLength: 5
          type: string
          x-stoplight:
            id: py1bd3f0y7mmq
        fiscal_number:
          description: The customer's fiscal number (prefixed by the country code).
          example: PT277712580
          maxLength: 20
          type: string
          x-stoplight:
            id: 6fys1a46k5lju
        key:
          description: A customizable text field for users to input their own identifier
            for the resource. This can be any string that helps the user uniquely
            identify or reference the resource in their own system.
          example: 01J1PKR2RPHJNJQGFWGDYXY0KM
          maxLength: 255
          title: Key
          type: string
          x-stoplight:
            id: dzsicjfvhoe5a
        language:
          default: PT
          description: |
            The language preference of the customer, specified in the ISO 639-1 Alpha-2 format (e.g., "EN" for English, "PT" for Portuguese). This field is used to indicate the customer's preferred language for communication and documentation.
          example: PT
          maxLength: 2
          minLength: 2
          type: string
          x-stoplight:
            id: 46v0lieziqqyb
      x-stoplight:
        id: rb20fsz32lr74
    ResponseMeta:
      description: |-
        The Pagination object contains detailed information about the pagination of a collection of records.

        This object is used to provide navigation and context for paginated results, allowing users to easily move between pages and understand the scope of the dataset.
      example:
        records:
          per_page: 5
          total: 1
        links:
          next: next
          last: last
          prev: prev
          first: first
        page:
          current: 0
          total: 6
      properties:
        page:
          $ref: '#/components/schemas/ResponseMeta_page'
        records:
          $ref: '#/components/schemas/ResponseMeta_records'
        links:
          $ref: '#/components/schemas/ResponseMeta_links'
      required:
      - page
      x-stoplight:
        id: qsjip6upfi7ir
      x-examples:
        example-1:
          page:
            current: 1
            total: 8
          records:
            total: 20
            per_page: 20
          links:
            first: ?page=1
            prev: ""
            next: ?page=2
            last: ?page=8
    Customer-Create-Or-Update:
      properties:
        id:
          description: "Optional - uuid from previous created customer, if and id\
            \ is provided the other properties will do an upsert. "
          format: uuid
          type: string
        name:
          description: Name of the customer
          maxLength: 255
          type: string
        email:
          description: The email of the customer
          format: email
          maxLength: 70
          type: string
        phone:
          maxLength: 15
          type: string
        phone_indicative:
          default: "+351"
          maxLength: 5
          type: string
        fiscal_number:
          description: Fiscal Number must be prefixed with country code
          maxLength: 20
          type: string
        key:
          maxLength: 255
          type: string
        language:
          default: PT
          description: ISO Alpha-2 code
          example: PT
          type: string
      required:
      - email
      - name
      - phone
      x-examples:
        Example 1:
          id: 22ea3cc9-424b-489a-91b7-8955f643dc93
          name: Customer Example
          email: customer@example.com
          phone: "911234567"
          phone_indicative: "+351"
          fiscal_number: PT123456789
          key: Key Example
          language: PT
      x-stoplight:
        id: p5btiy5l6iuse
    Account:
      properties:
        id:
          format: uuid
          type: string
      title: Account
      x-stoplight:
        id: 4aqwf658tzr8i
    Out-Account:
      properties:
        account_holder:
          description: Bank account holder name
          maxLength: 100
          type: string
        iban:
          description: Only IBANS from SEPA zones are supported
          maxLength: 34
          type: string
        email:
          maxLength: 50
          type: string
        phone:
          maxLength: 20
          type: string
        key:
          description: Custom string controlled by our clients
          maxLength: 255
          type: string
        country_code:
          deprecated: true
          description: Bank account country code
          type: string
      required:
      - account_holder
      - email
      - iban
      - phone
      x-examples:
        Default:
          account_holder: Acount Name Example
          iban: PT50002700000001234567833
          email: customer@example.com
          phone: "911234567"
          key: Key Example
          country_code: PT
      x-stoplight:
        id: h1bczn88qxxbk
    CaptureSplit:
      example:
        reverts:
        - margin_value: 6.027456183070403
          id: c6056234-a3f9-42de-b944-3ed793fcb6bb
          value: 15.32
        - margin_value: 6.027456183070403
          id: c6056234-a3f9-42de-b944-3ed793fcb6bb
          value: 15.32
        clearing_date: 2000-01-23
        margin_account:
          id: c6056234-a3f9-42de-b944-3ed793fcb6bb
        split_key: 01J1PKR2RPHJNJQGFWGDYXY0KM
        margin_value: 0.8008281904610115
        id: c6056234-a3f9-42de-b944-3ed793fcb6bb
        clearing_period: clearing_period
        value: 15.32
        split_descriptive: Payment of Invoice Nº 1982652
        account:
          id: c6056234-a3f9-42de-b944-3ed793fcb6bb
        status: waiting
      properties:
        id:
          description: "A unique identifier for the resource. While typically formatted\
            \ as a UUID (Universally Unique Identifier), it can also be in other formats\
            \ as defined by the user. This field ensures the resource can be distinctly\
            \ recognized and referenced."
          example: c6056234-a3f9-42de-b944-3ed793fcb6bb
          title: Identifier
          type: string
          x-stoplight:
            id: 08r7fnj0h7hlg
        split_key:
          description: A customizable text field for users to input their own identifier
            for the resource. This can be any string that helps the user uniquely
            identify or reference the resource in their own system.
          example: 01J1PKR2RPHJNJQGFWGDYXY0KM
          maxLength: 255
          title: Key
          type: string
          x-stoplight:
            id: dzsicjfvhoe5a
        split_descriptive:
          description: "A text field that describes the transaction as it will appear\
            \ on the end user's account statement. This is typically used to provide\
            \ clear, recognizable information about the payment, such as \"Payment\
            \ of Invoice Nº 1982652\" or \"Ticket for Queen\"."
          example: Payment of Invoice Nº 1982652
          maxLength: 255
          title: Descriptive
          type: string
          x-stoplight:
            id: lkifoepeeh5b7
        account:
          $ref: '#/components/schemas/SplitAccount'
        value:
          description: "The monetary amount requested for the transaction. This field\
            \ is formatted as a double, and will be rounded to two decimal places\
            \ (e.g., \"100.00\"). The value must be greater than or equal to 0.5."
          example: 15.32
          format: double
          minimum: 0.5
          title: Value
          type: number
          x-stoplight:
            id: g0svedglp94cc
            explicitProperties:
            - title
            - type
            - format
            - minimum
            - description
            - examples
        clearing_date:
          description: The clearing date refers to the specific date when a financial
            transaction is finalized and the funds are transferred from one account
            to another. This is the point at which the payment is officially completed
            and the amount is debited from the payer’s account and credited to the
            payee’s account.
          format: date
          type: string
        clearing_period:
          description: "The clearing period must follow the format 1Y, 10W or 30D.\
            \ Y for Years, W for weeks, D for days. Minimum is 7 days, maximum is\
            \ 1 year."
          maxLength: 4
          minLength: 2
          pattern: "^([\\d]+)([YWD])$"
          title: ClearingPeriod
          type: string
          x-stoplight:
            id: utd04ixixl73r
        margin_account:
          $ref: '#/components/schemas/MarginAccount'
        margin_value:
          description: "The monetary amount designated as the margin in a split payment.\
            \ This field is formatted as a double, and will be rounded to two decimal\
            \ places (e.g., \"10.00\"). The value must be less than the total value\
            \ of the split. This specifies the portion of the funds that should be\
            \ routed to the margin account."
          format: double
          title: MarginValue
          type: number
          x-stoplight:
            id: b6xg7kqyhg4nv
        status:
          description: The status of the Split
          enum:
          - waiting
          - success
          type: string
        reverts:
          items:
            $ref: '#/components/schemas/Reverts'
          type: array
      required:
      - id
      - status
      - value
      x-examples:
        Split with reverts:
          split_key: first split
          split_descriptive: This is the first split
          account:
            id: cec63a1a-97f6-4052-aac9-942b2c035131
          value: 10
          clearing_date: 2024-06-20
          margin_account:
            id: 4debf80d-9eff-4a89-8d58-60509db9074c
          margin_value: 0.25
          status: success
          id: e9083fcf-8362-4859-b162-0c3a99854573
          reverts:
          - id: f7e0d075-19b7-47da-9ffa-f64ff4002b6a
            value: 10
            margin_value: 0.25
        Pending split:
          split_key: first split
          split_descriptive: This is the first split
          account:
            id: cec63a1a-97f6-4052-aac9-942b2c035131
          value: 10
          clearing_date: 2024-06-20
          margin_account:
            id: 4debf80d-9eff-4a89-8d58-60509db9074c
          margin_value: 0.25
          status: waiting
          id: e9083fcf-8362-4859-b162-0c3a99854573
      x-stoplight:
        id: jn6thxgb7m9mz
    Currency:
      description: "The currency code in ISO 4217 format (e.g., \"EUR\" for Euro).\
        \ This field specifies the type of currency used in financial operation."
      enum:
      - EUR
      title: Currency
      type: string
      x-stoplight:
        id: w25yfb28rh8ww
    Frequent:
      example:
        min_value: 6.027456183070403
        method:
          last_four: last_four
          iban: iban
          alias: alias
          type: mb
          card_type: MasterCard
          expiration_date: expiration_date
          sdd_mandate:
            country_code: country_code
            max_num_debits: max_num_debits
            phone: phone
            account_holder: account_holder
            billing_entity: billing_entity
            iban: iban
            name: name
            id: id
            key: key
            email: email
          url: https://cc.test.easypay.pt/start/ab2f2eb6-3655-4951-98ae-36367d5f3727
          status: waiting
        expiration_time: expiration_time
        created_at: 2017-12-12 16:05:02
        currency: currency
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        unlimited_payments: true
        key: key
        customer:
          language: language
          id: id
          email: email
          key: key
        max_value: 0.8008281904610115
      properties:
        id:
          format: uuid
          type: string
        key:
          type: string
        expiration_time:
          type: string
        customer:
          $ref: '#/components/schemas/Frequent_customer'
        method:
          $ref: '#/components/schemas/Frequent_method'
        currency:
          type: string
        max_value:
          type: number
        min_value:
          type: number
        unlimited_payments:
          type: boolean
        created_at:
          description: Date when payment was created.
          example: 2017-12-12 16:05:02
          type: string
      required:
      - created_at
      - id
      - max_value
      - min_value
      title: Frequent
    Single:
      example:
        method:
          reference: "665876931"
          last_four: "1234"
          iban: PT50000747199140461443823
          alias: alias
          type: type
          card_type: VISA
          expiration_date: expiration_date
          sdd_mandate:
            country_code: country_code
            max_num_debits: max_num_debits
            phone: phone
            account_holder: account_holder
            iban: PT50000747199140461443823
            billing_entity: PT16103627
            name: name
            id: c6056234-a3f9-42de-b944-3ed793fcb6bb
            key: 01J1PKR2RPHJNJQGFWGDYXY0KM
            email: email
          url: https://cc.easypay.pt/v3/public/card-details/cec55ab6-bda3-4ab3-af22-04d2ad2c046a
          entity: "11683"
          status: status
        expiration_time: 2024-06-30 21:38:31
        payment_status: paid
        descriptive: Payment of Invoice Nº 1982652
        created_at: 2024-06-30 21:38:31
        currency: EUR
        id: c6056234-a3f9-42de-b944-3ed793fcb6bb
        type: sale
        value: 15.32
        key: 01J1PKR2RPHJNJQGFWGDYXY0KM
        customer:
          fiscal_number: PT277712580
          phone: "962496235"
          name: Jonh Doe
          phone_indicative: "351"
          language: PT
          id: c6056234-a3f9-42de-b944-3ed793fcb6bb
          email: email
          key: 01J1PKR2RPHJNJQGFWGDYXY0KM
      properties:
        id:
          description: "A unique identifier for the resource. While typically formatted\
            \ as a UUID (Universally Unique Identifier), it can also be in other formats\
            \ as defined by the user. This field ensures the resource can be distinctly\
            \ recognized and referenced."
          example: c6056234-a3f9-42de-b944-3ed793fcb6bb
          title: Identifier
          type: string
          x-stoplight:
            id: 08r7fnj0h7hlg
        type:
          $ref: '#/components/schemas/OperationType'
        key:
          description: A customizable text field for users to input their own identifier
            for the resource. This can be any string that helps the user uniquely
            identify or reference the resource in their own system.
          example: 01J1PKR2RPHJNJQGFWGDYXY0KM
          maxLength: 255
          title: Key
          type: string
          x-stoplight:
            id: dzsicjfvhoe5a
        descriptive:
          description: "A text field that describes the transaction as it will appear\
            \ on the end user's account statement. This is typically used to provide\
            \ clear, recognizable information about the payment, such as \"Payment\
            \ of Invoice Nº 1982652\" or \"Ticket for Queen\"."
          example: Payment of Invoice Nº 1982652
          maxLength: 255
          title: Descriptive
          type: string
          x-stoplight:
            id: lkifoepeeh5b7
        expiration_time:
          description: The timestamp indicating when the resource will expire. It
            is formatted as "YYYY-MM-DD HH:MM
          example: 2024-06-30 21:38:31
          type: string
        customer:
          $ref: '#/components/schemas/Customer'
        method:
          $ref: '#/components/schemas/Method'
        currency:
          $ref: '#/components/schemas/Currency'
        value:
          description: "The monetary amount requested for the transaction. This field\
            \ is formatted as a double, and will be rounded to two decimal places\
            \ (e.g., \"100.00\"). The value must be greater than or equal to 0.5."
          example: 15.32
          format: double
          minimum: 0.5
          title: Value
          type: number
          x-stoplight:
            id: g0svedglp94cc
            explicitProperties:
            - title
            - type
            - format
            - minimum
            - description
            - examples
        created_at:
          description: The timestamp indicating when the resource was created. It
            is formatted as "YYYY-MM-DD HH:MM
          example: 2024-06-30 21:38:31
          type: string
        payment_status:
          $ref: '#/components/schemas/SinglePaymentStatus'
      required:
      - currency
      - customer
      - id
      - method
      - payment_status
      - value
      x-examples:
        Example 1:
          id: f5d7148b-aab5-47c6-8cfa-557b0d58ef7b
          type: sale
          key: Example Key
          expiration_time: 2024-07-01T21:38:00Z
          customer:
            id: 649e88cf-0b78-4c36-8f99-33f5ebb812a1
            name: Jos*** Gom***
            email: cus***@example.com
            phone: 911***567
            fiscal_number: '***'
            language: ""
          method:
            type: MBW
            status: active
          currency: EUR
          value: 200
          created_at: 2024-06-30 21:38:31
          payment_status: pending
      x-stoplight:
        id: r4ge1mnofpniz
    OperationType:
      default: sale
      description: Specifies the type of financial operation being performed. Possible
        values are "Sale" (a complete transaction where funds are immediately captured)
        or "Authorisation" (a temporary hold on funds pending a future capture).
      enum:
      - sale
      - authorisation
      example: sale
      title: OperationType
      type: string
      x-stoplight:
        id: gl0jeprjnmgnx
    Descriptive:
      description: "A text field that describes the transaction as it will appear\
        \ on the end user's account statement. This is typically used to provide clear,\
        \ recognizable information about the payment, such as \"Payment of Invoice\
        \ Nº 1982652\" or \"Ticket for Queen\"."
      example: Payment of Invoice Nº 1982652
      maxLength: 255
      title: Descriptive
      type: string
      x-stoplight:
        id: lkifoepeeh5b7
    Key:
      description: A customizable text field for users to input their own identifier
        for the resource. This can be any string that helps the user uniquely identify
        or reference the resource in their own system.
      example: 01J1PKR2RPHJNJQGFWGDYXY0KM
      maxLength: 255
      title: Key
      type: string
      x-stoplight:
        id: dzsicjfvhoe5a
    SinglePaymentStatus:
      description: |-
        Indicates the current status of the payment. Possible values include:

            "pending": The payment is awaiting processing.
            "paid": The payment has been completed successfully.
            "authorised": The payment has been authorized but not yet captured.
            "error": An error occurred during the payment process.
            "deleted": The payment has been deleted.
            "failed": The payment attempt failed.
            "active": The payment is currently active.
            "voided": The payment has been voided.
      enum:
      - pending
      - paid
      - authorised
      - error
      - deleted
      - failed
      - active
      example: paid
      title: SinglePaymentStatus
      type: string
      x-stoplight:
        id: 1nqktxxgzx20q
    Identifier:
      description: "A unique identifier for the resource. While typically formatted\
        \ as a UUID (Universally Unique Identifier), it can also be in other formats\
        \ as defined by the user. This field ensures the resource can be distinctly\
        \ recognized and referenced."
      example: c6056234-a3f9-42de-b944-3ed793fcb6bb
      title: Identifier
      type: string
      x-stoplight:
        id: 08r7fnj0h7hlg
    Method:
      example:
        reference: "665876931"
        last_four: "1234"
        iban: PT50000747199140461443823
        alias: alias
        type: type
        card_type: VISA
        expiration_date: expiration_date
        sdd_mandate:
          country_code: country_code
          max_num_debits: max_num_debits
          phone: phone
          account_holder: account_holder
          iban: PT50000747199140461443823
          billing_entity: PT16103627
          name: name
          id: c6056234-a3f9-42de-b944-3ed793fcb6bb
          key: 01J1PKR2RPHJNJQGFWGDYXY0KM
          email: email
        url: https://cc.easypay.pt/v3/public/card-details/cec55ab6-bda3-4ab3-af22-04d2ad2c046a
        entity: "11683"
        status: status
      properties:
        type:
          type: string
          x-stoplight:
            id: 56pfhsz32den6
        status:
          type: string
          x-stoplight:
            id: r7w3a0u90m02u
        sdd_mandate:
          $ref: '#/components/schemas/SddMandate'
        card_type:
          description: "Indicates the type of credit card used for the payment (e.g.,\
            \ \"Visa\", \"MasterCard\"). This field is only applicable for credit\
            \ card transactions."
          enum:
          - VISA
          - MasterCard
          type: string
          x-stoplight:
            id: vsx0epazcgxxd
        last_four:
          description: The last four digits of the credit card number used for the
            payment. This field is only applicable for credit card transactions.
          example: "1234"
          type: string
          x-stoplight:
            id: msfhdt8v13qh9
        expiration_date:
          type: string
          x-stoplight:
            id: 7ro6jvj40gfec
        url:
          description: The URL where the merchant should redirect the user to complete
            Credit Card Payments. This field is only applicable and available for
            credit card payment transactions.
          example: https://cc.easypay.pt/v3/public/card-details/cec55ab6-bda3-4ab3-af22-04d2ad2c046a
          format: uri
          type: string
          x-stoplight:
            id: vpgeobnu8gsoa
        alias:
          deprecated: true
          description: "A unique identifier for the user within the MBWay system,\
            \ used to identify the user in the MBWay SDK. This field is only applicable\
            \ and available for MBWay transactions."
          type: string
          x-stoplight:
            id: d8t6rq5yos6nt
        entity:
          description: "The identifier for the Multibanco entity to which the payment\
            \ should be routed. This field specifies the entity code required for\
            \ processing the payment through the Multibanco network, ensuring that\
            \ the payment is directed to the correct recipient."
          example: "11683"
          maxLength: 5
          minLength: 5
          type: string
          x-stoplight:
            id: 70xgxxzm115oe
        reference:
          description: The unique payment reference number issued for the specific
            Multibanco entity. This field is used by the end user to make a payment
            at an ATM or through home banking. It ensures that the payment is correctly
            attributed to the intended transaction and recipient.
          example: "665876931"
          maxLength: 9
          minLength: 9
          type: string
          x-stoplight:
            id: k2iy52r2vhgwr
        iban:
          description: "The International Bank Account Number (IBAN) of the debtor's\
            \ account. This field is used to uniquely identify the debtor's bank account\
            \ across international borders, ensuring accurate and efficient processing\
            \ of SEPA Direct Debit transactions. The IBAN is a standardized format\
            \ that includes the country code, check digits, bank code, and account\
            \ number."
          example: PT50000747199140461443823
          maxLength: 34
          title: Iban
          type: string
          x-stoplight:
            id: c05s8oq7c27co
      required:
      - status
      - type
      title: MethodDetails
      x-stoplight:
        id: 4uj7i3ybsywgg
    Value:
      description: "The monetary amount requested for the transaction. This field\
        \ is formatted as a double, and will be rounded to two decimal places (e.g.,\
        \ \"100.00\"). The value must be greater than or equal to 0.5."
      example: 15.32
      format: double
      minimum: 0.5
      title: Value
      type: number
      x-stoplight:
        id: g0svedglp94cc
        explicitProperties:
        - title
        - type
        - format
        - minimum
        - description
        - examples
    ResponseStatus:
      description: |-
        Indicates the response status of the API request. Possible values are:

            - ok: Returned for all successful responses with a 2xx status code.
            - error: Returned for any unsuccessful response with a non-2xx status code.

        This field helps to quickly identify the overall outcome of the API request.
      enum:
      - ok
      - error
      title: ResponseStatus
      type: string
      x-stoplight:
        id: t6l2rbrk2lvj7
    ResponseMessage:
      description: An array of human-readable messages included in the response. These
        messages provide detailed information about the success of the operation or
        explain the reasons for any failure. This field is always present in the response
        to ensure clarity and transparency regarding the outcome of the API request.
      items:
        type: string
        x-stoplight:
          id: 7b6ch52iyqms2
      type: array
      x-stoplight:
        id: dy98yerk1oirb
    SingleCaptureFull:
      description: The Capture object contains all the necessary information for executing
        a fund capture action. It defines how and where the funds should be routed
        upon capturing a transaction. This object is essential for finalizing transactions
        and ensuring the correct allocation of funds.
      example:
        transaction_key: 01J1PKR2RPHJNJQGFWGDYXY0KM
        splits:
        - reverts:
          - margin_value: 6.027456183070403
            id: c6056234-a3f9-42de-b944-3ed793fcb6bb
            value: 15.32
          - margin_value: 6.027456183070403
            id: c6056234-a3f9-42de-b944-3ed793fcb6bb
            value: 15.32
          clearing_date: 2000-01-23
          margin_account:
            id: c6056234-a3f9-42de-b944-3ed793fcb6bb
          split_key: 01J1PKR2RPHJNJQGFWGDYXY0KM
          margin_value: 0.8008281904610115
          id: c6056234-a3f9-42de-b944-3ed793fcb6bb
          clearing_period: clearing_period
          value: 15.32
          split_descriptive: Payment of Invoice Nº 1982652
          account:
            id: c6056234-a3f9-42de-b944-3ed793fcb6bb
          status: waiting
        - reverts:
          - margin_value: 6.027456183070403
            id: c6056234-a3f9-42de-b944-3ed793fcb6bb
            value: 15.32
          - margin_value: 6.027456183070403
            id: c6056234-a3f9-42de-b944-3ed793fcb6bb
            value: 15.32
          clearing_date: 2000-01-23
          margin_account:
            id: c6056234-a3f9-42de-b944-3ed793fcb6bb
          split_key: 01J1PKR2RPHJNJQGFWGDYXY0KM
          margin_value: 0.8008281904610115
          id: c6056234-a3f9-42de-b944-3ed793fcb6bb
          clearing_period: clearing_period
          value: 15.32
          split_descriptive: Payment of Invoice Nº 1982652
          account:
            id: c6056234-a3f9-42de-b944-3ed793fcb6bb
          status: waiting
        capture_date: 2000-01-23
        descriptive: Payment of Invoice Nº 1982652
        id: c6056234-a3f9-42de-b944-3ed793fcb6bb
        account:
          id: c6056234-a3f9-42de-b944-3ed793fcb6bb
        status: delayed
      properties:
        id:
          description: "A unique identifier for the resource. While typically formatted\
            \ as a UUID (Universally Unique Identifier), it can also be in other formats\
            \ as defined by the user. This field ensures the resource can be distinctly\
            \ recognized and referenced."
          example: c6056234-a3f9-42de-b944-3ed793fcb6bb
          title: Identifier
          type: string
          x-stoplight:
            id: 08r7fnj0h7hlg
        status:
          $ref: '#/components/schemas/CaptureStatus'
        descriptive:
          description: "A text field that describes the transaction as it will appear\
            \ on the end user's account statement. This is typically used to provide\
            \ clear, recognizable information about the payment, such as \"Payment\
            \ of Invoice Nº 1982652\" or \"Ticket for Queen\"."
          example: Payment of Invoice Nº 1982652
          maxLength: 255
          title: Descriptive
          type: string
          x-stoplight:
            id: lkifoepeeh5b7
        transaction_key:
          description: A customizable text field for users to input their own identifier
            for the resource. This can be any string that helps the user uniquely
            identify or reference the resource in their own system.
          example: 01J1PKR2RPHJNJQGFWGDYXY0KM
          maxLength: 255
          title: Key
          type: string
          x-stoplight:
            id: dzsicjfvhoe5a
        capture_date:
          description: "The date when the action should be executed. This field specifies\
            \ the exact day for capturing the transaction, formatted as \"YYYY-MM-DD\"\
            \ (e.g., \"2024-06-30\"). It is optional and defaults to the current date\
            \ if not specified."
          format: date
          title: CaptureDate
          type: string
          x-stoplight:
            id: tfl0okq7p39kq
        account:
          $ref: '#/components/schemas/CaptureAccount'
        splits:
          items:
            $ref: '#/components/schemas/CaptureSplit'
          type: array
          x-stoplight:
            id: 4l234raxrv16d
      required:
      - descriptive
      - id
      - status
      title: SingleCaptureFull
      x-stoplight:
        id: on26jusvkz7dj
    CaptureFull:
      description: The Capture object contains all the necessary information for executing
        a fund capture action. It defines how and where the funds should be routed
        upon capturing a transaction. This object is essential for finalizing transactions
        and ensuring the correct allocation of funds.
      example:
        splits:
        - reverts:
          - margin_value: 6.027456183070403
            id: c6056234-a3f9-42de-b944-3ed793fcb6bb
            value: 15.32
          - margin_value: 6.027456183070403
            id: c6056234-a3f9-42de-b944-3ed793fcb6bb
            value: 15.32
          clearing_date: 2000-01-23
          margin_account:
            id: c6056234-a3f9-42de-b944-3ed793fcb6bb
          split_key: 01J1PKR2RPHJNJQGFWGDYXY0KM
          margin_value: 0.8008281904610115
          id: c6056234-a3f9-42de-b944-3ed793fcb6bb
          clearing_period: clearing_period
          value: 15.32
          split_descriptive: Payment of Invoice Nº 1982652
          account:
            id: c6056234-a3f9-42de-b944-3ed793fcb6bb
          status: waiting
        - reverts:
          - margin_value: 6.027456183070403
            id: c6056234-a3f9-42de-b944-3ed793fcb6bb
            value: 15.32
          - margin_value: 6.027456183070403
            id: c6056234-a3f9-42de-b944-3ed793fcb6bb
            value: 15.32
          clearing_date: 2000-01-23
          margin_account:
            id: c6056234-a3f9-42de-b944-3ed793fcb6bb
          split_key: 01J1PKR2RPHJNJQGFWGDYXY0KM
          margin_value: 0.8008281904610115
          id: c6056234-a3f9-42de-b944-3ed793fcb6bb
          clearing_period: clearing_period
          value: 15.32
          split_descriptive: Payment of Invoice Nº 1982652
          account:
            id: c6056234-a3f9-42de-b944-3ed793fcb6bb
          status: waiting
        created_at: 2006-01-02 15:04
        payment_type: single
        transaction_key: 01J1PKR2RPHJNJQGFWGDYXY0KM
        updated_at: 2006-01-02 15:04
        capture_date: 2000-01-23
        payment_id: c6056234-a3f9-42de-b944-3ed793fcb6bb
        force_3ds: true
        descriptive: Payment of Invoice Nº 1982652
        id: c6056234-a3f9-42de-b944-3ed793fcb6bb
        value: 15.32
        account:
          id: c6056234-a3f9-42de-b944-3ed793fcb6bb
        status: delayed
      properties:
        id:
          description: "A unique identifier for the resource. While typically formatted\
            \ as a UUID (Universally Unique Identifier), it can also be in other formats\
            \ as defined by the user. This field ensures the resource can be distinctly\
            \ recognized and referenced."
          example: c6056234-a3f9-42de-b944-3ed793fcb6bb
          title: Identifier
          type: string
          x-stoplight:
            id: 08r7fnj0h7hlg
        status:
          $ref: '#/components/schemas/CaptureStatus'
        descriptive:
          description: "A text field that describes the transaction as it will appear\
            \ on the end user's account statement. This is typically used to provide\
            \ clear, recognizable information about the payment, such as \"Payment\
            \ of Invoice Nº 1982652\" or \"Ticket for Queen\"."
          example: Payment of Invoice Nº 1982652
          maxLength: 255
          title: Descriptive
          type: string
          x-stoplight:
            id: lkifoepeeh5b7
        transaction_key:
          description: A customizable text field for users to input their own identifier
            for the resource. This can be any string that helps the user uniquely
            identify or reference the resource in their own system.
          example: 01J1PKR2RPHJNJQGFWGDYXY0KM
          maxLength: 255
          title: Key
          type: string
          x-stoplight:
            id: dzsicjfvhoe5a
        capture_date:
          description: "The date when the action should be executed. This field specifies\
            \ the exact day for capturing the transaction, formatted as \"YYYY-MM-DD\"\
            \ (e.g., \"2024-06-30\"). It is optional and defaults to the current date\
            \ if not specified."
          format: date
          title: CaptureDate
          type: string
          x-stoplight:
            id: tfl0okq7p39kq
        account:
          $ref: '#/components/schemas/CaptureAccount'
        splits:
          items:
            $ref: '#/components/schemas/CaptureSplit'
          type: array
          x-stoplight:
            id: 0vafel78d13bp
        payment_id:
          description: "A unique identifier for the resource. While typically formatted\
            \ as a UUID (Universally Unique Identifier), it can also be in other formats\
            \ as defined by the user. This field ensures the resource can be distinctly\
            \ recognized and referenced."
          example: c6056234-a3f9-42de-b944-3ed793fcb6bb
          title: Identifier
          type: string
          x-stoplight:
            id: 08r7fnj0h7hlg
        payment_type:
          $ref: '#/components/schemas/PaymentTypes'
        value:
          description: "The monetary amount requested for the transaction. This field\
            \ is formatted as a double, and will be rounded to two decimal places\
            \ (e.g., \"100.00\"). The value must be greater than or equal to 0.5."
          example: 15.32
          format: double
          minimum: 0.5
          title: Value
          type: number
          x-stoplight:
            id: g0svedglp94cc
            explicitProperties:
            - title
            - type
            - format
            - minimum
            - description
            - examples
        force_3ds:
          description: "A boolean field indicating whether to enforce 3D Secure (3DS)\
            \ authentication for the transaction. If set to true, 3DS authentication\
            \ will be required, adding an additional layer of security by verifying\
            \ the cardholder's identity during the transaction process. If set to\
            \ false, 3DS authentication will not be enforced. This field helps enhance\
            \ security and reduce fraud in online payments."
          title: Force3ds
          type: boolean
          x-stoplight:
            id: fewj0xys6jh4o
        created_at:
          description: The timestamp indicating when the resource was created. It
            is formatted as "YYYY-MM-DD HH:MM".
          example: 2006-01-02 15:04
          title: ResourceCreatedAt
          type: string
          x-stoplight:
            id: q7e5csjbqnpbs
        updated_at:
          description: The timestamp indicating when the resource was updated. It
            is formatted as "YYYY-MM-DD HH:MM".
          example: 2006-01-02 15:04
          title: ResourceUpdatedAt
          type: string
          x-stoplight:
            id: yhpblrp37jrcz
      required:
      - descriptive
      - id
      - status
      title: CaptureFull
      x-stoplight:
        id: 60dp3qu8n85h0
    CreateCapture:
      description: The Capture object contains all the necessary information for executing
        a fund capture action. It defines how and where the funds should be routed
        upon capturing a transaction. This object is essential for finalizing transactions
        and ensuring the correct allocation of funds. Object required when the operation
        type is Sale.
      properties:
        descriptive:
          description: "A text field that describes the transaction as it will appear\
            \ on the end user's account statement. This is typically used to provide\
            \ clear, recognizable information about the payment, such as \"Payment\
            \ of Invoice Nº 1982652\" or \"Ticket for Queen\"."
          example: Payment of Invoice Nº 1982652
          maxLength: 255
          title: Descriptive
          type: string
          x-stoplight:
            id: lkifoepeeh5b7
        transaction_key:
          description: A customizable text field for users to input their own identifier
            for the resource. This can be any string that helps the user uniquely
            identify or reference the resource in their own system.
          example: 01J1PKR2RPHJNJQGFWGDYXY0KM
          maxLength: 255
          title: Key
          type: string
          x-stoplight:
            id: dzsicjfvhoe5a
        capture_date:
          description: "The date when the action should be executed. This field specifies\
            \ the exact day for capturing the transaction, formatted as \"YYYY-MM-DD\"\
            \ (e.g., \"2024-06-30\"). It is optional and defaults to the current date\
            \ if not specified."
          format: date
          title: CaptureDate
          type: string
          x-stoplight:
            id: tfl0okq7p39kq
        account:
          $ref: '#/components/schemas/CaptureAccount'
        splits:
          items:
            $ref: '#/components/schemas/CaptureSplitCreate'
          type: array
          x-stoplight:
            id: xef2zpgi89l1o
      required:
      - descriptive
      title: CreateCapture
      x-stoplight:
        id: j3x1494l5bvtg
    CaptureSplitCreate:
      properties:
        split_key:
          description: A customizable text field for users to input their own identifier
            for the resource. This can be any string that helps the user uniquely
            identify or reference the resource in their own system.
          example: 01J1PKR2RPHJNJQGFWGDYXY0KM
          maxLength: 255
          title: Key
          type: string
          x-stoplight:
            id: dzsicjfvhoe5a
        split_descriptive:
          description: "A text field that describes the transaction as it will appear\
            \ on the end user's account statement. This is typically used to provide\
            \ clear, recognizable information about the payment, such as \"Payment\
            \ of Invoice Nº 1982652\" or \"Ticket for Queen\"."
          example: Payment of Invoice Nº 1982652
          maxLength: 255
          title: Descriptive
          type: string
          x-stoplight:
            id: lkifoepeeh5b7
        value:
          description: "The monetary amount requested for the transaction. This field\
            \ is formatted as a double, and will be rounded to two decimal places\
            \ (e.g., \"100.00\"). The value must be greater than or equal to 0.5."
          example: 15.32
          format: double
          minimum: 0.5
          title: Value
          type: number
          x-stoplight:
            id: g0svedglp94cc
            explicitProperties:
            - title
            - type
            - format
            - minimum
            - description
            - examples
        account:
          $ref: '#/components/schemas/SplitAccount'
        margin_value:
          description: "The monetary amount designated as the margin in a split payment.\
            \ This field is formatted as a double, and will be rounded to two decimal\
            \ places (e.g., \"10.00\"). The value must be less than the total value\
            \ of the split. This specifies the portion of the funds that should be\
            \ routed to the margin account."
          format: double
          title: MarginValue
          type: number
          x-stoplight:
            id: b6xg7kqyhg4nv
        margin_account:
          $ref: '#/components/schemas/MarginAccount'
        clearing_period:
          description: "The clearing period must follow the format 1Y, 10W or 30D.\
            \ Y for Years, W for weeks, D for days. Minimum is 7 days, maximum is\
            \ 1 year."
          maxLength: 4
          minLength: 2
          pattern: "^([\\d]+)([YWD])$"
          title: ClearingPeriod
          type: string
          x-stoplight:
            id: utd04ixixl73r
      required:
      - account
      - value
      title: CaptureSplitCreate
      x-stoplight:
        id: 8zoirz9yuknxk
    ClearingPeriod:
      description: "The clearing period must follow the format 1Y, 10W or 30D. Y for\
        \ Years, W for weeks, D for days. Minimum is 7 days, maximum is 1 year."
      maxLength: 4
      minLength: 2
      pattern: "^([\\d]+)([YWD])$"
      title: ClearingPeriod
      type: string
      x-stoplight:
        id: utd04ixixl73r
    SplitAccount:
      description: "The account to which the funds should be routed. This field is\
        \ used to specify the destination account for the split payment, ensuring\
        \ that the correct recipient receives their designated portion of the funds."
      example:
        id: c6056234-a3f9-42de-b944-3ed793fcb6bb
      properties:
        id:
          description: "A unique identifier for the resource. While typically formatted\
            \ as a UUID (Universally Unique Identifier), it can also be in other formats\
            \ as defined by the user. This field ensures the resource can be distinctly\
            \ recognized and referenced."
          example: c6056234-a3f9-42de-b944-3ed793fcb6bb
          title: Identifier
          type: string
          x-stoplight:
            id: 08r7fnj0h7hlg
      required:
      - id
      title: SplitAccount
      x-stoplight:
        id: f2xk2rdu7y9xt
    MarginAccount:
      description: "The account to which the margin value should be routed. This field\
        \ specifies the destination account for the margin portion of the funds, ensuring\
        \ that the correct recipient receives the designated margin value."
      example:
        id: c6056234-a3f9-42de-b944-3ed793fcb6bb
      properties:
        id:
          description: "A unique identifier for the resource. While typically formatted\
            \ as a UUID (Universally Unique Identifier), it can also be in other formats\
            \ as defined by the user. This field ensures the resource can be distinctly\
            \ recognized and referenced."
          example: c6056234-a3f9-42de-b944-3ed793fcb6bb
          title: Identifier
          type: string
          x-stoplight:
            id: 08r7fnj0h7hlg
      required:
      - id
      title: MarginAccount
      x-stoplight:
        id: c7ppxctl728qa
    MarginValue:
      description: "The monetary amount designated as the margin in a split payment.\
        \ This field is formatted as a double, and will be rounded to two decimal\
        \ places (e.g., \"10.00\"). The value must be less than the total value of\
        \ the split. This specifies the portion of the funds that should be routed\
        \ to the margin account."
      format: double
      title: MarginValue
      type: number
      x-stoplight:
        id: b6xg7kqyhg4nv
    CaptureAccount:
      description: "An object within the capture request that specifies the details\
        \ of the account to which the funds should be routed, different from the initially\
        \ requested account. This ensures that the captured funds are directed to\
        \ the correct destination as per the specific routing requirements."
      example:
        id: c6056234-a3f9-42de-b944-3ed793fcb6bb
      properties:
        id:
          description: "A unique identifier for the resource. While typically formatted\
            \ as a UUID (Universally Unique Identifier), it can also be in other formats\
            \ as defined by the user. This field ensures the resource can be distinctly\
            \ recognized and referenced."
          example: c6056234-a3f9-42de-b944-3ed793fcb6bb
          title: Identifier
          type: string
          x-stoplight:
            id: 08r7fnj0h7hlg
      required:
      - id
      title: CaptureAccount
      x-stoplight:
        id: m5b2s1t57t6ks
    CaptureDate:
      description: "The date when the action should be executed. This field specifies\
        \ the exact day for capturing the transaction, formatted as \"YYYY-MM-DD\"\
        \ (e.g., \"2024-06-30\"). It is optional and defaults to the current date\
        \ if not specified."
      format: date
      title: CaptureDate
      type: string
      x-stoplight:
        id: tfl0okq7p39kq
    SinglePaymentMethods:
      description: |-
        Enumerates the possible values for the payment method used in the transaction. This field helps to identify the selected payment method. Possible values include:

          - "CC": Credit Card
          - "VI": Digital IBAN
          - "DD": Direct Debit
          - "MB": Multibanco
          - "MBW": MBWay
          - "AP": Apple Pay
          - "GP": Google Pay
          - "SC": Santander Consumer Finance
          - "UF": Universo Flex Card

        Each value corresponds to a specific payment method.
      enum:
      - cc
      - vi
      - dd
      - mb
      - mbw
      - ap
      - gp
      - sc
      - uf
      title: SinglePaymentMethods
      type: string
      x-stoplight:
        id: 0hy0se4v5ue40
    Reverts:
      description: Reverts refers to the process of reversing a previously made split
        payment. This means that the amounts that were divided and allocated to different
        recipients or accounts are returned to the original payer or redistributed
        as per the new instructions.
      example:
        margin_value: 6.027456183070403
        id: c6056234-a3f9-42de-b944-3ed793fcb6bb
        value: 15.32
      properties:
        id:
          description: "A unique identifier for the resource. While typically formatted\
            \ as a UUID (Universally Unique Identifier), it can also be in other formats\
            \ as defined by the user. This field ensures the resource can be distinctly\
            \ recognized and referenced."
          example: c6056234-a3f9-42de-b944-3ed793fcb6bb
          title: Identifier
          type: string
          x-stoplight:
            id: 08r7fnj0h7hlg
        value:
          description: "The monetary amount requested for the transaction. This field\
            \ is formatted as a double, and will be rounded to two decimal places\
            \ (e.g., \"100.00\"). The value must be greater than or equal to 0.5."
          example: 15.32
          format: double
          minimum: 0.5
          title: Value
          type: number
          x-stoplight:
            id: g0svedglp94cc
            explicitProperties:
            - title
            - type
            - format
            - minimum
            - description
            - examples
        margin_value:
          description: "The monetary amount designated as the margin in a split payment.\
            \ This field is formatted as a double, and will be rounded to two decimal\
            \ places (e.g., \"10.00\"). The value must be less than the total value\
            \ of the split. This specifies the portion of the funds that should be\
            \ routed to the margin account."
          format: double
          title: MarginValue
          type: number
          x-stoplight:
            id: b6xg7kqyhg4nv
      title: Reverts
      x-stoplight:
        id: t99rbjbmtnuv2
    Iban:
      description: "The International Bank Account Number (IBAN) of the debtor's account.\
        \ This field is used to uniquely identify the debtor's bank account across\
        \ international borders, ensuring accurate and efficient processing of SEPA\
        \ Direct Debit transactions. The IBAN is a standardized format that includes\
        \ the country code, check digits, bank code, and account number."
      example: PT50000747199140461443823
      maxLength: 34
      title: Iban
      type: string
      x-stoplight:
        id: c05s8oq7c27co
    CaptureStatus:
      description: |-
        Indicates the current status of the capture. Possible values include:
        - delayed: The capture attempt is scheduled for a future date and does not require further user interaction due to prior consent (e.g., authorization or frequent).
        - waiting: The payment instruction has been given, but the chosen payment method requires confirmation from an external entity before the status of the operation is finalized.
        - pending: The capture is pending user completion.
        - success: The capture has been completed successfully.
        - failed: The capture could not be completed due to an error or issue.
        - refunded: The capture has been refunded.

        This field provides a clear indication of the current state of the capture, helping users understand its progress and outcome.
      enum:
      - delayed
      - waiting
      - success
      - pending
      - failed
      - refunded
      title: CaptureStatus
      type: string
      x-stoplight:
        id: wsf3920zioke3
    PaymentTypes:
      default: single
      description: |-
        Specifies the type of payment processed. Possible values include:

        - Single: A one-time payment transaction.
        - Frequent: A payment that occurs regularly but is not part of a subscription (e.g., recurring manual payments).
        - Subscription: A recurring payment that is part of a subscription plan, automatically processed at regular intervals.

        This field helps to categorize and manage different payment methods based on their frequency and nature.
      enum:
      - single
      - frequent
      - subscription
      title: PaymentTypes
      type: string
      x-stoplight:
        id: i2znn7oxl9vkk
    Force3ds:
      description: "A boolean field indicating whether to enforce 3D Secure (3DS)\
        \ authentication for the transaction. If set to true, 3DS authentication will\
        \ be required, adding an additional layer of security by verifying the cardholder's\
        \ identity during the transaction process. If set to false, 3DS authentication\
        \ will not be enforced. This field helps enhance security and reduce fraud\
        \ in online payments."
      title: Force3ds
      type: boolean
      x-stoplight:
        id: fewj0xys6jh4o
    Refund:
      description: "The Refund object contains information required to process a refund.\
        \ For payment methods that do not support direct refunds, additional fields\
        \ are required to facilitate a fallback to a bank transfer. This ensures that\
        \ the customer receives their refund even when the original payment method\
        \ does not facilitate refunds."
      example:
        transaction_key: 01J1PKR2RPHJNJQGFWGDYXY0KM
        phone: phone
        account_holder: account_holder
        iban: iban
        id: c6056234-a3f9-42de-b944-3ed793fcb6bb
        value: 15.32
        email: email
        status: success
      properties:
        id:
          description: "A unique identifier for the resource. While typically formatted\
            \ as a UUID (Universally Unique Identifier), it can also be in other formats\
            \ as defined by the user. This field ensures the resource can be distinctly\
            \ recognized and referenced."
          example: c6056234-a3f9-42de-b944-3ed793fcb6bb
          title: Identifier
          type: string
          x-stoplight:
            id: 08r7fnj0h7hlg
        status:
          $ref: '#/components/schemas/RefundStatus'
        transaction_key:
          description: A customizable text field for users to input their own identifier
            for the resource. This can be any string that helps the user uniquely
            identify or reference the resource in their own system.
          example: 01J1PKR2RPHJNJQGFWGDYXY0KM
          maxLength: 255
          title: Key
          type: string
          x-stoplight:
            id: dzsicjfvhoe5a
        value:
          description: "The monetary amount requested for the transaction. This field\
            \ is formatted as a double, and will be rounded to two decimal places\
            \ (e.g., \"100.00\"). The value must be greater than or equal to 0.5."
          example: 15.32
          format: double
          minimum: 0.5
          title: Value
          type: number
          x-stoplight:
            id: g0svedglp94cc
            explicitProperties:
            - title
            - type
            - format
            - minimum
            - description
            - examples
        iban:
          description: "(Required for fallback): The International Bank Account Number\
            \ of the account to which the refund will be sent. This field is used\
            \ to uniquely identify the recipient's bank account across international\
            \ borders."
          title: FallbackIban
          type: string
          x-stoplight:
            id: xrwtwclaasnfs
        email:
          description: "(Required for fallback): The email address of the account\
            \ holder. This field is used for communication purposes, including sending\
            \ notifications about the refund stat."
          title: FallbackEmail
          type: string
          x-stoplight:
            id: jzkhbqgphxgal
        phone:
          description: "(Required for fallback): The contact phone number of the account\
            \ holder, including the country code indicator (e.g., \"+351\"). This\
            \ field is used for communication purposes, such as contacting the account\
            \ holder for verification."
          title: FallbackPhone
          type: string
          x-stoplight:
            id: 9phuq21p704nx
        account_holder:
          description: "(Required for fallback): The contact phone number of the account\
            \ holder, including the country code indicator (e.g., \"+351\"). This\
            \ field is used for communication purposes, such as contacting the account\
            \ holder for verification."
          title: FallbackPhone
          type: string
          x-stoplight:
            id: 9phuq21p704nx
      required:
      - id
      - status
      - value
      title: Refund
      x-stoplight:
        id: swrguxzes0yke
    RefundStatus:
      description: |-
        Indicates the current status of the refund. Possible values include:
        - waiting: The payment instruction has been given, but the chosen payment method requires confirmation from an external entity before the status of the operation is finalized.
        - pending: This is the initial state, and it means that the refund is queued.
        - success: The refund has been completed successfully.
        - failed: The refund could not be completed due to an error or issue.

        This field provides a clear indication of the current state of the refund, helping users understand its progress and outcome.
      enum:
      - success
      - pending
      - failed
      - waiting
      title: RefundStatus
      type: string
      x-stoplight:
        id: y1wmiymdp8ryd
    ListRefundModel:
      example:
        transaction_key: 01J1PKR2RPHJNJQGFWGDYXY0KM
        updated_at: 2006-01-02 15:04
        phone: phone
        account_holder: account_holder
        iban: iban
        capture:
          payment_type: single
          payment_id: c6056234-a3f9-42de-b944-3ed793fcb6bb
          id: c6056234-a3f9-42de-b944-3ed793fcb6bb
        created_at: 2006-01-02 15:04
        id: c6056234-a3f9-42de-b944-3ed793fcb6bb
        value: 15.32
        email: email
        status: success
      properties:
        id:
          description: "A unique identifier for the resource. While typically formatted\
            \ as a UUID (Universally Unique Identifier), it can also be in other formats\
            \ as defined by the user. This field ensures the resource can be distinctly\
            \ recognized and referenced."
          example: c6056234-a3f9-42de-b944-3ed793fcb6bb
          title: Identifier
          type: string
          x-stoplight:
            id: 08r7fnj0h7hlg
        status:
          $ref: '#/components/schemas/RefundStatus'
        transaction_key:
          description: A customizable text field for users to input their own identifier
            for the resource. This can be any string that helps the user uniquely
            identify or reference the resource in their own system.
          example: 01J1PKR2RPHJNJQGFWGDYXY0KM
          maxLength: 255
          title: Key
          type: string
          x-stoplight:
            id: dzsicjfvhoe5a
        value:
          description: "The monetary amount requested for the transaction. This field\
            \ is formatted as a double, and will be rounded to two decimal places\
            \ (e.g., \"100.00\"). The value must be greater than or equal to 0.5."
          example: 15.32
          format: double
          minimum: 0.5
          title: Value
          type: number
          x-stoplight:
            id: g0svedglp94cc
            explicitProperties:
            - title
            - type
            - format
            - minimum
            - description
            - examples
        iban:
          description: "(Required for fallback): The International Bank Account Number\
            \ of the account to which the refund will be sent. This field is used\
            \ to uniquely identify the recipient's bank account across international\
            \ borders."
          title: FallbackIban
          type: string
          x-stoplight:
            id: xrwtwclaasnfs
        email:
          description: "(Required for fallback): The email address of the account\
            \ holder. This field is used for communication purposes, including sending\
            \ notifications about the refund stat."
          title: FallbackEmail
          type: string
          x-stoplight:
            id: jzkhbqgphxgal
        phone:
          description: "(Required for fallback): The contact phone number of the account\
            \ holder, including the country code indicator (e.g., \"+351\"). This\
            \ field is used for communication purposes, such as contacting the account\
            \ holder for verification."
          title: FallbackPhone
          type: string
          x-stoplight:
            id: 9phuq21p704nx
        account_holder:
          description: "(Required for fallback): The name of the person or entity\
            \ that holds the bank account. This field ensures that the refund is directed\
            \ to the correct recipient."
          title: FallbackAccountHolder
          type: string
          x-stoplight:
            id: gr1ce35xjlgzh
        capture:
          $ref: '#/components/schemas/RefundScopedCapture'
        created_at:
          description: The timestamp indicating when the resource was created. It
            is formatted as "YYYY-MM-DD HH:MM".
          example: 2006-01-02 15:04
          title: ResourceCreatedAt
          type: string
          x-stoplight:
            id: q7e5csjbqnpbs
        updated_at:
          description: The timestamp indicating when the resource was updated. It
            is formatted as "YYYY-MM-DD HH:MM".
          example: 2006-01-02 15:04
          title: ResourceUpdatedAt
          type: string
          x-stoplight:
            id: yhpblrp37jrcz
      x-examples:
        Example 1:
          id: c6056234-a3f9-42de-b944-3ed793fcb6bb
          status: success
          transaction_key: 01J1PKR2RPHJNJQGFWGDYXY0KM
          value: 15.32
          iban: PT50002700000001234567833
          email: customer@example.com
          phone: "351962496235"
          account_holder: Jonh Doe
    RefundScopedCapture:
      description: The targeted Capture details.
      example:
        payment_type: single
        payment_id: c6056234-a3f9-42de-b944-3ed793fcb6bb
        id: c6056234-a3f9-42de-b944-3ed793fcb6bb
      properties:
        id:
          description: "A unique identifier for the resource. While typically formatted\
            \ as a UUID (Universally Unique Identifier), it can also be in other formats\
            \ as defined by the user. This field ensures the resource can be distinctly\
            \ recognized and referenced."
          example: c6056234-a3f9-42de-b944-3ed793fcb6bb
          title: Identifier
          type: string
          x-stoplight:
            id: 08r7fnj0h7hlg
        payment_id:
          description: "A unique identifier for the resource. While typically formatted\
            \ as a UUID (Universally Unique Identifier), it can also be in other formats\
            \ as defined by the user. This field ensures the resource can be distinctly\
            \ recognized and referenced."
          example: c6056234-a3f9-42de-b944-3ed793fcb6bb
          title: Identifier
          type: string
          x-stoplight:
            id: 08r7fnj0h7hlg
        payment_type:
          $ref: '#/components/schemas/PaymentTypes'
      title: RefundScopedCapture
      x-stoplight:
        id: zsr2kgcix6o71
    FallbackIban:
      description: "(Required for fallback): The International Bank Account Number\
        \ of the account to which the refund will be sent. This field is used to uniquely\
        \ identify the recipient's bank account across international borders."
      title: FallbackIban
      type: string
      x-stoplight:
        id: xrwtwclaasnfs
    FallbackAccountHolder:
      description: "(Required for fallback): The name of the person or entity that\
        \ holds the bank account. This field ensures that the refund is directed to\
        \ the correct recipient."
      title: FallbackAccountHolder
      type: string
      x-stoplight:
        id: gr1ce35xjlgzh
    FallbackEmail:
      description: "(Required for fallback): The email address of the account holder.\
        \ This field is used for communication purposes, including sending notifications\
        \ about the refund stat."
      title: FallbackEmail
      type: string
      x-stoplight:
        id: jzkhbqgphxgal
    FallbackPhone:
      description: "(Required for fallback): The contact phone number of the account\
        \ holder, including the country code indicator (e.g., \"+351\"). This field\
        \ is used for communication purposes, such as contacting the account holder\
        \ for verification."
      title: FallbackPhone
      type: string
      x-stoplight:
        id: 9phuq21p704nx
    ResourceCreatedAt:
      description: The timestamp indicating when the resource was created. It is formatted
        as "YYYY-MM-DD HH:MM".
      example: 2006-01-02 15:04
      title: ResourceCreatedAt
      type: string
      x-stoplight:
        id: q7e5csjbqnpbs
    ResourceUpdatedAt:
      description: The timestamp indicating when the resource was updated. It is formatted
        as "YYYY-MM-DD HH:MM".
      example: 2006-01-02 15:04
      title: ResourceUpdatedAt
      type: string
      x-stoplight:
        id: yhpblrp37jrcz
    LedgerEntry:
      description: |-
        The **LedgerEntry** object represents a single entry in the financial ledger of Easypay reconciliation system. It captures detailed information about a specific financial transaction, including its type, category, and associated monetary details. This object serves as a comprehensive record of all activities impacting an account’s balance, providing an audit trail for both debits and credits.

        Each **LedgerEntry** includes metadata such as unique identifiers and timestamps to track when the entry was created and when the transaction occurred. It also encompasses financial breakdowns like fees, taxes, and transferred amounts, all contextualized with currency information. Additionally, the object can link to specific operations or payment methods, detailing the source and nature of each transaction.
      example:
        amount_details:
          fees:
          - fixed_amount:
              amount: amount
              currency: currency
            vat_amount:
              amount: amount
              currency: currency
            variable_amount:
              amount: amount
              currency: currency
          - fixed_amount:
              amount: amount
              currency: currency
            vat_amount:
              amount: amount
              currency: currency
            variable_amount:
              amount: amount
              currency: currency
          payed_amount:
            amount: amount
            currency: currency
          requested_amount:
            amount: amount
            currency: currency
        amount:
          amount: amount
          currency: currency
        created_at: 2006-01-02 15:04
        transfer_batch_date: transfer_batch_date
        descriptive: descriptive
        transaction_timestamp: transaction_timestamp
        details:
          payment_type: single
          payment_key: payment_key
          method: CC
          payment_id: 235934c2-467d-44fa-9e81-9cbd9d1a6f61
          operation_key: operation_key
          operation_id: 502b0844-13a8-4788-b775-5e4cc8194a50
        id: '"38c65c65-6b66-42e8-b3db-3a3361ef23e4"'
        transaction_type: CP
        transfer_batch: '"584"'
      properties:
        id:
          description: |-
            A unique identifier for the ledger entry, represented as a UUID. This ID is used to
                uniquely track and reference individual entries within the ledger system.
          example: '"38c65c65-6b66-42e8-b3db-3a3361ef23e4"'
          title: LedgerEntryID
          type: string
          x-stoplight:
            id: 03bz4x0l0u8r5
        created_at:
          description: The timestamp indicating when the resource was created. It
            is formatted as "YYYY-MM-DD HH:MM".
          example: 2006-01-02 15:04
          title: ResourceCreatedAt
          type: string
          x-stoplight:
            id: q7e5csjbqnpbs
        transaction_timestamp:
          description: The exact timestamp of when the associated transaction occurred.
            It is formatted as "YYYY-MM-DD HH:MM".
          title: LedgerTransactionTimestamp
          type: string
          x-stoplight:
            id: lj1nndkxu6r3y
        transaction_type:
          $ref: '#/components/schemas/LedgerTransactionType'
        amount_details:
          $ref: '#/components/schemas/FinantialTransactionDetails'
        transfer_batch_date:
          description: |2-

             The date when the transfer batch is scheduled or processed. The date is represented
                in ISO 8601 format (YYYY-MM-DD), indicating the year, month, and day.
          title: LedgerTransactionBatchDate
          type: string
          x-stoplight:
            id: z0bj6egril65p
        transfer_batch:
          description: |-
            A unique identifier for the transfer batch, typically represented as a string.
                This value is used to track and reference a specific batch of transfers within the system.
          example: '"584"'
          title: LedgerTransferBatch
          type: string
          x-stoplight:
            id: tvoadazzmo2nw
        descriptive:
          description: "A brief, user-friendly description of the ledger entry. This\
            \ is used to provide additional context or notes that describe the nature\
            \ of the transaction in plain language."
          type: string
          x-stoplight:
            id: yjjyag5fdc9bt
        details:
          $ref: '#/components/schemas/LedgerEntryDetails'
        amount:
          $ref: '#/components/schemas/Money'
      title: LedgerEntry
      x-stoplight:
        id: tlo0n95lflsoj
    FinantialTransactionDetails:
      description: "An object containing detailed financial information related to\
        \ the transaction. Provides a breakdown of various components of the transaction,\
        \ such as fees , requested and payed amounts."
      example:
        fees:
        - fixed_amount:
            amount: amount
            currency: currency
          vat_amount:
            amount: amount
            currency: currency
          variable_amount:
            amount: amount
            currency: currency
        - fixed_amount:
            amount: amount
            currency: currency
          vat_amount:
            amount: amount
            currency: currency
          variable_amount:
            amount: amount
            currency: currency
        payed_amount:
          amount: amount
          currency: currency
        requested_amount:
          amount: amount
          currency: currency
      properties:
        requested_amount:
          $ref: '#/components/schemas/Money'
        payed_amount:
          $ref: '#/components/schemas/Money'
        fees:
          description: |-
            An array of fee objects, where each fee represents a specific charge or cost associated with a transaction.
              Each fee includes details such as the amount and currency, and may represent different types of fees
              like fixed, variable, or VAT.
          items:
            $ref: '#/components/schemas/Fee'
          type: array
          x-stoplight:
            id: tr4bq7p39hhrt
      title: FinancialTransactionDetails
      x-stoplight:
        id: 13zabj84om3hw
    Money:
      description: "The money type is a data structure used to represent a monetary\
        \ value in a specific currency. It includes both the amount and the currency\
        \ type to accurately define the value of money in various contexts, such as\
        \ financial transactions, pricing, and accounting."
      example:
        amount: amount
        currency: currency
      properties:
        amount:
          description: "Represents the numerical value of the money. The amount should\
            \ be a string formatted to include up to two decimal places to accurately\
            \ represent cents or subunits of currency. For example, \"123.45\" represents\
            \ one hundred twenty-three units and forty-five subunits of the currency."
          type: string
          x-stoplight:
            id: zqoqyjqwolphq
        currency:
          description: "Indicates the type of currency associated with the amount.\
            \ This should follow standard currency codes (ISO 4217), such as \"USD\"\
            \ for US Dollar, \"EUR\" for Euro, or \"JPY\" for Japanese Yen, to specify\
            \ which currency the amount is denominated in."
          type: string
          x-stoplight:
            id: v2yss9w4l9zx2
      title: Money
      x-stoplight:
        id: 4td3cz4hnm0dn
    LedgerTransactionType:
      description: |-
        **LedgerTransactionType** is a string enum that represents various types of financial transactions recorded in a ledger.

        Each transaction type is abbreviated with a code and corresponds to a specific financial operation.

        The following are the possible values and their descriptions:
            **CP**: capture
            Represents the capture of funds, typically after a payment authorization. This transaction finalizes a payment and moves the funds from the payer's account to the payee's account.
            **RF**: refund
            Represents a refund transaction where previously captured funds are returned to the payer's account. This transaction often occurs when a customer returns goods or services.
            **RV**: revert
            Indicates a revert transaction that undoes a previously made transaction, often used to correct errors or reverse transactions.
            **SP**: split_payment
            Represents a split payment transaction, where a payment is divided among multiple recipients or for different purposes within the same transaction.
            **FEE**: fee
            Represents a fee transaction, which is a charge applied for a specific service or transaction. This could include service fees, processing fees, or other types of charges.
            **MAN**: a manual movement
            Represents a manual movement of funds, typically entered manually by an administrator or accountant to adjust balances or correct errors.
            **TB**: bank transfer
            Represents a bank transfer transaction, where funds are moved between different bank accounts. This can be a transfer within the same bank or across different banks.
            **OT**: out transfer
            Indicates an out transfer transaction, where funds are transferred out of the current ledger or account to another external account or ledger.
            **CB**: chargeback
            Represents a chargeback transaction, typically initiated by the payer's bank to reverse a disputed or fraudulent transaction. This transaction withdraws the funds from the payee's account and returns them to the payer.
            **OP**: out payment
            Represents an out payment transaction, where funds are paid out from the ledger to an external party or account. This transaction is usually used to settle debts or make external payments.
      enum:
      - CP
      - RF
      - RV
      - FEE
      - SP
      - MAN
      - TB
      - OT
      - CB
      - OP
      example: CP
      title: LedgerTransactionType
      type: string
      x-stoplight:
        id: bbcn76vhtbsjm
    LedgerTransactionTimestamp:
      description: The exact timestamp of when the associated transaction occurred.
        It is formatted as "YYYY-MM-DD HH:MM".
      title: LedgerTransactionTimestamp
      type: string
      x-stoplight:
        id: lj1nndkxu6r3y
    Fee:
      description: |2-

         An object that represents a set of amounts in different categories such as fixed, variable, and VAT,
          each with an associated currency. The structure includes:
          - **fixed_amount**: Represents a fixed fee applied to the transaction.
          - **variable_amount**: Represents a variable fee, usually dependent on the transaction amount.
          - **vat_amount**: Represents the value-added tax (VAT) applied to the fees.
          All amounts are represented in a specific currency.
      example:
        fixed_amount:
          amount: amount
          currency: currency
        vat_amount:
          amount: amount
          currency: currency
        variable_amount:
          amount: amount
          currency: currency
      properties:
        fixed_amount:
          $ref: '#/components/schemas/Money'
        variable_amount:
          $ref: '#/components/schemas/Money'
        vat_amount:
          $ref: '#/components/schemas/Money'
      title: Fee
      x-stoplight:
        id: 48p28fck0bx12
    TransactionFees:
      description: |-
        An array of fee objects, where each fee represents a specific charge or cost associated with a transaction.
          Each fee includes details such as the amount and currency, and may represent different types of fees
          like fixed, variable, or VAT.
      items:
        $ref: '#/components/schemas/Fee'
      type: array
      x-stoplight:
        id: tr4bq7p39hhrt
    LedgerTransactionBatchDate:
      description: |2-

         The date when the transfer batch is scheduled or processed. The date is represented
            in ISO 8601 format (YYYY-MM-DD), indicating the year, month, and day.
      title: LedgerTransactionBatchDate
      type: string
      x-stoplight:
        id: z0bj6egril65p
    LedgerTransferBatch:
      description: |-
        A unique identifier for the transfer batch, typically represented as a string.
            This value is used to track and reference a specific batch of transfers within the system.
      example: '"584"'
      title: LedgerTransferBatch
      type: string
      x-stoplight:
        id: tvoadazzmo2nw
    LedgerEntryDetails:
      description: |-
        An object containing detailed information about a specific operation and payment.
            This includes unique identifiers, the method used for the payment, and the type of payment.
      example:
        payment_type: single
        payment_key: payment_key
        method: CC
        payment_id: 235934c2-467d-44fa-9e81-9cbd9d1a6f61
        operation_key: operation_key
        operation_id: 502b0844-13a8-4788-b775-5e4cc8194a50
      properties:
        operation_id:
          description: "A unique identifier for the operation, represented as a UUID."
          example: 502b0844-13a8-4788-b775-5e4cc8194a50
          type: string
        operation_key:
          description: A merchant-specific identification key for the operation.
          type: string
        method:
          description: "The payment method used for the transaction (e.g., CC for\
            \ credit card)."
          example: CC
          type: string
        payment_id:
          description: "A unique identifier for the payment, represented as a UUID."
          example: 235934c2-467d-44fa-9e81-9cbd9d1a6f61
          type: string
        payment_type:
          description: "The type of payment, such as 'single' for a one-time payment."
          example: single
          type: string
        payment_key:
          description: ' A merchant-specific identification key for the payment.'
          type: string
      x-examples:
        Example 1:
          operation_id: 7bca9e29-21a3-4e23-a1f5-50bb605e2360
          operation_key: Merchant identification key
          method: CC
          payment_id: 502b0844-13a8-4788-b775-5e4cc8194a50
          payment_type: single
          payment_key: Merchant identification key
    LedgerEntryAmount:
      $ref: '#/components/schemas/Money'
    LedgerEntryID:
      description: |-
        A unique identifier for the ledger entry, represented as a UUID. This ID is used to
            uniquely track and reference individual entries within the ledger system.
      example: '"38c65c65-6b66-42e8-b3db-3a3361ef23e4"'
      title: LedgerEntryID
      type: string
      x-stoplight:
        id: 03bz4x0l0u8r5
    Chargeback:
      example:
        amount: 15.32
        code: MD06
        created_at: 2006-01-02 15:04
        capture:
          payment_type: single
          payment_id: c6056234-a3f9-42de-b944-3ed793fcb6bb
          id: c6056234-a3f9-42de-b944-3ed793fcb6bb
        id: c6056234-a3f9-42de-b944-3ed793fcb6bb
        message: MD06 - Refund Request by End Customer
      properties:
        id:
          description: "A unique identifier for the resource. While typically formatted\
            \ as a UUID (Universally Unique Identifier), it can also be in other formats\
            \ as defined by the user. This field ensures the resource can be distinctly\
            \ recognized and referenced."
          example: c6056234-a3f9-42de-b944-3ed793fcb6bb
          title: Identifier
          type: string
          x-stoplight:
            id: 08r7fnj0h7hlg
        created_at:
          description: The timestamp indicating when the resource was created. It
            is formatted as "YYYY-MM-DD HH:MM".
          example: 2006-01-02 15:04
          title: ResourceCreatedAt
          type: string
          x-stoplight:
            id: q7e5csjbqnpbs
        message:
          description: "The message field provides a human-readable explanation of\
            \ the chargeback reason code, making it easier to understand the cause\
            \ of the dispute without needing to interpret technical codes. This message\
            \ clarifies the issue, such as incorrect account information, insufficient\
            \ funds, or unauthorized transactions, and helps merchants quickly identify\
            \ the nature of the problem."
          example: MD06 - Refund Request by End Customer
          type: string
          x-stoplight:
            id: gwj2856hm2cdt
        code:
          description: |-
            The code field provides the specific SEPA or Visa/Masterd code associated with the chargeback. This code identifies the reason for the chargeback, offering insight into why the transaction was disputed by the consumer's bank or card issuer.
            SEPA reasons:
              - **AC01**:  Incorrect Account Number
              - **AC04**:  Closed Account Number
              - **AC06**:  Blocked Account
              - **AC13**:  Invalid Debitor Account Type
              - **AG01**:  Transaction Forbidden
              - **AG02**:  Invalid Bank Operation Code
              - **AM04**:  Insufficient Funds
              - **AM05**:  Duplication
              - **BE05**:  Unrecognised Initiating Party
              - **CNOR**:  Creditor Bank is Not Registered
              - **DNOR**:  Debitor Bank is Not Registered
              - **ED05**:  Settlement Failed
              - **FF01**:  Invalid File Format
              - **MD01**:  No Mandate
              - **MD02**:  Missing Mandatory Mandate Information
              - **MD06**:  Refund Request by End Customer
              - **MD07**:  End Customer Deceased
              - **MS02**:  Not Specified Reason Customer Generated
              - **MS03**:  Not Specified Reason Agent Generated
              - **RC01**:  Bank Identifier Incorrect
              - **RR01**:  Missing Debitor Account Or Identification
              - **RR02**:  Missing Debitor Name Or Address
              - **RR03**:  Missing Creditor Name or Address
              - **RR04**:  Regulatory Reason
              - **SL01**:  Specific Service Offered By Debitor Agent
            Visa Reasons:
              - **10.1**: EMV Liability Shift Counterfeit Fraud
              - **10.2**: EMV Liability Shift Non-Counterfeit Fraud
              - **10.3**: Other Fraud, Card-Present Environment
              - **10.4**: Other Fraud, Card-Absent Environment
              - **10.5**: Visa Fraud Monitoring Program
              - **11.1**: Card Recovery Bulletin
              - **11.2**: Declined Authorization
              - **11.3**: No Authorization
              - **12.1**: Late Presentment
              - **12.2**: Incorrect Transaction Code
              - **12.3**: Incorrect Currency
              - **12.4**: Incorrect Account Number
              - **12.5**: Incorrect Amount
              - **12.6**: Duplicate Processing / Paid By Other Means
              - **12.7**: Invalid Data
              - **13.1**: Merchandise / Services Not Received
              - **13.2**: Cancelled Recurring Transaction
              - **13.3**: Not As Described Or Defective Merchandise / Services
              - **13.4**: Counterfeit Merchandise
              - **13.5**: Misrepresentation
              - **13.6**: Credit Not Processed
              - **13.7**: Cancelled Merchandise / Services
              - **13.8**: Original Credit Transaction Not Accepted
              - **13.9**: Non-Receipt of Cash or Load Transaction Value

            Mastercard reasons:
              - **4837**: No Cardholder Authorization
              - **4840**: Fraudulent Processing Of Transactions
              - **4849**: Questionable Merchant Activity - Global Merchant Audit Program (GMAP)
              - **4849**: Questionable Merchant Activity - Mastercard Rule 3.7 Violation for Coercion Claim
              - **4849**: Questionable Merchant Activity - Questionable Merchant Audit Program (QMAP)
              - **4863**: Cardholder Does Not Recognize, Potential Fraud
              - **4870**: EMV Chip Liability Shift
              - **4871**: Chip Liability Shift – Lost / Stolen / Never Received Fraud
              - **4807**: Warning Bulletin
              - **4808**: Authorization Chargeback - Cardholder-Activated Terminal (CAT) 3 Device
              - **4808**: Authorization Chargeback - Expired Chargeback Protection Period
              - **4808**: Authorization Chargeback - Multiple Authorization Requests
              - **4808**: Authorization Chargeback - Required Authorization Not Obtained
              - **4812**: Account Number Not On File
              - **4853**: Cardholder Dispute - Credit Posted as a Purchase
              - **4853**: Cardholder Dispute - Digital Goods Purchase of $25 or Less
              - **4853**: Cardholder Dispute - Goods or Services Not as Described or Defective
              - **4853**: Cardholder Dispute - Goods or Services Not Provided
              - **4853**: Cardholder Dispute - Issuer Dispute of a Recurring Transaction
              - **4853**: Cardholder Dispute - Timeshares
              - **4853**: Cardholder Dispute - "No Show" Hotel Charge
              - **4853**: Cardholder Dispute - Transaction Did Not Complete
              - **4853**: Cardholder Dispute - Addendum Dispute
              - **4853**: Cardholder Dispute - Cardholder Dispute of a Recurring Transaction
              - **4853**: Cardholder Dispute - Counterfeit Goods
              - **4853**: Cardholder Dispute - Credit Not Processed
              - **4855**: Goods or Services Not Provided
              - **4859**: Addendum, No-Show, or ATM Dispute (Europe)
              - **4859**: Addendum, No-Show, or ATM Dispute (Non-European Bank)
              - **4860**: Credit Not Processed
              - **4831**: Incorrect Transaction Amount
              - **4834**: POI Error - Charges for Loss, Theft, or Damages
              - **4834**: POI Error - Late Presentment
              - **4834**: POI Error - Merchant Credit Correcting Error, Cardholder Currency Exchange Loss
              - **4834**: POI Error - Transaction Amount Differs
              - **4834**: POI Error - Currency Conversion (Dynamic Currency Conversion)
              - **4834**: POI Error - Unreasonable Amount (Europe)
              - **4834**: POI Error - ATM Disputes
              - **4834**: POI Error - Cardholder Debited More than Once
              - **4841**: Canceled Recurring or Digital Goods Transactions
              - **4842**: Late Presentment (Europe)
              - **4842**: Late Presentment (Non-European Banks)
              - **4846**: Correct Transaction Currency Code Not Provided / Currency Errors (Non-European Bank)
              - **4846**: Correct Transaction Currency Code Not Provided / Currency Error (Europe)
          example: MD06
          type: string
          x-stoplight:
            id: p263fmd36cg8a
        amount:
          description: "The monetary amount requested for the transaction. This field\
            \ is formatted as a double, and will be rounded to two decimal places\
            \ (e.g., \"100.00\"). The value must be greater than or equal to 0.5."
          example: 15.32
          format: double
          minimum: 0.5
          title: Value
          type: number
          x-stoplight:
            id: g0svedglp94cc
            explicitProperties:
            - title
            - type
            - format
            - minimum
            - description
            - examples
        capture:
          $ref: '#/components/schemas/RefundScopedCapture'
      title: Chargeback
      x-stoplight:
        id: k4csffxjdvu0e
    single_post_request_multibanco:
      description: An object that holds the details specific to a Multibanco transaction.
      properties:
        expiration_time:
          description: "The end timestamp indicating the deadline by which the Multibanco\
            \ Reference must be paid. It defines the final time within which the payment\
            \ must be completed. The format follows RFC3339 (e.g., \"2024-06-30T21:38:31Z\"\
            )."
          format: date-time
          type: string
          x-stoplight:
            id: 3mjhwf6c9x3xl
        start_time:
          description: "The starting timestamp indicating when the Multibanco Reference\
            \ becomes valid for payment. It defines the initial time from which the\
            \ payment can be made. The format follows RFC3339 (e.g., \"2024-06-30T21:38:31Z\"\
            ). This field is optional and defaults to the current timestamp if not\
            \ specified, or if the sent value is in the past."
          format: date-time
          type: string
          x-stoplight:
            id: lhivsudt559oz
      required:
      - expiration_time
      x-stoplight:
        id: t2bo6pdevkv05
    single_post_request:
      properties:
        type:
          $ref: '#/components/schemas/OperationType'
        capture:
          $ref: '#/components/schemas/CreateCapture'
        expiration_time:
          deprecated: true
          description: "The last possible time to make the payment. Applicable in\
            \ Multibanco payments. This field is deprecated, use multibanco.expiration_time\
            \ instead."
          example: 2017-12-12 16:05
          type: string
        currency:
          $ref: '#/components/schemas/Currency'
        value:
          description: "The monetary amount requested for the transaction. This field\
            \ is formatted as a double, and will be rounded to two decimal places\
            \ (e.g., \"100.00\"). The value must be greater than or equal to 0.5."
          example: 15.32
          format: double
          minimum: 0.5
          title: Value
          type: number
          x-stoplight:
            id: g0svedglp94cc
            explicitProperties:
            - title
            - type
            - format
            - minimum
            - description
            - examples
        method:
          $ref: '#/components/schemas/SinglePaymentMethods'
        key:
          description: A customizable text field for users to input their own identifier
            for the resource. This can be any string that helps the user uniquely
            identify or reference the resource in their own system.
          example: 01J1PKR2RPHJNJQGFWGDYXY0KM
          maxLength: 255
          title: Key
          type: string
          x-stoplight:
            id: dzsicjfvhoe5a
        customer:
          $ref: '#/components/schemas/Customer'
        multibanco:
          $ref: '#/components/schemas/single_post_request_multibanco'
        sdd_mandate:
          $ref: '#/components/schemas/CreateSddMandate'
      required:
      - method
      - value
    single_update_request:
      properties:
        expiration_time:
          deprecated: true
          type: string
          x-stoplight:
            id: 67w7mazdm7hci
        currency:
          $ref: '#/components/schemas/Currency'
        customer:
          $ref: '#/components/schemas/UpdatableCustomer'
        key:
          description: A customizable text field for users to input their own identifier
            for the resource. This can be any string that helps the user uniquely
            identify or reference the resource in their own system.
          example: 01J1PKR2RPHJNJQGFWGDYXY0KM
          maxLength: 255
          title: Key
          type: string
          x-stoplight:
            id: dzsicjfvhoe5a
        sdd_mandate:
          $ref: '#/components/schemas/UpdatableSddMandate'
    frequent_get_200_response:
      example:
        data:
        - min_value: 6.027456183070403
          method:
            last_four: last_four
            iban: iban
            alias: alias
            type: mb
            card_type: MasterCard
            expiration_date: expiration_date
            sdd_mandate:
              country_code: country_code
              max_num_debits: max_num_debits
              phone: phone
              account_holder: account_holder
              billing_entity: billing_entity
              iban: iban
              name: name
              id: id
              key: key
              email: email
            url: https://cc.test.easypay.pt/start/ab2f2eb6-3655-4951-98ae-36367d5f3727
            status: waiting
          expiration_time: expiration_time
          created_at: 2017-12-12 16:05:02
          currency: currency
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          unlimited_payments: true
          key: key
          customer:
            language: language
            id: id
            email: email
            key: key
          max_value: 0.8008281904610115
        - min_value: 6.027456183070403
          method:
            last_four: last_four
            iban: iban
            alias: alias
            type: mb
            card_type: MasterCard
            expiration_date: expiration_date
            sdd_mandate:
              country_code: country_code
              max_num_debits: max_num_debits
              phone: phone
              account_holder: account_holder
              billing_entity: billing_entity
              iban: iban
              name: name
              id: id
              key: key
              email: email
            url: https://cc.test.easypay.pt/start/ab2f2eb6-3655-4951-98ae-36367d5f3727
            status: waiting
          expiration_time: expiration_time
          created_at: 2017-12-12 16:05:02
          currency: currency
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          unlimited_payments: true
          key: key
          customer:
            language: language
            id: id
            email: email
            key: key
          max_value: 0.8008281904610115
        meta:
          records:
            per_page: 5
            total: 1
          links:
            next: next
            last: last
            prev: prev
            first: first
          page:
            current: 0
            total: 6
      properties:
        meta:
          $ref: '#/components/schemas/ResponseMeta'
        data:
          items:
            $ref: '#/components/schemas/Frequent'
          type: array
      required:
      - data
      - meta
    _frequent_post_request_multibanco:
      description: Configuration of the Multibanco payment
      properties:
        reference:
          description: This field controls which reference is going to be created.
            It's only available if you have an exclusive Multibanco entity.
          example: "505237431"
          maxLength: 9
          minLength: 9
          pattern: "^[0-9]*$"
          type: string
          x-stoplight:
            id: lny2rtmqd6aze
      required:
      - reference
      x-stoplight:
        id: i2gbo7pz4pmz1
    _frequent_post_request:
      properties:
        expiration_time:
          type: string
          x-stoplight:
            id: 0djoaafyl5u2u
        currency:
          default: EUR
          enum:
          - EUR
          - BRL
          type: string
          x-stoplight:
            id: v8rlnx70f9i86
        customer:
          $ref: '#/components/schemas/Customer'
        key:
          description: The merchant's key for identifying the payment.
          maxLength: 50
          type: string
          x-stoplight:
            id: hjrtmauns3o2q
        min_value:
          format: double
          minimum: 0.01
          type: number
          x-stoplight:
            id: wk05uu0rjhfwf
            explicitProperties:
            - type
            - format
            - minimum
        max_value:
          format: double
          minimum: 0.01
          type: number
          x-stoplight:
            id: wk05uu0rjhfwf
            explicitProperties:
            - type
            - format
            - minimum
        unlimited_payments:
          default: true
          description: "Transactions will be unlimited, max or min value will be refreshed\
            \ on each payment."
          type: boolean
          x-stoplight:
            id: n8ifl3qqn2rpd
        method:
          enum:
          - mb
          - cc
          - dd
          - mbw
          - vi
          type: string
          x-stoplight:
            id: p0kpdl1vafpfp
        sdd_mandate:
          $ref: '#/components/schemas/SddMandate'
        multibanco:
          $ref: '#/components/schemas/_frequent_post_request_multibanco'
      required:
      - customer
      - max_value
      - method
      - min_value
    _frequent_post_201_response_method:
      example:
        reference: "810000618"
        type: mb
        entity: "59126"
        url: https://cc.test.easypay.pt/start/980d4826-8574-4782-8450-18db150b7c26
        status: waiting
      properties:
        type:
          enum:
          - mb
          - cc
          - dd
          - mbw
          - vi
          type: string
        status:
          enum:
          - waiting
          - pending
          - active
          - deleted
          - success
          type: string
        entity:
          example: "59126"
          type: string
        reference:
          example: "810000618"
          type: string
        url:
          description: Only returns if the payment is a Credid Card.
          example: https://cc.test.easypay.pt/start/980d4826-8574-4782-8450-18db150b7c26
          type: string
    _frequent_post_201_response_customer:
      example:
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          format: uuid
          type: string
    _frequent_post_201_response:
      example:
        method:
          reference: "810000618"
          type: mb
          entity: "59126"
          url: https://cc.test.easypay.pt/start/980d4826-8574-4782-8450-18db150b7c26
          status: waiting
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        message:
        - Your request was successfully created
        - Your request was successfully created
        status: ok
        customer:
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        status:
          example: ok
          type: string
        message:
          items:
            example: Your request was successfully created
            type: string
          type: array
        id:
          format: uuid
          type: string
        method:
          $ref: '#/components/schemas/_frequent_post_201_response_method'
        customer:
          $ref: '#/components/schemas/_frequent_post_201_response_customer'
      x-examples:
        example-1:
          status: ok
          message:
          - Your request was successfully created
          id: 86401037-1c8d-4cf3-9172-d0a29b17b9fd
          method:
            type: CC
            status: waiting
            entity: "59126"
            reference: "810000618"
            url: https://eo5m73g8idr0idl.m.pipedream.net
          customer:
            id: e7bb115b-3e59-441a-bdb4-60b0f066c2d0
    _frequent__id__patch_request:
      properties:
        status:
          enum:
          - active
          - deleted
          type: string
        expiration_time:
          example: 2017-12-12 16:05
          format: Y-m-d H:i
          type: string
        currency:
          $ref: '#/components/schemas/Currency'
        customer:
          $ref: '#/components/schemas/Customer'
        key:
          description: The merchant's key for identifying the payment.
          example: Key Example
          maxLength: 50
          type: string
        max_value:
          example: 25.5
          format: double
          minimum: 0.01
          type: number
        min_value:
          example: 10
          format: double
          minimum: 0.01
          type: number
        unlimited_payments:
          default: true
          description: "Transactions will be unlimited, max or min value will be refreshed\
            \ on each payment."
          type: boolean
        sdd_mandate:
          $ref: '#/components/schemas/SddMandate'
      x-examples:
        example-1:
          status: active
          expiration_time: 2038-12-12 16:05
          currency: EUR
          customer:
            id: 22ea3cc9-424b-489a-91b7-8955f643dc93
            name: Customer Example
            email: customer@example.com
            phone: "911234567"
            phone_indicative: "+351"
            fiscal_number: PT123456789
            key: Key Example
            language: PT
          key: Example Key
          max_value: 20
          min_value: 2
          unlimited_payments: false
          sdd_mandate:
            id: "12345678901"
            iban: PT50002700000001234567833
            key: Key Example
            name: Name Example
            email: customer@example.com
            phone: "911234567"
            account_holder: Acount Name Example
            country_code: PT
            max_num_debits: "12"
    _frequent__id__patch_200_response_method:
      example:
        reference: "810000618"
        type: mb
        url: https://cc.test.easypay.pt/start/86401037-1c8d-4cf3-9172-d0a29b17b9fd
        entity: "59126"
        status: waiting
      properties:
        type:
          enum:
          - mb
          - cc
          - dd
          - mbw
          - vi
          type: string
        status:
          enum:
          - waiting
          - pending
          - active
          - deleted
          type: string
        url:
          description: Only returns if the payment is a Credid Card.
          example: https://cc.test.easypay.pt/start/86401037-1c8d-4cf3-9172-d0a29b17b9fd
          type: string
        entity:
          example: "59126"
          type: string
        reference:
          example: "810000618"
          type: string
    _frequent__id__patch_200_response:
      example:
        method:
          reference: "810000618"
          type: mb
          url: https://cc.test.easypay.pt/start/86401037-1c8d-4cf3-9172-d0a29b17b9fd
          entity: "59126"
          status: waiting
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        message:
        - Your request was successfully created
        - Your request was successfully created
        status: ok
        customer:
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        status:
          example: ok
          type: string
        message:
          items:
            example: Your request was successfully created
            type: string
          type: array
        id:
          format: uuid
          type: string
        method:
          $ref: '#/components/schemas/_frequent__id__patch_200_response_method'
        customer:
          $ref: '#/components/schemas/_frequent_post_201_response_customer'
      x-examples:
        example-1:
          status: ok
          message:
          - Your request was successfully created
          id: 86401037-1c8d-4cf3-9172-d0a29b17b9fd
          method:
            type: CC
            status: waiting
            url: https://cc.test.easypay.pt/start/86401037-1c8d-4cf3-9172-d0a29b17b9fd
          customer:
            id: e7bb115b-3e59-441a-bdb4-60b0f066c2d0
    frequent_authorisation_request:
      properties:
        mbway_sdk:
          $ref: '#/components/schemas/Mbway_sdk'
        transaction_key:
          description: Your internal key identifying this authorisation.
          maxLength: 255
          type: string
        force_3ds:
          default: false
          description: Whether or not you want to force the 3DS authentication.
          type: boolean
        descriptive:
          description: This will appear in the bank statement/mbway application.
          example: Descriptive Example
          maxLength: 255
          type: string
        value:
          description: Value will be rounded to 2 decimals.
          example: 10.5
          format: double
          minimum: 0.5
          type: number
      required:
      - descriptive
      - value
      x-examples:
        example-1:
          mbway_sdk:
            purchase_token: 626E6AA2224D017917D839D4D39296B49441A1D10DA7E8DB6E7E1A4356DDE75429531BEB32190C6D736FA12C7A116CA5F3FCAEE72570406F51371A0CB6E14B6B
            initial_timestamp: 2018-01-01 23:59:59
            merchant_operation_id: TESTACCOUNT5436
            payload: "{'purchase_token':'EDEB342D3588DDDEEE3E070476E72A6B222E3456C1C825D3E89A734005CE81F69986045424984F55B3233CBFD090A8A564071BBB493F34C4849C964','initial_timestamp':'2018-09-20T10:46:08+01:00','merchant_operation_id':'TESTACCOUNT5436','payload':{'amount':1000,'currencyCode':'9782'}}"
          transaction_key: string
          force_3ds: false
          descriptive: Descriptive Example
          value: 17.5
    frequent_authorisation_201_response:
      allOf:
      - $ref: '#/components/schemas/Properties_Has_ID'
      - $ref: '#/components/schemas/StatusDetails'
      example:
        id: 4c67e74b-a256-4e0a-965d-97bf5d01bd50
        message:
        - Your request was successfully created
        - Your request was successfully created
        status: ok
    _config_patch_request:
      properties:
        generic:
          default: https://www.easypay.pt/generic
          description: URL for generic notification
          type: string
        authorisation:
          default: https://www.easypay.pt/authorisation
          description: URL for authorisation notification
          type: string
        transaction:
          default: https://www.easypay.pt/transaction
          description: URL for transaction notification
          type: string
        visa_fwd:
          default: https://www.easypay.pt/visa_fwd
          description: URL for redirect clients on credit card forward
          type: string
        visa_detail:
          default: https://www.easypay.pt/visa_detail
          description: URL for credit card payment detail
          type: string
    _capture__id__post_request_account:
      description: For multi-account clients.
      properties:
        id:
          description: The uuid of the account.
          format: uuid
          type: string
    _capture__id__post_request_splits_inner_account:
      description: The account owner of the split.
      properties:
        id:
          description: The uuid of the account.
          format: uuid
          type: string
    _capture__id__post_request_splits_inner_margin_account:
      description: The account used for the margin.
      properties:
        id:
          format: uuid
          type: string
    _capture__id__post_request_splits_inner:
      properties:
        split_key:
          description: The merchant's internal key for identifying the split.
          example: example key
          maxLength: 50
          type: string
        split_descriptive:
          description: The description of the split.
          maxLength: 255
          type: string
        value:
          description: "The split funds, rounded to 2 decimals."
          example: 10.55
          format: double
          minimum: 0.01
          type: number
        account:
          $ref: '#/components/schemas/_capture__id__post_request_splits_inner_account'
        margin_value:
          description: "The margin funds, rounded to 2 decimals."
          format: double
          minimum: 0.01
          type: number
        margin_account:
          $ref: '#/components/schemas/_capture__id__post_request_splits_inner_margin_account'
      required:
      - value
    _capture__id__post_request:
      properties:
        transaction_key:
          description: Your internal key identifying this capture.
          example: key example
          maxLength: 50
          type: string
        capture_date:
          example: 2022-11-11
          format: date
          type: string
        account:
          $ref: '#/components/schemas/_capture__id__post_request_account'
        splits:
          description: Used in split payments.
          items:
            $ref: '#/components/schemas/_capture__id__post_request_splits_inner'
          type: array
        mbway_sdk:
          $ref: '#/components/schemas/Mbway_sdk'
        force_3ds:
          default: false
          description: Whether or not you want to force the 3DS authentication on
            Credit Cards (used only on Frequent capture without authorisation).
          type: boolean
        descriptive:
          description: This will appear in the bank statement/mbway application.
          example: descriptive example
          maxLength: 255
          type: string
        value:
          description: Value will be rounded to 2 decimals.
          example: 20.55
          format: double
          minimum: 0.5
          type: number
        currency:
          $ref: '#/components/schemas/Currency'
      required:
      - value
      x-examples:
        Capture immediately:
          transaction_key: string
          descriptive: Descriptive Example
          value: 17.5
        Capture delayed:
          transaction_key: string
          descriptive: Descriptive Example
          value: 17.5
          capture_date: 2032-11-11
        Capture with split payments:
          transaction_key: string
          descriptive: Descriptive Example
          value: 17.5
          splits:
          - split_key: string
            split_descriptive: Descriptive Example
            value: 1
            account:
              id: 22ea3cc9-424b-489a-91b7-8955f643dc93
            margin_value: 0.1
            margin_account:
              id: 22ea3cc9-424b-489a-91b7-8955f643dc93
        Full filled example:
          transaction_key: string
          capture_date: 2037-11-11
          account:
            id: 22ea3cc9-424b-489a-91b7-8955f643dc93
          splits:
          - split_key: string
            split_descriptive: Descriptive Example
            value: 1
            account:
              id: 22ea3cc9-424b-489a-91b7-8955f643dc93
            margin_value: 0.1
            margin_account:
              id: 22ea3cc9-424b-489a-91b7-8955f643dc93
          mbway_sdk:
            purchase_token: 626E6AA2224D017917D839D4D39296B49441A1D10DA7E8DB6E7E1A4356DDE75429531BEB32190C6D736FA12C7A116CA5F3FCAEE72570406F51371A0CB6E14B6B
            initial_timestamp: 2018-01-01 23:59:59
            merchant_operation_id: TESTACCOUNT5436
            payload: "{'purchase_token':'EDEB342D3588DDDEEE3E070476E72A6B222E3456C1C825D3E89A734005CE81F69986045424984F55B3233CBFD090A8A564071BBB493F34C4849C964','initial_timestamp':'2018-09-20T10:46:08+01:00','merchant_operation_id':'TESTACCOUNT5436','payload':{'amount':1000,'currencyCode':'9782'}}"
          force_3ds: false
          descriptive: Descriptive Example
          value: 17.5
    _capture__id__post_201_response:
      example:
        StatusDetails:
          message:
          - Your request was successfully created
          - Your request was successfully created
          status: ok
        Properties_Has_ID:
          id: 4c67e74b-a256-4e0a-965d-97bf5d01bd50
      properties:
        Properties_Has_ID:
          $ref: '#/components/schemas/Properties_Has_ID'
        StatusDetails:
          $ref: '#/components/schemas/StatusDetails'
    _capture__capture_uuid__splits__capture_split_uuid__patch_request:
      properties:
        clearing_date:
          description: |-
            The new date for the split to be cleared.</br>
            This field must be in the future and no longer than 2 years from today.
          example: 2006-01-02
          format: date
          type: string
    _capture__capture_uuid__splits__capture_split_uuid__patch_201_response:
      example:
        StatusDetails:
          message:
          - Your request was successfully created
          - Your request was successfully created
          status: ok
      properties:
        StatusDetails:
          $ref: '#/components/schemas/StatusDetails'
    _authorisation__id__get_200_response_customer:
      example:
        phone: phone
        name: name
        language: language
        id: id
        email: email
        key: key
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        phone:
          type: string
        key:
          type: string
        language:
          type: string
    _authorisation__id__get_200_response_method:
      example:
        last_four: last_four
        type: mb
        card_type: MasterCard
        expiration_date: expiration_date
        url: url
        status: waiting
      properties:
        type:
          enum:
          - mb
          - cc
          - dd
          - mbw
          type: string
        status:
          enum:
          - waiting
          - pending
          - active
          - failed
          - canceled
          - deleted
          type: string
        url:
          type: string
        last_four:
          description: Last 4 digits of the submitted Credit Card.
          type: string
        card_type:
          enum:
          - MasterCard
          - VISA
          type: string
        expiration_date:
          type: string
    _authorisation__id__get_200_response_transactions_inner_values:
      example:
        requested: 1
        transfer: 9.301444243932576
        paid: 5
        variable_fee: 2
        fixed_fee: 5
        tax: 7.061401241503109
      properties:
        requested:
          type: integer
        paid:
          type: integer
        fixed_fee:
          type: integer
        variable_fee:
          type: integer
        tax:
          type: number
        transfer:
          type: number
    _authorisation__id__get_200_response_transactions_inner:
      example:
        date: date
        document_number: document_number
        method: method
        values:
          requested: 1
          transfer: 9.301444243932576
          paid: 5
          variable_fee: 2
          fixed_fee: 5
          tax: 7.061401241503109
        descriptive: descriptive
        id: id
        transfer_date: transfer_date
        transfer_batch: transfer_batch
        key: key
      properties:
        id:
          type: string
        key:
          type: string
        date:
          type: string
        values:
          $ref: '#/components/schemas/_authorisation__id__get_200_response_transactions_inner_values'
        transfer_date:
          type: string
        transfer_batch:
          type: string
        method:
          type: string
        document_number:
          type: string
        descriptive:
          type: string
    _authorisation__id__get_200_response:
      example:
        value_captured: 6.027456183070403
        method:
          last_four: last_four
          type: mb
          card_type: MasterCard
          expiration_date: expiration_date
          url: url
          status: waiting
        currency: EUR
        id: id
        message: message
        transactions:
        - date: date
          document_number: document_number
          method: method
          values:
            requested: 1
            transfer: 9.301444243932576
            paid: 5
            variable_fee: 2
            fixed_fee: 5
            tax: 7.061401241503109
          descriptive: descriptive
          id: id
          transfer_date: transfer_date
          transfer_batch: transfer_batch
          key: key
        - date: date
          document_number: document_number
          method: method
          values:
            requested: 1
            transfer: 9.301444243932576
            paid: 5
            variable_fee: 2
            fixed_fee: 5
            tax: 7.061401241503109
          descriptive: descriptive
          id: id
          transfer_date: transfer_date
          transfer_batch: transfer_batch
          key: key
        value: 0.8008281904610115
        key: key
        status: success
        customer:
          phone: phone
          name: name
          language: language
          id: id
          email: email
          key: key
      properties:
        id:
          type: string
        status:
          enum:
          - success
          - pending
          - failed
          - error
          type: string
        message:
          type: string
        key:
          type: string
        customer:
          $ref: '#/components/schemas/_authorisation__id__get_200_response_customer'
        method:
          $ref: '#/components/schemas/_authorisation__id__get_200_response_method'
        currency:
          $ref: '#/components/schemas/Currency'
        value:
          type: number
        value_captured:
          type: number
        transactions:
          items:
            $ref: '#/components/schemas/_authorisation__id__get_200_response_transactions_inner'
          type: array
      x-examples:
        example-1:
          id: ef7d7bc6-6c1a-4193-a33e-d9e7bba29727
          status: success
          message: Operação concluída com sucesso
          key: Example_Key
          customer:
            id: 88702340-8aa2-44b5-8e6c-dadbd25538c7
            name: Robert Stuart
            email: email@example.com
            phone: "911234567"
            key: Customer key
            language: PT
          method:
            type: CC
            status: active
            url: https://test.easypay.pt/_s/cof/c11_freq.php?e=59126&r=810009391&c=PT&l=PT&ep_k1=d2152db6-2e36-4436-9a46-f8cf4b7aca43
            last_four: "0000"
            card_type: VISA
            expiration_date: 03/24
          currency: EUR
          value: 20
          value_captured: 20
          transactions:
          - id: 760d105e-950d-4b41-8017-cad840ca3baa
            key: Example Key
            date: 2022-11-25T10:30:14Z
            values:
              requested: -1
              paid: -1
              fixed_fee: 1
              variable_fee: 0
              tax: 0.23
              transfer: -2.23
            transfer_date: 2022-11-25T00:00:00Z
            transfer_batch: ""
            method: fp
            document_number: MARCEL0208220453362220221125103014
            descriptive: ""
    checkout_post_request_payment_capture_splits_inner_margin_account:
      description: The account used for the margin.
      properties:
        id:
          description: The uuid of the account.
          format: uuid
          type: string
    checkout_post_request_payment_capture_splits_inner:
      properties:
        split_key:
          description: The merchant's internal key for identifying the split.
          maxLength: 50
          type: string
        split_descriptive:
          description: The description of the split.
          maxLength: 255
          type: string
        value:
          description: "The split funds, rounded to 2 decimals."
          format: double
          minimum: 0.01
          type: number
        account:
          $ref: '#/components/schemas/_capture__id__post_request_splits_inner_account'
        margin_value:
          description: "The margin funds, rounded to 2 decimals."
          type: number
        margin_account:
          $ref: '#/components/schemas/checkout_post_request_payment_capture_splits_inner_margin_account'
      required:
      - value
    checkout_post_request_payment_capture:
      description: Required if the payment type is sale.
      properties:
        transaction_key:
          description: The internal key used to identify this transaction in the merchant's
            database.
          maxLength: 50
          type: string
        capture_date:
          description: The capture date.
          example: 2017-12-12 16:05
          format: date
          type: string
        account:
          $ref: '#/components/schemas/_capture__id__post_request_account'
        splits:
          description: Used in split payments.
          items:
            $ref: '#/components/schemas/checkout_post_request_payment_capture_splits_inner'
          type: array
        descriptive:
          description: |-
            Required if the payment method is 'MBW'.</br>
            The description of the capture. Will be displayed in the bank statement or in the MB WAY application.
          maxLength: 255
          type: string
    checkout_post_request_payment:
      description: Describing the payment configuration.
      properties:
        methods:
          description: |-
            The available methods are different according to the chosen payment type:

            Available for single, frequent or subscription payment type:

            * 'CC' (Credit Card)
            * 'DD' (Direct Debit)

            Available for single or frequent payment type:
            * 'MBW' (MB WAY)

            * 'AP' (Apple Pay)

            * 'GP' (Google Pay)

            * 'MB' (Multibanco)

            * 'VI' (Virtual IBAN)

            * 'UF' (Universo Flex)

            * 'SC' (Santander Consumer)

            * 'AP' (Apple Pay)
          items:
            enum:
            - cc
            - mbw
            - mb
            - dd
            - vi
            - uf
            - sc
            - ap
            type: string
          type: array
        type:
          default: sale
          description: The type of payment for Credit Card and MB WAY operations.
          enum:
          - sale
          - authorisation
          type: string
        capture:
          $ref: '#/components/schemas/checkout_post_request_payment_capture'
        expiration_time:
          description: |-
            The last possible time to make the payment. Applicable in Multibanco payments.

            Note: If the expiration time is less than the default checkout session expiration (which is 30 minutes),</br> the user won't be able to interact with the Checkout after that time.
          example: 2017-12-12 16:05
          format: Y-m-d H:i
          type: string
        currency:
          $ref: '#/components/schemas/Currency'
        key:
          description: The merchant's key for identifying the payment.
          maxLength: 50
          type: string
        max_value:
          description: <font color="#FF0000">Additional property for frequent payments.</font>
          format: double
          minimum: 0.01
          type: number
        min_value:
          description: <font color="#FF0000">Additional property for frequent payments.</font>
          format: double
          minimum: 0.01
          type: number
        unlimited_payments:
          default: true
          description: |-
            <font color="#FF0000">Additional property for frequent payments.</font>

            Unlimited transactions.</br>Uses 'max_value' and 'min_value' as limits per transaction instead.
          type: boolean
        frequency:
          description: <font color="#FF0000">Required property for subscription payments.</font>
          enum:
          - 1D
          - 1W
          - 2W
          - 1M
          - 2M
          - 3M
          - 4M
          - 6M
          - 1Y
          - 2Y
          - 3Y
          type: string
        max_captures:
          description: |-
            <font color="#FF0000">Additional property for subscription payments.</font>

            Number of payments (required when no expiration_time is set).
          type: integer
        start_time:
          description: |-
            <font color="#FF0000">Required property for subscription payments.</font>

            Defining the start of billing cycles.
          example: 2017-12-12 16:05
          format: Y-m-d H:i
          type: string
        failover:
          default: false
          description: |-
            <font color="#FF0000">Additional property for subscription payments.</font>

            After all retries failed, the payment cycle can have another try with another single method.
          type: boolean
        capture_now:
          default: false
          description: |-
            <font color="#FF0000">Additional property for subscription payments.</font>

            Whether to schedule an immediate capture and schedule the second one for start_time.
          type: boolean
        retries:
          default: 0
          description: |-
            <font color="#FF0000">Additional property for subscription payments.</font>

            Number of retries in each payment cycle.</br>
            The chosen frequency will define the max number of possible retries.
          type: number
      required:
      - methods
    checkout_post_request_order_items_inner:
      properties:
        description:
          description: The description of the item.
          maxLength: 100
          type: string
        quantity:
          description: Quantity of this item being paid.
          type: integer
        key:
          description: The merchant's key to identify the item.
          maxLength: 50
          type: string
        value:
          description: "The price being paid for the specific item(s), rounded to\
            \ 2 decimals."
          format: double
          minimum: 0.01
          type: number
      required:
      - description
      - value
    checkout_post_request_order:
      description: Order represent the order/cart being paid. Order is required if
        type is one single or subscription.
      properties:
        items:
          items:
            $ref: '#/components/schemas/checkout_post_request_order_items_inner'
          type: array
        key:
          description: The merchant's key to identify the order.
          type: string
        value:
          description: "The price being paid for the entire order, rounded to 2 decimals."
          minimum: 0.01
          type: number
      required:
      - value
    checkout_post_request_customer:
      description: The customer details.
      properties:
        id:
          description: The uuid of a previously created customer.
          format: uuid
          type: string
        name:
          description: Required if payment.method is 'MBW'</br>The customer's name.
          maxLength: 255
          type: string
        email:
          description: The customer's email.
          maxLength: 70
          type: string
        phone:
          description: Required if payment.method is 'MBW'</br>The customer's phone
            number.
          maxLength: 15
          type: string
        phone_indicative:
          description: The phone country code.
          maxLength: 5
          type: string
        fiscal_number:
          description: The customer's fiscal number (prefixed by the country code).
          example: PT123456789
          maxLength: 20
          type: string
        key:
          description: The merchant's key to identify the customer.
          maxLength: 255
          type: string
      required:
      - email
    checkout_post_request:
      properties:
        type:
          description: "Only the first value in the Array is considered (e.g. ['single',\
            \ 'frequent'] would be equivalent to ['single'])."
          items:
            enum:
            - single
            - frequent
            - subscription
            type: string
          type: array
        payment:
          $ref: '#/components/schemas/checkout_post_request_payment'
        order:
          $ref: '#/components/schemas/checkout_post_request_order'
        customer:
          $ref: '#/components/schemas/checkout_post_request_customer'
      required:
      - customer
      - payment
      - type
      x-examples:
        example-1:
          type:
          - single
          - frequent
          - subscription
          payment:
            methods:
            - mb
            - cc
            - mbw
            - vi
            - uf
            - sc
            - dd
            - ap
            type: sale
            capture:
              transaction_key: string
              capture_date: string
              account:
                id: 22ea3cc9-424b-489a-91b7-8955f643dc93
              splits:
              - split_key: string
                split_descriptive: Descriptive Example
                value: 1
                account:
                  id: 22ea3cc9-424b-489a-91b7-8955f643dc93
                margin_value: 0.1
                margin_account:
                  id: 22ea3cc9-424b-489a-91b7-8955f643dc93
              descriptive: Descriptive Example
            expiration_time: 2017-12-12 16:05
            currency: EUR
            key: Example Key
            max_value: 20
            min_value: 2
            unlimited_payments: false
            frequency: 1D
            max_captures: 10
            start_time: 2017-12-12 16:05
            failover: true
            capture_now: true
            retries: 2
          order:
            items:
            - description: Item in Shopping Cart
              quantity: 2
              key: Example Key
              value: 17.5
            key: Example Key
            value: 17.5
          customer:
            id: 22ea3cc9-424b-489a-91b7-8955f643dc93
            name: Customer Example
            email: customer@example.com
            phone: "911234567"
            phone_indicative: "+351"
            fiscal_number: PT123456789
            key: Key Example
    checkout_post_201_response:
      example:
        session: session
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        config: "{}"
      properties:
        session:
          description: Session token to be used by the rest of the Checkout process.
          type: string
        config:
          deprecated: true
          description: Configuration properties.
          type: object
        id:
          format: uuid
          type: string
    _subscription_get_200_response_meta_page:
      example:
        current: 0
        total: 6
      properties:
        current:
          type: integer
        total:
          type: integer
      required:
      - current
      - total
    _subscription_get_200_response_meta_records:
      example:
        per_page: 5
        total: 1
      properties:
        total:
          type: integer
        per_page:
          type: integer
    _subscription_get_200_response_meta_links:
      example:
        next: next
        last: last
        prev: prev
        first: first
      properties:
        first:
          type: string
        prev:
          type: string
        next:
          type: string
        last:
          type: string
    _subscription_get_200_response_meta:
      example:
        records:
          per_page: 5
          total: 1
        links:
          next: next
          last: last
          prev: prev
          first: first
        page:
          current: 0
          total: 6
      properties:
        page:
          $ref: '#/components/schemas/_subscription_get_200_response_meta_page'
        records:
          $ref: '#/components/schemas/_subscription_get_200_response_meta_records'
        links:
          $ref: '#/components/schemas/_subscription_get_200_response_meta_links'
      required:
      - page
    _subscription_get_200_response_data_inner_customer:
      example:
        fiscal_number: fiscal_number
        phone: phone
        name: name
        language: language
        phone_indicative: phone_indicative
        id: id
        email: email
        key: key
      properties:
        id:
          type: string
        language:
          type: string
        name:
          type: string
        email:
          type: string
        phone:
          type: string
        phone_indicative:
          type: string
        fiscal_number:
          type: string
        key:
          type: string
    _subscription_get_200_response_data_inner_method_sdd_mandate:
      example:
        country_code: country_code
        max_num_debits: max_num_debits
        phone: phone
        account_holder: account_holder
        billing_entity: billing_entity
        iban: iban
        name: name
        id: id
        key: key
        email: email
      properties:
        id:
          type: string
        billing_entity:
          type: string
        iban:
          type: string
        key:
          type: string
        name:
          type: string
        email:
          type: string
        phone:
          type: string
        account_holder:
          type: string
        country_code:
          type: string
        max_num_debits:
          type: string
    _subscription_get_200_response_data_inner_method:
      example:
        type: type
        sdd_mandate:
          country_code: country_code
          max_num_debits: max_num_debits
          phone: phone
          account_holder: account_holder
          billing_entity: billing_entity
          iban: iban
          name: name
          id: id
          key: key
          email: email
        status: status
      properties:
        type:
          type: string
        status:
          type: string
        sdd_mandate:
          $ref: '#/components/schemas/_subscription_get_200_response_data_inner_method_sdd_mandate'
    _subscription_get_200_response_data_inner:
      example:
        method:
          type: type
          sdd_mandate:
            country_code: country_code
            max_num_debits: max_num_debits
            phone: phone
            account_holder: account_holder
            billing_entity: billing_entity
            iban: iban
            name: name
            id: id
            key: key
            email: email
          status: status
        capture_now: true
        expiration_time: expiration_time
        created_at: created_at
        max_captures: 2
        frequency: frequency
        start_time: start_time
        retries: 5
        failover: true
        currency: currency
        id: id
        value: 7.061401241503109
        key: key
        customer:
          fiscal_number: fiscal_number
          phone: phone
          name: name
          language: language
          phone_indicative: phone_indicative
          id: id
          email: email
          key: key
      properties:
        id:
          type: string
        key:
          type: string
        expiration_time:
          type: string
        start_time:
          type: string
        frequency:
          type: string
        retries:
          type: integer
        max_captures:
          type: integer
        failover:
          type: boolean
        capture_now:
          type: boolean
        customer:
          $ref: '#/components/schemas/_subscription_get_200_response_data_inner_customer'
        method:
          $ref: '#/components/schemas/_subscription_get_200_response_data_inner_method'
        currency:
          type: string
        value:
          type: number
        created_at:
          description: Date when payment was created
          type: string
    _subscription_get_200_response:
      example:
        data:
        - method:
            type: type
            sdd_mandate:
              country_code: country_code
              max_num_debits: max_num_debits
              phone: phone
              account_holder: account_holder
              billing_entity: billing_entity
              iban: iban
              name: name
              id: id
              key: key
              email: email
            status: status
          capture_now: true
          expiration_time: expiration_time
          created_at: created_at
          max_captures: 2
          frequency: frequency
          start_time: start_time
          retries: 5
          failover: true
          currency: currency
          id: id
          value: 7.061401241503109
          key: key
          customer:
            fiscal_number: fiscal_number
            phone: phone
            name: name
            language: language
            phone_indicative: phone_indicative
            id: id
            email: email
            key: key
        - method:
            type: type
            sdd_mandate:
              country_code: country_code
              max_num_debits: max_num_debits
              phone: phone
              account_holder: account_holder
              billing_entity: billing_entity
              iban: iban
              name: name
              id: id
              key: key
              email: email
            status: status
          capture_now: true
          expiration_time: expiration_time
          created_at: created_at
          max_captures: 2
          frequency: frequency
          start_time: start_time
          retries: 5
          failover: true
          currency: currency
          id: id
          value: 7.061401241503109
          key: key
          customer:
            fiscal_number: fiscal_number
            phone: phone
            name: name
            language: language
            phone_indicative: phone_indicative
            id: id
            email: email
            key: key
        meta:
          records:
            per_page: 5
            total: 1
          links:
            next: next
            last: last
            prev: prev
            first: first
          page:
            current: 0
            total: 6
      properties:
        meta:
          $ref: '#/components/schemas/_subscription_get_200_response_meta'
        data:
          items:
            $ref: '#/components/schemas/_subscription_get_200_response_data_inner'
          type: array
      required:
      - meta
      x-examples:
        example-1:
          meta:
            page:
              current: 1
              total: 826
            records:
              total: 1651
              per_page: 2
            links:
              first: ?page=1
              prev: ""
              next: ?page=2
              last: ?page=826
          data:
          - id: 93f03ed9-e1f4-48d4-9d0a-0be2d6846b84
            key: ""
            expiration_time: ""
            start_time: 2022-12-04T12:00:00Z
            frequency: 1Y
            retries: 0
            max_captures: 2
            failover: false
            capture_now: false
            customer:
              id: 12687579-e646-4963-9270-2721ae17fcf4
              language: ""
            method:
              type: DD
              status: active
              sdd_mandate:
                id: "50124438752"
                billing_entity: PT16103627
                iban: PT500027**XX7833
                key: Sdd Mandate key
                name: Fre*** DD***
                email: cus***@example.com
                phone: 911***567
                account_holder: Acc*** Exa***
                country_code: PT
                max_num_debits: "0"
            currency: EUR
            value: 17.5
            created_at: 2022-11-22 14:31:49
          - id: 63f3f5a0-1543-4ed7-9b44-7f0f802ff476
            key: ""
            expiration_time: 2022-12-12T16:05:00Z
            start_time: 2022-12-04T12:00:00Z
            frequency: 1Y
            retries: 2
            max_captures: 10
            failover: true
            capture_now: false
            customer:
              id: d927731a-8684-4aa9-bc50-f691d666c117
              name: Cus*** Exa***
              email: cus***@example.com
              phone: 911***567
              phone_indicative: "+351"
              fiscal_number: PT123***89
              key: Key Example
              language: PT
            method:
              type: DD
              status: inactive
              sdd_mandate:
                id: "50124437147"
                billing_entity: PT16103627
                iban: PT500027**XX7833
                key: Sdd Mandate key
                name: Fre*** DD***
                email: cus***@example.com
                phone: 911***522
                account_holder: Acc*** Exa***
                country_code: PT
                max_num_debits: "0"
            currency: EUR
            value: 17.5
            created_at: 2022-11-22 14:15:10
    _subscription_post_request_capture:
      properties:
        transaction_key:
          description: The internal key used to identify this transaction in the merchant's
            database.
          maxLength: 50
          type: string
        account:
          $ref: '#/components/schemas/_capture__id__post_request_account'
        descriptive:
          description: The description of the capture. Will be displayed in the bank
            statement or in the MB WAY application.
          maxLength: 255
          type: string
    _subscription_post_request_customer:
      properties:
        id:
          description: The uuid of a previously created customer.
          format: uuid
          type: string
        name:
          description: The customer's name.
          maxLength: 255
          type: string
        email:
          description: The customer's e-mail.
          maxLength: 70
          type: string
        phone:
          description: The customer's phone.
          maxLength: 15
          type: string
        phone_indicative:
          example: "+351"
          maxLength: 5
          type: string
        fiscal_number:
          description: The customer's fiscal number (prefixed by the country code).
          example: PT123456789
          maxLength: 20
          type: string
        key:
          description: The merchant's key to identify the customer.
          example: Example Key
          maxLength: 255
          type: string
        language:
          default: PT
          example: PT
          format: ISO Alpha-2 code
          type: string
    _subscription_post_request:
      properties:
        frequent_id:
          description: Only required to create a subscription from active Frequent
            Payment
          format: uuid
          type: string
        capture:
          $ref: '#/components/schemas/_subscription_post_request_capture'
        expiration_time:
          description: Required only when no max_captures is set.</br>The last possible
            time to make the payment.
          example: 2017-12-12 16:05
          format: Y-m-d H:i
          type: string
        currency:
          $ref: '#/components/schemas/Currency'
        customer:
          $ref: '#/components/schemas/_subscription_post_request_customer'
        key:
          description: The merchant's key for identifying the payment.
          example: Example Key
          maxLength: 50
          type: string
        value:
          description: The payment value.</br>Will be rounded to 2 decimals.
          example: 12.55
          format: double
          minimum: 0.5
          type: number
        frequency:
          enum:
          - 1D
          - 1W
          - 2W
          - 1M
          - 2M
          - 3M
          - 4M
          - 6M
          - 1Y
          - 2Y
          - 3Y
          example: 1W
          type: string
        max_captures:
          description: Required when no expiration_time is set.</br>Number of payments.
          type: integer
        start_time:
          description: Defining the start of billing cycles.
          example: 2017-12-12 16:05
          format: Y-m-d H:i
          type: string
        failover:
          default: false
          description: "After all retries failed, the payment cycle can have another\
            \ try with another single method."
          type: boolean
        capture_now:
          default: false
          description: Whether to schedule an immediate capture and schedule the second
            one for start_time.
          type: boolean
        retries:
          default: 0
          description: |-
            Number of retries in each payment cycle.</br>
            The chosen frequency will define the max number of possible retries.
          type: integer
        method:
          description: The payment methods.
          enum:
          - cc
          - dd
          example: cc
          type: string
        sdd_mandate:
          $ref: '#/components/schemas/SddMandate'
      required:
      - frequency
      - method
      - start_time
      - value
      x-examples:
        example-1:
          frequent_id: 4c67e74b-a256-4e0a-965d-97bf5d01bd50
          capture:
            transaction_key: string
            account:
              id: 22ea3cc9-424b-489a-91b7-8955f643dc93
            descriptive: Descriptive Example
          expiration_time: 2017-12-12 16:05
          currency: EUR
          customer:
            id: 22ea3cc9-424b-489a-91b7-8955f643dc93
            name: Customer Example
            email: customer@example.com
            phone: "911234567"
            phone_indicative: "+351"
            fiscal_number: PT123456789
            key: Key Example
            language: PT
          key: Example Key
          value: 17.5
          frequency: 1D
          max_captures: 10
          start_time: 2017-12-12 16:05
          failover: true
          capture_now: true
          retries: 2
          method: CC
          sdd_mandate:
            id: "12345678901"
            iban: PT50002700000001234567833
            key: Key Example
            name: Name Example
            email: customer@example.com
            phone: "911234567"
            account_holder: Acount Name Example
            country_code: PT
            max_num_debits: "12"
    _subscription_post_201_response_method_sdd_mandate:
      example:
        country_code: country_code
        phone: phone
        account_holder: account_holder
        billing_entity: billing_entity
        iban: iban
        name: name
        id: id
        reference_adc: reference_adc
        key: key
        email: email
      properties:
        id:
          type: string
        billing_entity:
          type: string
        iban:
          type: string
        key:
          type: string
        name:
          type: string
        email:
          type: string
        phone:
          type: string
        account_holder:
          type: string
        country_code:
          type: string
        reference_adc:
          type: string
    _subscription_post_201_response_method:
      example:
        type: type
        sdd_mandate:
          country_code: country_code
          phone: phone
          account_holder: account_holder
          billing_entity: billing_entity
          iban: iban
          name: name
          id: id
          reference_adc: reference_adc
          key: key
          email: email
        status: status
      properties:
        type:
          type: string
        status:
          type: string
        sdd_mandate:
          $ref: '#/components/schemas/_subscription_post_201_response_method_sdd_mandate'
    _subscription_post_201_response_customer:
      example:
        id: id
      properties:
        id:
          type: string
    _subscription_post_201_response:
      example:
        method:
          type: type
          sdd_mandate:
            country_code: country_code
            phone: phone
            account_holder: account_holder
            billing_entity: billing_entity
            iban: iban
            name: name
            id: id
            reference_adc: reference_adc
            key: key
            email: email
          status: status
        id: id
        message:
        - message
        - message
        status: status
        customer:
          id: id
      properties:
        status:
          type: string
        message:
          items:
            type: string
          type: array
        id:
          type: string
        method:
          $ref: '#/components/schemas/_subscription_post_201_response_method'
        customer:
          $ref: '#/components/schemas/_subscription_post_201_response_customer'
      x-examples:
        example-1:
          status: ok
          message:
          - Your request was successfully created
          id: 18e9fe0f-55b5-4f4b-832e-96fa3c1a4239
          method:
            type: DD
            status: active
            sdd_mandate:
              id: "50124434314"
              billing_entity: PT16103627
              iban: PT50002700000001234567833
              key: Sdd Mandate key
              name: Frequent Payment DD
              email: customer@example.com
              phone: "911234567"
              account_holder: Account Name Example
              country_code: PT
              reference_adc: "50124434314"
          customer:
            id: ee3e827f-0810-48a5-bd46-ade7fb9ec5f8
    _subscription__id__get_200_response_method:
      example:
        type: type
        sdd_mandate:
          country_code: country_code
          max_num_debits: max_num_debits
          phone: phone
          account_holder: account_holder
          billing_entity: billing_entity
          iban: iban
          name: name
          id: id
          key: key
          email: email
        url: https://cc.test.easypay.pt/start/2e41fc8e-76ee-4533-a296-809c7bfbc811
        status: waiting
      properties:
        type:
          type: string
        status:
          enum:
          - waiting
          - pending
          - active
          - deleted
          - inactive
          type: string
        url:
          description: Only if the payment methos is 'CC'.
          example: https://cc.test.easypay.pt/start/2e41fc8e-76ee-4533-a296-809c7bfbc811
          format: url
          type: string
        sdd_mandate:
          $ref: '#/components/schemas/_subscription_get_200_response_data_inner_method_sdd_mandate'
    _subscription__id__get_200_response:
      example:
        method:
          type: type
          sdd_mandate:
            country_code: country_code
            max_num_debits: max_num_debits
            phone: phone
            account_holder: account_holder
            billing_entity: billing_entity
            iban: iban
            name: name
            id: id
            key: key
            email: email
          url: https://cc.test.easypay.pt/start/2e41fc8e-76ee-4533-a296-809c7bfbc811
          status: waiting
        capture_now: true
        expiration_time: expiration_time
        created_at: created_at
        max_captures: 6
        frequency: frequency
        start_time: start_time
        retries: 0
        failover: true
        currency: currency
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        value: 1.4658129805029452
        key: key
        customer:
          fiscal_number: fiscal_number
          phone: phone
          name: name
          language: language
          phone_indicative: phone_indicative
          id: id
          email: email
          key: key
      properties:
        id:
          format: uuid
          type: string
        key:
          type: string
        expiration_time:
          type: string
        start_time:
          type: string
        frequency:
          type: string
        retries:
          type: integer
        max_captures:
          type: integer
        failover:
          type: boolean
        capture_now:
          type: boolean
        customer:
          $ref: '#/components/schemas/_subscription_get_200_response_data_inner_customer'
        method:
          $ref: '#/components/schemas/_subscription__id__get_200_response_method'
        currency:
          type: string
        value:
          type: number
        created_at:
          description: Date when payment was created
          type: string
      x-examples:
        example-1:
          id: 63f3f5a0-1543-4ed7-9b44-7f0f802ff476
          key: ""
          expiration_time: 2022-12-12T16:05:00Z
          start_time: 2022-12-04T12:00:00Z
          frequency: 1Y
          retries: 2
          max_captures: 10
          failover: true
          capture_now: false
          customer:
            id: d927731a-8684-4aa9-bc50-f691d666c117
            name: Customer Example
            email: customer@example.com
            phone: "911234567"
            phone_indicative: "+351"
            fiscal_number: PT123456789
            key: Key Example
            language: PT
          method:
            type: DD
            status: inactive
            sdd_mandate:
              id: "50124437147"
              billing_entity: PT16103627
              iban: PT50002700XXXXXXXXXXX7833
              key: Sdd Mandate key
              name: Frequent Payment DD
              email: customer@example.com
              phone: "911234522"
              account_holder: Account Name Example
              country_code: PT
              max_num_debits: "0"
          currency: EUR
          value: 17.5
          created_at: 2022-11-22 14:15:10
    _subscription__id__patch_request_customer:
      properties:
        id:
          description: The uuid of a previously created customer.
          format: uuid
          type: string
        name:
          description: The customer's name.
          maxLength: 255
          type: string
        email:
          description: The customer's e-mail.
          maxLength: 70
          type: string
        phone:
          description: The customer's phone.
          maxLength: 15
          type: string
        phone_indicative:
          example: "+351"
          maxLength: 5
          type: string
        fiscal_number:
          description: The customer's fiscal number (prefixed by the country code).
          example: PT123456789
          maxLength: 20
          type: string
        key:
          description: The merchant's key to identify the customer.
          example: Example Key
          maxLength: 255
          type: string
        language:
          example: PT
          format: ISO Alpha-2 code
          type: string
    _subscription__id__patch_request:
      properties:
        status:
          description: The Payment Status.
          enum:
          - active
          - inactive
          example: active
          type: string
        capture:
          $ref: '#/components/schemas/_subscription_post_request_capture'
        expiration_time:
          description: Required only when no max_captures is set.</br>The last possible
            time to make the payment.
          example: 2017-12-12 16:05
          format: Y-m-d H:i
          type: string
        currency:
          $ref: '#/components/schemas/Currency'
        customer:
          $ref: '#/components/schemas/_subscription__id__patch_request_customer'
        key:
          description: The merchant's key for identifying the payment.
          example: Example Key
          maxLength: 50
          type: string
        value:
          description: The payment value.</br>Will be rounded to 2 decimals.
          example: 12.55
          format: double
          minimum: 0.5
          type: number
        frequency:
          enum:
          - 1D
          - 1W
          - 2W
          - 1M
          - 2M
          - 3M
          - 4M
          - 6M
          - 1Y
          - 2Y
          - 3Y
          example: 1W
          type: string
        max_captures:
          description: Required when no expiration_time is set.</br>Number of payments.
          type: integer
        start_time:
          description: Defining the start of billing cycles.
          example: 2017-12-12 16:05
          format: Y-m-d H:i
          type: string
        failover:
          default: false
          description: "After all retries failed, the payment cycle can have another\
            \ try with another single method."
          type: boolean
        retries:
          default: 0
          description: |-
            Number of retries in each payment cycle.</br>
            The chosen frequency will define the max number of possible retries.
          type: integer
        sdd_mandate:
          $ref: '#/components/schemas/SddMandate'
      x-examples:
        example-1:
          status: inactive
          expiration_time: 2017-12-12 16:05
          currency: EUR
          customer:
            id: 22ea3cc9-424b-489a-91b7-8955f643dc93
            name: Customer Example
            email: customer@example.com
            phone: "911234567"
            phone_indicative: "+351"
            fiscal_number: PT123456789
            key: Key Example
            language: PT
          key: Example Key
          value: 17.5
          max_captures: 10
          failover: true
          retries: 2
          sdd_mandate:
            id: "12345678901"
            iban: PT50002700000001234567833
            key: Key Example
            name: Name Example
            email: customer@example.com
            phone: "911234567"
            account_holder: Acount Name Example
            country_code: PT
            max_num_debits: "12"
    _subscription__id__patch_200_response_method:
      example:
        type: cc
        sdd_mandate:
          country_code: country_code
          max_num_debits: max_num_debits
          phone: phone
          account_holder: account_holder
          billing_entity: billing_entity
          iban: iban
          name: name
          id: id
          key: key
          email: email
        status: waiting
      properties:
        type:
          enum:
          - cc
          - dd
          type: string
        status:
          enum:
          - waiting
          - pending
          - active
          - deleted
          - inactive
          type: string
        sdd_mandate:
          $ref: '#/components/schemas/_subscription_get_200_response_data_inner_method_sdd_mandate'
    _subscription__id__patch_200_response:
      example:
        method:
          type: cc
          sdd_mandate:
            country_code: country_code
            max_num_debits: max_num_debits
            phone: phone
            account_holder: account_holder
            billing_entity: billing_entity
            iban: iban
            name: name
            id: id
            key: key
            email: email
          status: waiting
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        message:
        - message
        - message
        status: ok
        customer:
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        status:
          example: ok
          type: string
        message:
          items:
            type: string
          type: array
        id:
          format: uuid
          type: string
        method:
          $ref: '#/components/schemas/_subscription__id__patch_200_response_method'
        customer:
          $ref: '#/components/schemas/_frequent_post_201_response_customer'
      x-examples:
        example-1:
          status: ok
          message:
          - Your request was successfully created
          id: 63f3f5a0-1543-4ed7-9b44-7f0f802ff476
          method:
            type: DD
            status: inactive
            sdd_mandate:
              id: "50124437147"
              billing_entity: PT16103627
              iban: PT500027***67833
              key: Sdd Mandate key
              name: Fre*** DD***
              email: cus***@example.com
              phone: 911***522
              account_holder: Acc*** Exa***
              country_code: PT
              max_num_debits: "0"
          customer:
            id: d927731a-8684-4aa9-bc50-f691d666c117
    _void__id__get_200_response_authorisation_customer:
      example:
        fiscal_number: fiscal_number
        phone: phone
        name: name
        language: language
        id: id
        email: email
        key: key
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        phone:
          type: string
        fiscal_number:
          type: string
        key:
          type: string
        language:
          type: string
    _void__id__get_200_response_authorisation_method:
      example:
        reference: reference
        last_four: last_four
        type: type
        card_type: card_type
        expiration_date: expiration_date
        entity: entity
        url: url
        status: waiting
      properties:
        type:
          type: string
        entity:
          type: string
        reference:
          type: string
        url:
          type: string
        last_four:
          type: string
        card_type:
          type: string
        expiration_date:
          type: string
        status:
          enum:
          - waiting
          - pending
          - active
          - failed
          - canceled
          - deleted
          type: string
    _void__id__get_200_response_authorisation:
      example:
        value_captured: 6
        method:
          reference: reference
          last_four: last_four
          type: type
          card_type: card_type
          expiration_date: expiration_date
          entity: entity
          url: url
          status: waiting
        currency: EUR
        id: id
        message: message
        value: 0
        key: key
        status: success
        customer:
          fiscal_number: fiscal_number
          phone: phone
          name: name
          language: language
          id: id
          email: email
          key: key
      properties:
        id:
          type: string
        status:
          enum:
          - success
          - pending
          - failed
          type: string
        message:
          type: string
        currency:
          $ref: '#/components/schemas/Currency'
        customer:
          $ref: '#/components/schemas/_void__id__get_200_response_authorisation_customer'
        key:
          type: string
        value:
          type: integer
        value_captured:
          type: integer
        method:
          $ref: '#/components/schemas/_void__id__get_200_response_authorisation_method'
    _void__id__get_200_response:
      example:
        transaction_key: transaction_key
        authorisation:
          value_captured: 6
          method:
            reference: reference
            last_four: last_four
            type: type
            card_type: card_type
            expiration_date: expiration_date
            entity: entity
            url: url
            status: waiting
          currency: EUR
          id: id
          message: message
          value: 0
          key: key
          status: success
          customer:
            fiscal_number: fiscal_number
            phone: phone
            name: name
            language: language
            id: id
            email: email
            key: key
        descriptive: descriptive
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        status: success
      properties:
        transaction_key:
          type: string
        authorisation:
          $ref: '#/components/schemas/_void__id__get_200_response_authorisation'
        status:
          enum:
          - success
          - pending
          - failed
          type: string
        id:
          format: uuid
          type: string
        descriptive:
          type: string
      x-examples:
        example-1:
          transaction_key: key_example
          authorisation:
            id: 4c67e74b-a256-4e0a-965d-97bf5d01bd50
            status: pending
            message: message_example
            currency: EUR
            customer:
              id: 22ea3cc9-424b-489a-91b7-8955f643dc93
              name: Customer Example
              email: customer@example.com
              phone: "911234567"
              phone_indicative: "+351"
              fiscal_number: PT123456789
              key: Key Example
              language: PT
            key: Example Key
            value: 10
            value_captured: 10
            method:
              type: MB
              entity: "10611"
              reference: "987654321"
              url: https://www.easypay.pt/_s/c11.php?e=10611&r=987654321&v=19&t_key=example+key&c=EN&l=EN
              last_four: "1234"
              card_type: VISA
              expiration_date: 01/22
              status: pending
          status: pending
          id: 4c67e74b-a256-4e0a-965d-97bf5d01bd50
          descriptive: Descriptive Example
    _void__id__post_request:
      properties:
        descriptive:
          description: This will appear in the bank statement/mbway application.
          example: descriptive_example
          maxLength: 255
          type: string
        transaction_key:
          description: Your internal key identifying this void.
          example: key_example
          maxLength: 50
          type: string
      required:
      - descriptive
      x-examples:
        example-1:
          descriptive: Descriptive Example
          transaction_key: example_key
    _report_transactions_get_200_response_data_inner_values:
      example:
        requested: 0
        transfer: 2.3021358869347655
        paid: 6
        variable_fee: 5.962133916683182
        fixed_fee: 1.4658129805029452
        tax: 5.637376656633329
      properties:
        requested:
          type: integer
        paid:
          type: integer
        fixed_fee:
          type: number
        variable_fee:
          type: number
        tax:
          type: number
        transfer:
          type: number
    _report_transactions_get_200_response_data_inner:
      example:
        date: 2000-01-23T04:56:07.000+00:00
        document_number: document_number
        method: method
        payment_transaction_key: payment_transaction_key
        values:
          requested: 0
          transfer: 2.3021358869347655
          paid: 6
          variable_fee: 5.962133916683182
          fixed_fee: 1.4658129805029452
          tax: 5.637376656633329
        transfer_date: 2000-01-23
        payment_type: single
        payment_key: payment_key
        payment_account:
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        payment_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        descriptive: descriptive
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        transfer_batch: transfer_batch
        key: key
      properties:
        id:
          format: uuid
          type: string
        key:
          description: Any value that will help the merchant manage the transaction
            on his database.
          type: string
        date:
          format: date-time
          type: string
        values:
          $ref: '#/components/schemas/_report_transactions_get_200_response_data_inner_values'
        transfer_date:
          format: date
          type: string
        transfer_batch:
          description: The batch where this transaction has transfered.
          type: string
        method:
          description: The payment method.
          type: string
        document_number:
          description: Unique document number used for Easypay Invoice.
          type: string
        payment_type:
          enum:
          - single
          - frequent
          - subscription
          example: single
          type: string
        payment_id:
          format: uuid
          type: string
        payment_account:
          $ref: '#/components/schemas/_frequent_post_201_response_customer'
        payment_key:
          type: string
        payment_transaction_key:
          description: Capture transaction key.
          type: string
        descriptive:
          description: Any descriptive information that will help the merchant manage
            the transaction on his database.
          type: string
    _report_transactions_get_200_response:
      example:
        data:
        - date: 2000-01-23T04:56:07.000+00:00
          document_number: document_number
          method: method
          payment_transaction_key: payment_transaction_key
          values:
            requested: 0
            transfer: 2.3021358869347655
            paid: 6
            variable_fee: 5.962133916683182
            fixed_fee: 1.4658129805029452
            tax: 5.637376656633329
          transfer_date: 2000-01-23
          payment_type: single
          payment_key: payment_key
          payment_account:
            id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          payment_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          descriptive: descriptive
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          transfer_batch: transfer_batch
          key: key
        - date: 2000-01-23T04:56:07.000+00:00
          document_number: document_number
          method: method
          payment_transaction_key: payment_transaction_key
          values:
            requested: 0
            transfer: 2.3021358869347655
            paid: 6
            variable_fee: 5.962133916683182
            fixed_fee: 1.4658129805029452
            tax: 5.637376656633329
          transfer_date: 2000-01-23
          payment_type: single
          payment_key: payment_key
          payment_account:
            id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          payment_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          descriptive: descriptive
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          transfer_batch: transfer_batch
          key: key
        meta:
          records:
            per_page: 5
            total: 1
          links:
            next: next
            last: last
            prev: prev
            first: first
          page:
            current: 0
            total: 6
      properties:
        meta:
          $ref: '#/components/schemas/_subscription_get_200_response_meta'
        data:
          items:
            $ref: '#/components/schemas/_report_transactions_get_200_response_data_inner'
          type: array
      required:
      - meta
      x-examples:
        example-1:
          meta:
            page:
              current: 1
              total: 47
            records:
              total: 231
              per_page: 5
            links:
              first: ?page=1
              prev: ""
              next: ?page=2
              last: ?page=47
          data:
          - id: b41921f1-a255-41bc-9e92-9a28d266d378
            key: Merchant identification key
            date: 2022-11-16T16:45:19Z
            values:
              requested: 44
              paid: 44
              fixed_fee: 0.25
              variable_fee: 0.66
              tax: 1.5
              transfer: 42.88
            transfer_date: 2022-11-21T00:00:00Z
            transfer_batch: ""
            method: DD
            document_number: MARCEL0208220452011220221116164519
            payment_type: single
            payment_id: 2a9112fe-6510-4366-b55e-24a3ae188d67
            payment_account:
              id: 76f190b9-2b8a-4bd0-9490-411241a9dc81
            payment_key: Merchant identification key
            payment_transaction_key: Merchant identification key
            descriptive: Descriptive Josefa
          - id: b3fad7da-69bf-4320-b3ad-ccfaecaf8d16
            key: Robertos Key
            date: 2022-11-16T11:46:58Z
            values:
              requested: 100
              paid: 100
              fixed_fee: 0
              variable_fee: 0
              tax: 0
              transfer: 100
            transfer_date: 2022-11-18T00:00:00Z
            transfer_batch: ""
            method: MBW
            document_number: MARCEL0208220451979520221116114658
            payment_type: single
            payment_id: 0cccc05d-1964-4648-a32b-fe7107746881
            payment_account:
              id: 76f190b9-2b8a-4bd0-9490-411241a9dc81
            payment_key: Robertos Key
            payment_transaction_key: ""
            descriptive: Description of Roberto
          - id: 65196366-3afe-45b6-be79-0f1025c9e2d5
            key: Merchant identification key
            date: 2022-11-15T10:06:19Z
            values:
              requested: 44
              paid: 44
              fixed_fee: 0.25
              variable_fee: 0.66
              tax: 1.5
              transfer: 42.88
            transfer_date: 2022-11-17T00:00:00Z
            transfer_batch: ""
            method: DD
            document_number: MARCEL0208220451822420221115100619
            payment_type: single
            payment_id: 8798e233-43c8-4a73-8e24-e440a083b157
            payment_account:
              id: 76f190b9-2b8a-4bd0-9490-411241a9dc81
            payment_key: Merchant identification key
            payment_transaction_key: Merchant identification key
            descriptive: Descriptive Josefa
          - id: a03c6452-ae7a-4495-993d-b6608d999edb
            key: Merchant identification key
            date: 2022-11-15T10:06:19Z
            values:
              requested: 44
              paid: 44
              fixed_fee: 0.25
              variable_fee: 0.66
              tax: 1.5
              transfer: 42.88
            transfer_date: 2022-11-17T00:00:00Z
            transfer_batch: ""
            method: DD
            document_number: MARCEL0208220451822320221115100619
            payment_type: single
            payment_id: b81d392b-b0d0-47ae-b76a-94ded2de404b
            payment_account:
              id: 76f190b9-2b8a-4bd0-9490-411241a9dc81
            payment_key: Merchant identification key
            payment_transaction_key: Merchant identification key
            descriptive: Descriptive Josefa
          - id: 5b145b82-8ff1-4caf-bb5e-f72dccfff376
            key: Merchant identification key
            date: 2022-11-15T10:06:19Z
            values:
              requested: 44
              paid: 44
              fixed_fee: 0.25
              variable_fee: 0.66
              tax: 1.5
              transfer: 42.88
            transfer_date: 2022-11-17T00:00:00Z
            transfer_batch: ""
            method: DD
            document_number: MARCEL0208220451822220221115100619
            payment_type: single
            payment_id: e605e589-ccf8-4739-8fdb-8502a609bda4
            payment_account:
              id: 76f190b9-2b8a-4bd0-9490-411241a9dc81
            payment_key: Merchant identification key
            payment_transaction_key: Merchant identification key
            descriptive: Descriptive Josefa
    _report_transactions_get_200_response_1:
      properties:
        Properties_Has_ListMetaData:
          $ref: '#/components/schemas/Properties_Has_ListMetaData'
    _out_payment_get_200_response_meta_page:
      example:
        current: 0
        total: 6
      properties:
        current:
          type: integer
        total:
          type: integer
    _out_payment_get_200_response_meta:
      example:
        records:
          per_page: 5
          total: 1
        links:
          next: next
          last: last
          prev: prev
          first: first
        page:
          current: 0
          total: 6
      properties:
        page:
          $ref: '#/components/schemas/_out_payment_get_200_response_meta_page'
        records:
          $ref: '#/components/schemas/_subscription_get_200_response_meta_records'
        links:
          $ref: '#/components/schemas/_subscription_get_200_response_meta_links'
    _out_payment_get_200_response_data_inner:
      example:
        out_account:
          id: id
        method: method
        schedule_at: schedule_at
        created_at: created_at
        type: type
        transactions:
        - date: date
          document_number: document_number
          method: method
          values:
            requested: 1
            transfer: 9.301444243932576
            paid: 5
            variable_fee: 2
            fixed_fee: 5
            tax: 7.061401241503109
          descriptive: descriptive
          id: id
          transfer_date: transfer_date
          transfer_batch: transfer_batch
          key: key
        - date: date
          document_number: document_number
          method: method
          values:
            requested: 1
            transfer: 9.301444243932576
            paid: 5
            variable_fee: 2
            fixed_fee: 5
            tax: 7.061401241503109
          descriptive: descriptive
          id: id
          transfer_date: transfer_date
          transfer_batch: transfer_batch
          key: key
        id: id
        value: 1
        account:
          id: id
        key: key
        status: status
        customer:
          id: id
        timestamp: timestamp
      properties:
        id:
          type: string
        status:
          type: string
        type:
          type: string
        method:
          type: string
        customer:
          $ref: '#/components/schemas/_subscription_post_201_response_customer'
        account:
          $ref: '#/components/schemas/_subscription_post_201_response_customer'
        out_account:
          $ref: '#/components/schemas/_subscription_post_201_response_customer'
        key:
          type: string
        value:
          type: integer
        schedule_at:
          type: string
        transactions:
          items:
            $ref: '#/components/schemas/_authorisation__id__get_200_response_transactions_inner'
          type: array
        created_at:
          type: string
        timestamp:
          type: string
    _out_payment_get_200_response:
      example:
        data:
        - out_account:
            id: id
          method: method
          schedule_at: schedule_at
          created_at: created_at
          type: type
          transactions:
          - date: date
            document_number: document_number
            method: method
            values:
              requested: 1
              transfer: 9.301444243932576
              paid: 5
              variable_fee: 2
              fixed_fee: 5
              tax: 7.061401241503109
            descriptive: descriptive
            id: id
            transfer_date: transfer_date
            transfer_batch: transfer_batch
            key: key
          - date: date
            document_number: document_number
            method: method
            values:
              requested: 1
              transfer: 9.301444243932576
              paid: 5
              variable_fee: 2
              fixed_fee: 5
              tax: 7.061401241503109
            descriptive: descriptive
            id: id
            transfer_date: transfer_date
            transfer_batch: transfer_batch
            key: key
          id: id
          value: 1
          account:
            id: id
          key: key
          status: status
          customer:
            id: id
          timestamp: timestamp
        - out_account:
            id: id
          method: method
          schedule_at: schedule_at
          created_at: created_at
          type: type
          transactions:
          - date: date
            document_number: document_number
            method: method
            values:
              requested: 1
              transfer: 9.301444243932576
              paid: 5
              variable_fee: 2
              fixed_fee: 5
              tax: 7.061401241503109
            descriptive: descriptive
            id: id
            transfer_date: transfer_date
            transfer_batch: transfer_batch
            key: key
          - date: date
            document_number: document_number
            method: method
            values:
              requested: 1
              transfer: 9.301444243932576
              paid: 5
              variable_fee: 2
              fixed_fee: 5
              tax: 7.061401241503109
            descriptive: descriptive
            id: id
            transfer_date: transfer_date
            transfer_batch: transfer_batch
            key: key
          id: id
          value: 1
          account:
            id: id
          key: key
          status: status
          customer:
            id: id
          timestamp: timestamp
        meta:
          records:
            per_page: 5
            total: 1
          links:
            next: next
            last: last
            prev: prev
            first: first
          page:
            current: 0
            total: 6
      properties:
        meta:
          $ref: '#/components/schemas/_out_payment_get_200_response_meta'
        data:
          items:
            $ref: '#/components/schemas/_out_payment_get_200_response_data_inner'
          type: array
      x-examples:
        example-1:
          meta:
            page:
              current: 1
              total: 0
            records:
              total: 0
              per_page: 1
            links:
              first: ?page=1
              prev: ""
              next: ""
              last: ?page=0
          data:
          - id: 20efcd82-be96-4aa0-89a1-c6365633a72e
            status: success
            type: normal
            method: transfer
            customer:
              id: 09dbe8e2-5703-401e-9adc-6317f67a4fd9
            account:
              id: 76f190b9-2b8a-4bd0-9490-411241a9dc81
            out_account:
              id: bcd387ca-1835-4c95-9003-2da45f39e396
            key: ""
            value: 50
            schedule_at: 2022-09-15 20:28:58
            transactions:
            - id: 20efcd82-be96-4aa0-89a1-c6365633a72e
              key: ""
              date: 2022-09-15T21:28:58Z
              values:
                requested: -50
                paid: -50
                fixed_fee: 1
                variable_fee: 0
                tax: 0.23
                transfer: -51.23
              transfer_date: 2022-09-15T00:00:00Z
              method: transfer
              document_number: MARCEL0208220435165820220915212858
            created_at: 2022-09-15 20:28:58
            timestamp: ""
          - id: 12f21a3c-52a6-4274-ad1e-5e774093f7dd
            status: success
            type: normal
            method: transfer
            customer:
              id: b586685e-4e56-472b-b469-9b365c62d223
            account:
              id: 76f190b9-2b8a-4bd0-9490-411241a9dc81
            out_account:
              id: 898d3a41-8013-4262-a432-0bd09e301dff
            key: ""
            value: 50
            schedule_at: 2022-09-16 08:03:25
            transactions:
            - id: 12f21a3c-52a6-4274-ad1e-5e774093f7dd
              key: ""
              date: 2022-09-16T09:03:27Z
              values:
                requested: -50
                paid: -50
                fixed_fee: 1
                variable_fee: 0
                tax: 0.23
                transfer: -51.23
              transfer_date: 2022-09-16T00:00:00Z
              method: transfer
              document_number: MARCEL0208220435236620220916090327
            created_at: 2022-09-16 08:03:27
            timestamp: ""
    _out_payment_post_request:
      properties:
        customer:
          $ref: '#/components/schemas/Customer-Create-Or-Update'
        key:
          description: Merchant identification key
          maxLength: 50
          type: string
        value:
          description: Value will be rounded to 2 decimals
          format: double
          minimum: 0.5
          type: number
        type:
          default: normal
          description: Optional - only applicable to method transfer
          enum:
          - normal
          - instant
          type: string
        schedule_at:
          description: Schedule date to execute the payment
          format: date-time
          type: string
        descriptive:
          maxLength: 140
          pattern: "^[a-zA-Z0-9 .,/+*$%]+$"
          type: string
        account:
          $ref: '#/components/schemas/Account'
        out_account:
          $ref: '#/components/schemas/Out-Account'
        method:
          default: transfer
          example: transfer
          type: string
        timestamp:
          description: "Unix timestamp UTC, must be no more than 1 minute before or\
            \ after real time, if not the strong authentication signature will not\
            \ be valid"
          type: string
      required:
      - customer
      - method
      - out_account
      - timestamp
      - value
      x-examples:
        Example 1:
          customer:
            id: 22ea3cc9-424b-489a-91b7-8955f643dc93
            name: Customer Example
            email: customer@example.com
            phone: "911234567"
            phone_indicative: "+351"
            fiscal_number: PT123456789
            key: Key Example
            language: PT
          key: Example Key
          value: 17.5
          type: normal
          schedule_at: 2017-12-12 16:05:02
          descriptive: Descriptive Example
          account:
            id: 4c67e74b-a256-4e0a-965d-97bf5d01bd50
          out_account:
            account_holder: Acount Name Example
            iban: PT50002700000001234567833
            email: customer@example.com
            phone: "911234567"
            key: Key Example
            country_code: PT
          method: transfer
          timestamp: "1136239445"
    _out_payment_post_201_response_method:
      example:
        type: transfer
        status: pending
      properties:
        type:
          default: transfer
          type: string
        status:
          enum:
          - pending
          - delayed
          - success
          - deleted
          example: pending
          type: string
    _out_payment_post_201_response:
      example:
        out_account:
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        method:
          type: transfer
          status: pending
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        message:
        - Your request was successfully created
        - Your request was successfully created
        status: ok
        customer:
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        status:
          example: ok
          type: string
        message:
          items:
            example: Your request was successfully created
            type: string
          type: array
        id:
          format: uuid
          type: string
        method:
          $ref: '#/components/schemas/_out_payment_post_201_response_method'
        customer:
          $ref: '#/components/schemas/_frequent_post_201_response_customer'
        out_account:
          $ref: '#/components/schemas/_frequent_post_201_response_customer'
      x-examples:
        example-1:
          status: ok
          message:
          - Your request was successfully created
          id: 341ef1e0-b53c-4d8c-9669-59a24038bcab
          method:
            type: transfer
            status: pending
          customer:
            id: 5caa8d83-2e0e-4e2d-8fed-5e8612124a24
          out_account:
            id: e508ff3f-33e7-43ce-934d-62d4ee34cd95
    _out_payment__id__get_200_response:
      example:
        out_account:
          id: id
        method: method
        schedule_at: schedule_at
        created_at: created_at
        type: transfer
        transactions:
        - date: date
          document_number: document_number
          method: method
          values:
            requested: 1
            transfer: 9.301444243932576
            paid: 5
            variable_fee: 2
            fixed_fee: 5
            tax: 7.061401241503109
          descriptive: descriptive
          id: id
          transfer_date: transfer_date
          transfer_batch: transfer_batch
          key: key
        - date: date
          document_number: document_number
          method: method
          values:
            requested: 1
            transfer: 9.301444243932576
            paid: 5
            variable_fee: 2
            fixed_fee: 5
            tax: 7.061401241503109
          descriptive: descriptive
          id: id
          transfer_date: transfer_date
          transfer_batch: transfer_batch
          key: key
        descriptive: descriptive
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        value: 0.8008281904610115
        account:
          id: id
        key: key
        status: success
        customer:
          id: id
      properties:
        id:
          format: uuid
          type: string
        status:
          enum:
          - success
          - delayed
          - pending
          - deleted
          type: string
        type:
          default: transfer
          type: string
        method:
          type: string
        descriptive:
          type: string
        customer:
          $ref: '#/components/schemas/_subscription_post_201_response_customer'
        account:
          $ref: '#/components/schemas/_subscription_post_201_response_customer'
        out_account:
          $ref: '#/components/schemas/_subscription_post_201_response_customer'
        key:
          type: string
        value:
          format: double
          type: number
        schedule_at:
          type: string
        transactions:
          items:
            $ref: '#/components/schemas/_authorisation__id__get_200_response_transactions_inner'
          type: array
        created_at:
          type: string
      x-examples:
        example-1:
          id: 760d105e-950d-4b41-8017-cad840ca3baa
          status: success
          type: normal
          method: transfer
          descriptive: descriptive
          customer:
            id: 7e47c256-4bea-41a8-b578-727d60004c7a
          account:
            id: 76f190b9-2b8a-4bd0-9490-411241a9dc81
          out_account:
            id: 343a8a78-8deb-4d4a-aa41-0a9140c95346
          key: Example Key
          value: 1
          schedule_at: 2022-11-25 10:30:11
          transactions:
          - id: 760d105e-950d-4b41-8017-cad840ca3baa
            key: Example Key
            date: 2022-11-25T10:30:14Z
            values:
              requested: -1
              paid: -1
              fixed_fee: 1
              variable_fee: 0
              tax: 0.23
              transfer: -2.23
            transfer_date: 2022-11-25T00:00:00Z
            transfer_batch: ""
            method: transfer
            document_number: MARCEL0208220453362220221125103014
            descriptive: ""
          created_at: 2022-11-25 10:30:14
    _refund__id__get_200_response:
      example:
        transaction_key: transaction_key
        phone: phone
        account_holder: account_holder
        iban: iban
        capture:
          payment_type: payment_type
          transaction_key: transaction_key
          splits:
          - reverts:
            - margin_value: 6.027456183070403
              id: c6056234-a3f9-42de-b944-3ed793fcb6bb
              value: 15.32
            - margin_value: 6.027456183070403
              id: c6056234-a3f9-42de-b944-3ed793fcb6bb
              value: 15.32
            clearing_date: 2000-01-23
            margin_account:
              id: c6056234-a3f9-42de-b944-3ed793fcb6bb
            split_key: 01J1PKR2RPHJNJQGFWGDYXY0KM
            margin_value: 0.8008281904610115
            id: c6056234-a3f9-42de-b944-3ed793fcb6bb
            clearing_period: clearing_period
            value: 15.32
            split_descriptive: Payment of Invoice Nº 1982652
            account:
              id: c6056234-a3f9-42de-b944-3ed793fcb6bb
            status: waiting
          - reverts:
            - margin_value: 6.027456183070403
              id: c6056234-a3f9-42de-b944-3ed793fcb6bb
              value: 15.32
            - margin_value: 6.027456183070403
              id: c6056234-a3f9-42de-b944-3ed793fcb6bb
              value: 15.32
            clearing_date: 2000-01-23
            margin_account:
              id: c6056234-a3f9-42de-b944-3ed793fcb6bb
            split_key: 01J1PKR2RPHJNJQGFWGDYXY0KM
            margin_value: 0.8008281904610115
            id: c6056234-a3f9-42de-b944-3ed793fcb6bb
            clearing_period: clearing_period
            value: 15.32
            split_descriptive: Payment of Invoice Nº 1982652
            account:
              id: c6056234-a3f9-42de-b944-3ed793fcb6bb
            status: waiting
          capture_date: capture_date
          payment_id: payment_id
          force_3ds: false
          descriptive: descriptive
          id: id
          value: 6.027456183070403
          account:
            id: id
          status: status
        id: id
        value: 0
        email: email
        status: waiting
      properties:
        id:
          type: string
        status:
          enum:
          - waiting
          - pending
          - success
          - failed
          type: string
        transaction_key:
          type: string
        value:
          type: integer
        account_holder:
          type: string
        email:
          type: string
        phone:
          type: string
        iban:
          type: string
        capture:
          $ref: '#/components/schemas/Payment_Capture'
      x-examples:
        example-1:
          id: 4db3d9ab-f4c0-41a6-a80e-6cbbdd1508f4
          status: success
          transaction_key: internal key identifying this refund
          value: 50
          account_holder: Account Name Example
          email: customer@example.com
          phone: "911234567"
          iban: PT50002700000001234567833
    _refund__id__post_request_revert_splits_inner:
      properties:
        id:
          type: string
          x-stoplight:
            id: scx0qki580d8b
      x-stoplight:
        id: fwx223r9fpy29
    _refund__id__post_request_revert:
      properties:
        mode:
          enum:
          - TOTAL
          - PARTIAL
          type: string
          x-stoplight:
            id: lu9rbmr8y3zyv
        splits:
          items:
            $ref: '#/components/schemas/_refund__id__post_request_revert_splits_inner'
          type: array
          x-stoplight:
            id: nxievcrnvj06i
      x-stoplight:
        id: 8im863mink0c2
    _refund__id__post_request:
      properties:
        transaction_key:
          description: Your internal key identifying this refund
          maxLength: 50
          type: string
        iban:
          description: Optional - Iban from the bank account
          example: PT50002700000001234567833
          maxLength: 34
          type: string
        email:
          description: Optional - Email from the bank account holder
          example: customer@example.com
          maxLength: 50
          type: string
        phone:
          description: Optional - Phone from the bank account holder
          example: "911234567"
          maxLength: 20
          type: string
        account_holder:
          description: Optional - Bank account holder name
          example: Account Name Example
          maxLength: 100
          type: string
        value:
          description: Value will be rounded to 2 decimals
          example: 17.5
          format: double
          minimum: 0
          type: number
        revert:
          $ref: '#/components/schemas/_refund__id__post_request_revert'
      required:
      - value
    get_link_200_response:
      example:
        metadata:
          next_cursor: lL_j7ilk7rc
          count: 10
        data:
        - image: https://cdn.easypay.pt/images/qr/XStDvnMKZaN
          communication_channels:
          - SMS
          - SMS
          expiration_time: 2000-01-23T04:56:07.000+00:00
          payment:
            single:
              requested_amount: requested_amount
            methods:
            - MBW
            - MBW
            expiration_time: 2000-01-23T04:56:07.000+00:00
            frequent:
              maximum_amount: maximum_amount
              minimum_amount: minimum_amount
              unlimited_payments: true
            capture:
              descriptive: descriptive
              key: key
            id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            subscription:
              start_time: start_time
              retries: 0
              maximum_captures: maximum_captures
              failover: true
              capture_now: true
              frequency: frequency
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          type: SINGLE
          url: https://easypay.pt/s/XStDvnMKZaN
          customer:
            phone: "+351911234567"
            name: Jonh Doe
            language: PT
            id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            email: example@easypay.pt
          status: ACTIVE
        - image: https://cdn.easypay.pt/images/qr/XStDvnMKZaN
          communication_channels:
          - SMS
          - SMS
          expiration_time: 2000-01-23T04:56:07.000+00:00
          payment:
            single:
              requested_amount: requested_amount
            methods:
            - MBW
            - MBW
            expiration_time: 2000-01-23T04:56:07.000+00:00
            frequent:
              maximum_amount: maximum_amount
              minimum_amount: minimum_amount
              unlimited_payments: true
            capture:
              descriptive: descriptive
              key: key
            id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            subscription:
              start_time: start_time
              retries: 0
              maximum_captures: maximum_captures
              failover: true
              capture_now: true
              frequency: frequency
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          type: SINGLE
          url: https://easypay.pt/s/XStDvnMKZaN
          customer:
            phone: "+351911234567"
            name: Jonh Doe
            language: PT
            id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            email: example@easypay.pt
          status: ACTIVE
      properties:
        data:
          items:
            $ref: '#/components/schemas/Link'
          type: array
        metadata:
          $ref: '#/components/schemas/Metadata'
      required:
      - data
      - metadata
    post_link_request_payment:
      properties:
        methods:
          description: the payment methods available to some pay-by-link payment
          items:
            enum:
            - MB
            - MBW
            - DD
            - CC
            - SC
            - UF
            - VI
            example: MBW
            type: string
          type: array
          x-stoplight:
            id: rpugnuu99ss5o
        capture:
          $ref: '#/components/schemas/PayByLinkCapture'
        single:
          $ref: '#/components/schemas/PayByLinkSingle'
        frequent:
          $ref: '#/components/schemas/PayByLinkFrequent'
        subscription:
          $ref: '#/components/schemas/Subscription'
      required:
      - capture
      - methods
    post_link_request:
      properties:
        expiration_time:
          description: rfc3339 formatted time for the link expiration date.
          format: date-time
          type: string
        type:
          $ref: '#/components/schemas/PayByLinkPaymentTypes'
        customer:
          $ref: '#/components/schemas/PayByLinkCustomer'
        communication_channels:
          description: the communication channels to where the final customer link
            should be forwarded
          items:
            enum:
            - SMS
            - EMAIL
            example: SMS
            type: string
          type: array
          x-stoplight:
            id: 4aj488axd58ai
        payment:
          $ref: '#/components/schemas/post_link_request_payment'
      required:
      - customer
      - payment
      - type
    patch_link_request:
      properties:
        expiration_time:
          format: date-time
          type: string
    Link_payment:
      example:
        single:
          requested_amount: requested_amount
        methods:
        - MBW
        - MBW
        expiration_time: 2000-01-23T04:56:07.000+00:00
        frequent:
          maximum_amount: maximum_amount
          minimum_amount: minimum_amount
          unlimited_payments: true
        capture:
          descriptive: descriptive
          key: key
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        subscription:
          start_time: start_time
          retries: 0
          maximum_captures: maximum_captures
          failover: true
          capture_now: true
          frequency: frequency
      properties:
        id:
          format: uuid
          type: string
        expiration_time:
          format: date-time
          type: string
        methods:
          description: the payment methods available to some pay-by-link payment
          items:
            enum:
            - MB
            - MBW
            - DD
            - CC
            - SC
            - UF
            - VI
            example: MBW
            type: string
          type: array
          x-stoplight:
            id: rpugnuu99ss5o
        capture:
          $ref: '#/components/schemas/PayByLinkCapture'
        single:
          $ref: '#/components/schemas/PayByLinkSingle'
        frequent:
          $ref: '#/components/schemas/PayByLinkFrequent'
        subscription:
          $ref: '#/components/schemas/Subscription'
    Payment_Frequent_Method_Response_method_sdd_mandate:
      allOf:
      - $ref: '#/components/schemas/SddMandate'
      - $ref: '#/components/schemas/Properties_Has_ReferenceAdc'
    Payment_Frequent_Method_Response_method:
      properties:
        type:
          $ref: '#/components/schemas/Payment_Frequent_Method_Available'
        sdd_mandate:
          $ref: '#/components/schemas/Payment_Frequent_Method_Response_method_sdd_mandate'
    Checkout_Details_checkout:
      example:
        id: id
        status: pending
      properties:
        id:
          type: string
        status:
          enum:
          - pending
          - canceled
          - complete
          type: string
    Checkout_Details_payment:
      example:
        methods:
        - mb
        - mb
        capture_now: true
        expiration_time: expiration_time
        max_captures: 1
        frequency: frequency
        min_value: 6
        start_time: start_time
        retries: 5
        failover: true
        currency: currency
        id: id
        key: key
        status: waiting
        max_value: 0
      properties:
        id:
          type: string
        status:
          enum:
          - waiting
          - pending
          - active
          - deleted
          type: string
        methods:
          items:
            enum:
            - mb
            - cc
            - mbw
            - dd
            - vi
            - uf
            - sc
            - ap
            type: string
          type: array
        expiration_time:
          type: string
        currency:
          type: string
        key:
          type: string
        max_value:
          type: integer
        min_value:
          type: integer
        frequency:
          type: string
        max_captures:
          type: integer
        start_time:
          type: string
        failover:
          type: boolean
        capture_now:
          type: boolean
        retries:
          type: integer
    Properties_Has_ListMetaData_meta_page:
      properties:
        current:
          example: 2
          type: integer
        total:
          example: 4
          type: integer
    Properties_Has_ListMetaData_meta_records:
      properties:
        total:
          example: 50
          type: integer
        per_page:
          example: 15
          type: integer
    Properties_Has_ListMetaData_meta_links:
      properties:
        first:
          example: https://......?page=1
          type: string
        prev:
          example: https://......?page=1
          type: string
        next:
          example: https://......?page=3
          type: string
        last:
          example: https://......?page=4
          type: string
    Properties_Has_ListMetaData_meta:
      properties:
        page:
          $ref: '#/components/schemas/Properties_Has_ListMetaData_meta_page'
        records:
          $ref: '#/components/schemas/Properties_Has_ListMetaData_meta_records'
        links:
          $ref: '#/components/schemas/Properties_Has_ListMetaData_meta_links'
    ResponseMeta_page:
      description: An object containing information about the pagination of pages
        within the collection.
      example:
        current: 0
        total: 6
      properties:
        current:
          description: The current page number being viewed.
          type: integer
        total:
          description: The total number of pages available in the collection.
          type: integer
      required:
      - current
      - total
    ResponseMeta_records:
      description: An object containing information about the records within the collection.
      example:
        per_page: 5
        total: 1
      properties:
        total:
          description: The total number of records available in the collection.
          type: integer
        per_page:
          description: The number of records displayed per page.
          type: integer
    ResponseMeta_links:
      description: An object containing URLs for navigation between different pages
        of the collection.
      example:
        next: next
        last: last
        prev: prev
        first: first
      properties:
        first:
          description: The URL to the first page of the collection.
          type: string
        prev:
          description: The URL to the previous page of the collection. This field
            is an empty string if there is no previous page.
          type: string
        next:
          description: The URL to the next page of the collection. This field is an
            empty string if there is no next page.
          type: string
        last:
          description: The URL to the last page of the collection.
          type: string
    Frequent_customer:
      example:
        language: language
        id: id
        email: email
        key: key
      properties:
        id:
          type: string
        email:
          type: string
        key:
          type: string
        language:
          type: string
    Frequent_method_sdd_mandate:
      example:
        country_code: country_code
        max_num_debits: max_num_debits
        phone: phone
        account_holder: account_holder
        billing_entity: billing_entity
        iban: iban
        name: name
        id: id
        key: key
        email: email
      properties:
        id:
          type: string
        billing_entity:
          type: string
        iban:
          type: string
        key:
          type: string
        country_code:
          type: string
        name:
          type: string
        email:
          type: string
        phone:
          type: string
        account_holder:
          type: string
        max_num_debits:
          type: string
      required:
      - account_holder
      - country_code
      - email
      - iban
      - name
      - phone
    Frequent_method:
      example:
        last_four: last_four
        iban: iban
        alias: alias
        type: mb
        card_type: MasterCard
        expiration_date: expiration_date
        sdd_mandate:
          country_code: country_code
          max_num_debits: max_num_debits
          phone: phone
          account_holder: account_holder
          billing_entity: billing_entity
          iban: iban
          name: name
          id: id
          key: key
          email: email
        url: https://cc.test.easypay.pt/start/ab2f2eb6-3655-4951-98ae-36367d5f3727
        status: waiting
      properties:
        type:
          enum:
          - mb
          - cc
          - dd
          - mbw
          - vi
          type: string
        status:
          enum:
          - waiting
          - pending
          - active
          - deleted
          type: string
        url:
          description: Only returns if the payment is a Credit Card.
          example: https://cc.test.easypay.pt/start/ab2f2eb6-3655-4951-98ae-36367d5f3727
          type: string
        last_four:
          description: |
            Only returns if the payment is a Credit Card.</br>Last 4 digits of the submitted Credit Card.
          type: string
        card_type:
          description: Only returns if the payment is a Credit Card.
          enum:
          - MasterCard
          - VISA
          type: string
        expiration_date:
          description: Only returns if the payment is a Credit Card.
          type: string
        iban:
          description: Virtual IBAN
          type: string
        alias:
          description: MB WAY Alias (only for mobile implementation using MBWAY SDK).
          type: string
        sdd_mandate:
          $ref: '#/components/schemas/Frequent_method_sdd_mandate'
    inline_object:
      example:
        message:
        - message
        - message
        status: ok
      properties:
        status:
          $ref: '#/components/schemas/ResponseStatus'
        message:
          description: An array of human-readable messages included in the response.
            These messages provide detailed information about the success of the operation
            or explain the reasons for any failure. This field is always present in
            the response to ensure clarity and transparency regarding the outcome
            of the API request.
          items:
            type: string
            x-stoplight:
              id: 7b6ch52iyqms2
          type: array
          x-stoplight:
            id: dy98yerk1oirb
      x-examples:
        Example 1:
          status: error
          message:
          - Authentication failed
    inline_object_1:
      properties:
        status:
          type: string
        message:
          items:
            type: string
          type: array
      x-examples:
        Example 1:
          status: error
          message:
          - Authentication failed
    inline_object_2:
      example:
        metadata:
          next_cursor: lL_j7ilk7rc
          count: 10
        data:
        - amount_details:
            fees:
            - fixed_amount:
                amount: amount
                currency: currency
              vat_amount:
                amount: amount
                currency: currency
              variable_amount:
                amount: amount
                currency: currency
            - fixed_amount:
                amount: amount
                currency: currency
              vat_amount:
                amount: amount
                currency: currency
              variable_amount:
                amount: amount
                currency: currency
            payed_amount:
              amount: amount
              currency: currency
            requested_amount:
              amount: amount
              currency: currency
          amount:
            amount: amount
            currency: currency
          created_at: 2006-01-02 15:04
          transfer_batch_date: transfer_batch_date
          descriptive: descriptive
          transaction_timestamp: transaction_timestamp
          details:
            payment_type: single
            payment_key: payment_key
            method: CC
            payment_id: 235934c2-467d-44fa-9e81-9cbd9d1a6f61
            operation_key: operation_key
            operation_id: 502b0844-13a8-4788-b775-5e4cc8194a50
          id: '"38c65c65-6b66-42e8-b3db-3a3361ef23e4"'
          transaction_type: CP
          transfer_batch: '"584"'
        - amount_details:
            fees:
            - fixed_amount:
                amount: amount
                currency: currency
              vat_amount:
                amount: amount
                currency: currency
              variable_amount:
                amount: amount
                currency: currency
            - fixed_amount:
                amount: amount
                currency: currency
              vat_amount:
                amount: amount
                currency: currency
              variable_amount:
                amount: amount
                currency: currency
            payed_amount:
              amount: amount
              currency: currency
            requested_amount:
              amount: amount
              currency: currency
          amount:
            amount: amount
            currency: currency
          created_at: 2006-01-02 15:04
          transfer_batch_date: transfer_batch_date
          descriptive: descriptive
          transaction_timestamp: transaction_timestamp
          details:
            payment_type: single
            payment_key: payment_key
            method: CC
            payment_id: 235934c2-467d-44fa-9e81-9cbd9d1a6f61
            operation_key: operation_key
            operation_id: 502b0844-13a8-4788-b775-5e4cc8194a50
          id: '"38c65c65-6b66-42e8-b3db-3a3361ef23e4"'
          transaction_type: CP
          transfer_batch: '"584"'
      properties:
        metadata:
          $ref: '#/components/schemas/Metadata'
        data:
          items:
            $ref: '#/components/schemas/LedgerEntry'
          type: array
          x-stoplight:
            id: c0wqoe41km6nj
    inline_object_3:
      properties:
        metadata:
          $ref: '#/components/schemas/Metadata'
    inline_object_4:
      properties:
        meta:
          type: string
          x-stoplight:
            id: 67nldneoc6bk2
    inline_object_5_customer:
      example:
        id: c6056234-a3f9-42de-b944-3ed793fcb6bb
      properties:
        id:
          description: "A unique identifier for the resource. While typically formatted\
            \ as a UUID (Universally Unique Identifier), it can also be in other formats\
            \ as defined by the user. This field ensures the resource can be distinctly\
            \ recognized and referenced."
          example: c6056234-a3f9-42de-b944-3ed793fcb6bb
          title: Identifier
          type: string
          x-stoplight:
            id: 08r7fnj0h7hlg
      required:
      - id
    inline_object_5:
      example:
        method:
          reference: "665876931"
          last_four: "1234"
          iban: PT50000747199140461443823
          alias: alias
          type: type
          card_type: VISA
          expiration_date: expiration_date
          sdd_mandate:
            country_code: country_code
            max_num_debits: max_num_debits
            phone: phone
            account_holder: account_holder
            iban: PT50000747199140461443823
            billing_entity: PT16103627
            name: name
            id: c6056234-a3f9-42de-b944-3ed793fcb6bb
            key: 01J1PKR2RPHJNJQGFWGDYXY0KM
            email: email
          url: https://cc.easypay.pt/v3/public/card-details/cec55ab6-bda3-4ab3-af22-04d2ad2c046a
          entity: "11683"
          status: status
        capture:
          id: c6056234-a3f9-42de-b944-3ed793fcb6bb
        id: c6056234-a3f9-42de-b944-3ed793fcb6bb
        message:
        - message
        - message
        status: ok
        customer:
          id: c6056234-a3f9-42de-b944-3ed793fcb6bb
      properties:
        status:
          $ref: '#/components/schemas/ResponseStatus'
        message:
          description: An array of human-readable messages included in the response.
            These messages provide detailed information about the success of the operation
            or explain the reasons for any failure. This field is always present in
            the response to ensure clarity and transparency regarding the outcome
            of the API request.
          items:
            type: string
            x-stoplight:
              id: 7b6ch52iyqms2
          type: array
          x-stoplight:
            id: dy98yerk1oirb
        id:
          description: "A unique identifier for the resource. While typically formatted\
            \ as a UUID (Universally Unique Identifier), it can also be in other formats\
            \ as defined by the user. This field ensures the resource can be distinctly\
            \ recognized and referenced."
          example: c6056234-a3f9-42de-b944-3ed793fcb6bb
          title: Identifier
          type: string
          x-stoplight:
            id: 08r7fnj0h7hlg
        method:
          $ref: '#/components/schemas/Method'
        customer:
          $ref: '#/components/schemas/inline_object_5_customer'
        capture:
          $ref: '#/components/schemas/inline_object_5_customer'
      required:
      - customer
      - id
      - message
      - method
      - status
      x-examples:
        Example 1:
          status: ok
          message:
          - Your request was successfully created
          id: 7120ac93-7a55-4fa5-a1e4-d7f8d2dc8738
          method:
            type: mbw
            status: success
          customer:
            id: 6726cd0e-6503-46ec-90da-e01c3838a9e9
          capture:
            id: 85c3503d-882b-4b4a-bb83-081946b57e56
    inline_object_6:
      example:
        message:
        - message
        - message
        status: ok
      properties:
        status:
          $ref: '#/components/schemas/ResponseStatus'
        message:
          description: An array of human-readable messages included in the response.
            These messages provide detailed information about the success of the operation
            or explain the reasons for any failure. This field is always present in
            the response to ensure clarity and transparency regarding the outcome
            of the API request.
          items:
            type: string
            x-stoplight:
              id: 7b6ch52iyqms2
          type: array
          x-stoplight:
            id: dy98yerk1oirb
    inline_object_7:
      example:
        message:
        - message
        - message
        status: ok
      properties:
        status:
          $ref: '#/components/schemas/ResponseStatus'
        message:
          description: An array of human-readable messages included in the response.
            These messages provide detailed information about the success of the operation
            or explain the reasons for any failure. This field is always present in
            the response to ensure clarity and transparency regarding the outcome
            of the API request.
          items:
            type: string
            x-stoplight:
              id: 7b6ch52iyqms2
          type: array
          x-stoplight:
            id: dy98yerk1oirb
      x-examples:
        Example 1:
          status: error
          message:
          - Min value can't be higher than max's
    inline_object_8:
      example:
        data:
        - method:
            reference: "665876931"
            last_four: "1234"
            iban: PT50000747199140461443823
            alias: alias
            type: type
            card_type: VISA
            expiration_date: expiration_date
            sdd_mandate:
              country_code: country_code
              max_num_debits: max_num_debits
              phone: phone
              account_holder: account_holder
              iban: PT50000747199140461443823
              billing_entity: PT16103627
              name: name
              id: c6056234-a3f9-42de-b944-3ed793fcb6bb
              key: 01J1PKR2RPHJNJQGFWGDYXY0KM
              email: email
            url: https://cc.easypay.pt/v3/public/card-details/cec55ab6-bda3-4ab3-af22-04d2ad2c046a
            entity: "11683"
            status: status
          expiration_time: 2024-06-30 21:38:31
          payment_status: paid
          descriptive: Payment of Invoice Nº 1982652
          created_at: 2024-06-30 21:38:31
          currency: EUR
          id: c6056234-a3f9-42de-b944-3ed793fcb6bb
          type: sale
          value: 15.32
          key: 01J1PKR2RPHJNJQGFWGDYXY0KM
          customer:
            fiscal_number: PT277712580
            phone: "962496235"
            name: Jonh Doe
            phone_indicative: "351"
            language: PT
            id: c6056234-a3f9-42de-b944-3ed793fcb6bb
            email: email
            key: 01J1PKR2RPHJNJQGFWGDYXY0KM
        - method:
            reference: "665876931"
            last_four: "1234"
            iban: PT50000747199140461443823
            alias: alias
            type: type
            card_type: VISA
            expiration_date: expiration_date
            sdd_mandate:
              country_code: country_code
              max_num_debits: max_num_debits
              phone: phone
              account_holder: account_holder
              iban: PT50000747199140461443823
              billing_entity: PT16103627
              name: name
              id: c6056234-a3f9-42de-b944-3ed793fcb6bb
              key: 01J1PKR2RPHJNJQGFWGDYXY0KM
              email: email
            url: https://cc.easypay.pt/v3/public/card-details/cec55ab6-bda3-4ab3-af22-04d2ad2c046a
            entity: "11683"
            status: status
          expiration_time: 2024-06-30 21:38:31
          payment_status: paid
          descriptive: Payment of Invoice Nº 1982652
          created_at: 2024-06-30 21:38:31
          currency: EUR
          id: c6056234-a3f9-42de-b944-3ed793fcb6bb
          type: sale
          value: 15.32
          key: 01J1PKR2RPHJNJQGFWGDYXY0KM
          customer:
            fiscal_number: PT277712580
            phone: "962496235"
            name: Jonh Doe
            phone_indicative: "351"
            language: PT
            id: c6056234-a3f9-42de-b944-3ed793fcb6bb
            email: email
            key: 01J1PKR2RPHJNJQGFWGDYXY0KM
        meta:
          records:
            per_page: 5
            total: 1
          links:
            next: next
            last: last
            prev: prev
            first: first
          page:
            current: 0
            total: 6
      properties:
        meta:
          $ref: '#/components/schemas/ResponseMeta'
        data:
          items:
            $ref: '#/components/schemas/Single'
          type: array
          x-stoplight:
            id: tnlbxof4gf9hl
    inline_object_9:
      example:
        paid_at: paid_at
        method:
          reference: "665876931"
          last_four: "1234"
          iban: PT50000747199140461443823
          alias: alias
          type: type
          card_type: VISA
          expiration_date: expiration_date
          sdd_mandate:
            country_code: country_code
            max_num_debits: max_num_debits
            phone: phone
            account_holder: account_holder
            iban: PT50000747199140461443823
            billing_entity: PT16103627
            name: name
            id: c6056234-a3f9-42de-b944-3ed793fcb6bb
            key: 01J1PKR2RPHJNJQGFWGDYXY0KM
            email: email
          url: https://cc.easypay.pt/v3/public/card-details/cec55ab6-bda3-4ab3-af22-04d2ad2c046a
          entity: "11683"
          status: status
        expiration_time: expiration_time
        created_at: created_at
        capture:
          transaction_key: 01J1PKR2RPHJNJQGFWGDYXY0KM
          splits:
          - reverts:
            - margin_value: 6.027456183070403
              id: c6056234-a3f9-42de-b944-3ed793fcb6bb
              value: 15.32
            - margin_value: 6.027456183070403
              id: c6056234-a3f9-42de-b944-3ed793fcb6bb
              value: 15.32
            clearing_date: 2000-01-23
            margin_account:
              id: c6056234-a3f9-42de-b944-3ed793fcb6bb
            split_key: 01J1PKR2RPHJNJQGFWGDYXY0KM
            margin_value: 0.8008281904610115
            id: c6056234-a3f9-42de-b944-3ed793fcb6bb
            clearing_period: clearing_period
            value: 15.32
            split_descriptive: Payment of Invoice Nº 1982652
            account:
              id: c6056234-a3f9-42de-b944-3ed793fcb6bb
            status: waiting
          - reverts:
            - margin_value: 6.027456183070403
              id: c6056234-a3f9-42de-b944-3ed793fcb6bb
              value: 15.32
            - margin_value: 6.027456183070403
              id: c6056234-a3f9-42de-b944-3ed793fcb6bb
              value: 15.32
            clearing_date: 2000-01-23
            margin_account:
              id: c6056234-a3f9-42de-b944-3ed793fcb6bb
            split_key: 01J1PKR2RPHJNJQGFWGDYXY0KM
            margin_value: 0.8008281904610115
            id: c6056234-a3f9-42de-b944-3ed793fcb6bb
            clearing_period: clearing_period
            value: 15.32
            split_descriptive: Payment of Invoice Nº 1982652
            account:
              id: c6056234-a3f9-42de-b944-3ed793fcb6bb
            status: waiting
          capture_date: 2000-01-23
          descriptive: Payment of Invoice Nº 1982652
          id: c6056234-a3f9-42de-b944-3ed793fcb6bb
          account:
            id: c6056234-a3f9-42de-b944-3ed793fcb6bb
          status: delayed
        descriptive: Payment of Invoice Nº 1982652
        currency: EUR
        id: c6056234-a3f9-42de-b944-3ed793fcb6bb
        value: 15.32
        key: 01J1PKR2RPHJNJQGFWGDYXY0KM
        customer:
          fiscal_number: PT277712580
          phone: "962496235"
          name: Jonh Doe
          phone_indicative: "351"
          language: PT
          id: c6056234-a3f9-42de-b944-3ed793fcb6bb
          email: email
          key: 01J1PKR2RPHJNJQGFWGDYXY0KM
      properties:
        id:
          description: "A unique identifier for the resource. While typically formatted\
            \ as a UUID (Universally Unique Identifier), it can also be in other formats\
            \ as defined by the user. This field ensures the resource can be distinctly\
            \ recognized and referenced."
          example: c6056234-a3f9-42de-b944-3ed793fcb6bb
          title: Identifier
          type: string
          x-stoplight:
            id: 08r7fnj0h7hlg
        created_at:
          type: string
          x-stoplight:
            id: 0q8rc0cm2nnlk
        key:
          description: A customizable text field for users to input their own identifier
            for the resource. This can be any string that helps the user uniquely
            identify or reference the resource in their own system.
          example: 01J1PKR2RPHJNJQGFWGDYXY0KM
          maxLength: 255
          title: Key
          type: string
          x-stoplight:
            id: dzsicjfvhoe5a
        capture:
          $ref: '#/components/schemas/SingleCaptureFull'
        descriptive:
          description: "A text field that describes the transaction as it will appear\
            \ on the end user's account statement. This is typically used to provide\
            \ clear, recognizable information about the payment, such as \"Payment\
            \ of Invoice Nº 1982652\" or \"Ticket for Queen\"."
          example: Payment of Invoice Nº 1982652
          maxLength: 255
          title: Descriptive
          type: string
          x-stoplight:
            id: lkifoepeeh5b7
        value:
          description: "The monetary amount requested for the transaction. This field\
            \ is formatted as a double, and will be rounded to two decimal places\
            \ (e.g., \"100.00\"). The value must be greater than or equal to 0.5."
          example: 15.32
          format: double
          minimum: 0.5
          title: Value
          type: number
          x-stoplight:
            id: g0svedglp94cc
            explicitProperties:
            - title
            - type
            - format
            - minimum
            - description
            - examples
        expiration_time:
          type: string
          x-stoplight:
            id: bfj4t4d1q0ofu
        currency:
          $ref: '#/components/schemas/Currency'
        customer:
          $ref: '#/components/schemas/Customer'
        method:
          $ref: '#/components/schemas/Method'
        paid_at:
          type: string
          x-stoplight:
            id: 0lrp32vjy9ska
    inline_object_10_customer:
      example:
        id: c6056234-a3f9-42de-b944-3ed793fcb6bb
      properties:
        id:
          description: "A unique identifier for the resource. While typically formatted\
            \ as a UUID (Universally Unique Identifier), it can also be in other formats\
            \ as defined by the user. This field ensures the resource can be distinctly\
            \ recognized and referenced."
          example: c6056234-a3f9-42de-b944-3ed793fcb6bb
          title: Identifier
          type: string
          x-stoplight:
            id: 08r7fnj0h7hlg
      x-stoplight:
        id: 63gqkpaoho4p6
    inline_object_10:
      example:
        method:
          reference: "665876931"
          last_four: "1234"
          iban: PT50000747199140461443823
          alias: alias
          type: type
          card_type: VISA
          expiration_date: expiration_date
          sdd_mandate:
            country_code: country_code
            max_num_debits: max_num_debits
            phone: phone
            account_holder: account_holder
            iban: PT50000747199140461443823
            billing_entity: PT16103627
            name: name
            id: c6056234-a3f9-42de-b944-3ed793fcb6bb
            key: 01J1PKR2RPHJNJQGFWGDYXY0KM
            email: email
          url: https://cc.easypay.pt/v3/public/card-details/cec55ab6-bda3-4ab3-af22-04d2ad2c046a
          entity: "11683"
          status: status
        id: c6056234-a3f9-42de-b944-3ed793fcb6bb
        message:
        - message
        - message
        status: ok
        customer:
          id: c6056234-a3f9-42de-b944-3ed793fcb6bb
      properties:
        id:
          description: "A unique identifier for the resource. While typically formatted\
            \ as a UUID (Universally Unique Identifier), it can also be in other formats\
            \ as defined by the user. This field ensures the resource can be distinctly\
            \ recognized and referenced."
          example: c6056234-a3f9-42de-b944-3ed793fcb6bb
          title: Identifier
          type: string
          x-stoplight:
            id: 08r7fnj0h7hlg
        message:
          description: An array of human-readable messages included in the response.
            These messages provide detailed information about the success of the operation
            or explain the reasons for any failure. This field is always present in
            the response to ensure clarity and transparency regarding the outcome
            of the API request.
          items:
            type: string
            x-stoplight:
              id: 7b6ch52iyqms2
          type: array
          x-stoplight:
            id: dy98yerk1oirb
        status:
          $ref: '#/components/schemas/ResponseStatus'
        customer:
          $ref: '#/components/schemas/inline_object_10_customer'
        method:
          $ref: '#/components/schemas/Method'
    inline_object_11:
      example:
        metadata:
          next_cursor: lL_j7ilk7rc
          count: 10
        data:
        - splits:
          - reverts:
            - margin_value: 6.027456183070403
              id: c6056234-a3f9-42de-b944-3ed793fcb6bb
              value: 15.32
            - margin_value: 6.027456183070403
              id: c6056234-a3f9-42de-b944-3ed793fcb6bb
              value: 15.32
            clearing_date: 2000-01-23
            margin_account:
              id: c6056234-a3f9-42de-b944-3ed793fcb6bb
            split_key: 01J1PKR2RPHJNJQGFWGDYXY0KM
            margin_value: 0.8008281904610115
            id: c6056234-a3f9-42de-b944-3ed793fcb6bb
            clearing_period: clearing_period
            value: 15.32
            split_descriptive: Payment of Invoice Nº 1982652
            account:
              id: c6056234-a3f9-42de-b944-3ed793fcb6bb
            status: waiting
          - reverts:
            - margin_value: 6.027456183070403
              id: c6056234-a3f9-42de-b944-3ed793fcb6bb
              value: 15.32
            - margin_value: 6.027456183070403
              id: c6056234-a3f9-42de-b944-3ed793fcb6bb
              value: 15.32
            clearing_date: 2000-01-23
            margin_account:
              id: c6056234-a3f9-42de-b944-3ed793fcb6bb
            split_key: 01J1PKR2RPHJNJQGFWGDYXY0KM
            margin_value: 0.8008281904610115
            id: c6056234-a3f9-42de-b944-3ed793fcb6bb
            clearing_period: clearing_period
            value: 15.32
            split_descriptive: Payment of Invoice Nº 1982652
            account:
              id: c6056234-a3f9-42de-b944-3ed793fcb6bb
            status: waiting
          created_at: 2006-01-02 15:04
          payment_type: single
          transaction_key: 01J1PKR2RPHJNJQGFWGDYXY0KM
          updated_at: 2006-01-02 15:04
          capture_date: 2000-01-23
          payment_id: c6056234-a3f9-42de-b944-3ed793fcb6bb
          force_3ds: true
          descriptive: Payment of Invoice Nº 1982652
          id: c6056234-a3f9-42de-b944-3ed793fcb6bb
          value: 15.32
          account:
            id: c6056234-a3f9-42de-b944-3ed793fcb6bb
          status: delayed
        - splits:
          - reverts:
            - margin_value: 6.027456183070403
              id: c6056234-a3f9-42de-b944-3ed793fcb6bb
              value: 15.32
            - margin_value: 6.027456183070403
              id: c6056234-a3f9-42de-b944-3ed793fcb6bb
              value: 15.32
            clearing_date: 2000-01-23
            margin_account:
              id: c6056234-a3f9-42de-b944-3ed793fcb6bb
            split_key: 01J1PKR2RPHJNJQGFWGDYXY0KM
            margin_value: 0.8008281904610115
            id: c6056234-a3f9-42de-b944-3ed793fcb6bb
            clearing_period: clearing_period
            value: 15.32
            split_descriptive: Payment of Invoice Nº 1982652
            account:
              id: c6056234-a3f9-42de-b944-3ed793fcb6bb
            status: waiting
          - reverts:
            - margin_value: 6.027456183070403
              id: c6056234-a3f9-42de-b944-3ed793fcb6bb
              value: 15.32
            - margin_value: 6.027456183070403
              id: c6056234-a3f9-42de-b944-3ed793fcb6bb
              value: 15.32
            clearing_date: 2000-01-23
            margin_account:
              id: c6056234-a3f9-42de-b944-3ed793fcb6bb
            split_key: 01J1PKR2RPHJNJQGFWGDYXY0KM
            margin_value: 0.8008281904610115
            id: c6056234-a3f9-42de-b944-3ed793fcb6bb
            clearing_period: clearing_period
            value: 15.32
            split_descriptive: Payment of Invoice Nº 1982652
            account:
              id: c6056234-a3f9-42de-b944-3ed793fcb6bb
            status: waiting
          created_at: 2006-01-02 15:04
          payment_type: single
          transaction_key: 01J1PKR2RPHJNJQGFWGDYXY0KM
          updated_at: 2006-01-02 15:04
          capture_date: 2000-01-23
          payment_id: c6056234-a3f9-42de-b944-3ed793fcb6bb
          force_3ds: true
          descriptive: Payment of Invoice Nº 1982652
          id: c6056234-a3f9-42de-b944-3ed793fcb6bb
          value: 15.32
          account:
            id: c6056234-a3f9-42de-b944-3ed793fcb6bb
          status: delayed
      properties:
        metadata:
          $ref: '#/components/schemas/Metadata'
        data:
          items:
            $ref: '#/components/schemas/CaptureFull'
          type: array
          x-stoplight:
            id: k3fdvadpkto3z
      required:
      - data
      - metadata
    inline_object_12:
      allOf:
      - $ref: '#/components/schemas/CaptureFull'
      - properties:
          refunds:
            items:
              $ref: '#/components/schemas/Refund'
            type: array
      example:
        splits:
        - reverts:
          - margin_value: 6.027456183070403
            id: c6056234-a3f9-42de-b944-3ed793fcb6bb
            value: 15.32
          - margin_value: 6.027456183070403
            id: c6056234-a3f9-42de-b944-3ed793fcb6bb
            value: 15.32
          clearing_date: 2000-01-23
          margin_account:
            id: c6056234-a3f9-42de-b944-3ed793fcb6bb
          split_key: 01J1PKR2RPHJNJQGFWGDYXY0KM
          margin_value: 0.8008281904610115
          id: c6056234-a3f9-42de-b944-3ed793fcb6bb
          clearing_period: clearing_period
          value: 15.32
          split_descriptive: Payment of Invoice Nº 1982652
          account:
            id: c6056234-a3f9-42de-b944-3ed793fcb6bb
          status: waiting
        - reverts:
          - margin_value: 6.027456183070403
            id: c6056234-a3f9-42de-b944-3ed793fcb6bb
            value: 15.32
          - margin_value: 6.027456183070403
            id: c6056234-a3f9-42de-b944-3ed793fcb6bb
            value: 15.32
          clearing_date: 2000-01-23
          margin_account:
            id: c6056234-a3f9-42de-b944-3ed793fcb6bb
          split_key: 01J1PKR2RPHJNJQGFWGDYXY0KM
          margin_value: 0.8008281904610115
          id: c6056234-a3f9-42de-b944-3ed793fcb6bb
          clearing_period: clearing_period
          value: 15.32
          split_descriptive: Payment of Invoice Nº 1982652
          account:
            id: c6056234-a3f9-42de-b944-3ed793fcb6bb
          status: waiting
        created_at: 2006-01-02 15:04
        refunds:
        - transaction_key: 01J1PKR2RPHJNJQGFWGDYXY0KM
          phone: phone
          account_holder: account_holder
          iban: iban
          id: c6056234-a3f9-42de-b944-3ed793fcb6bb
          value: 15.32
          email: email
          status: success
        - transaction_key: 01J1PKR2RPHJNJQGFWGDYXY0KM
          phone: phone
          account_holder: account_holder
          iban: iban
          id: c6056234-a3f9-42de-b944-3ed793fcb6bb
          value: 15.32
          email: email
          status: success
        payment_type: single
        transaction_key: 01J1PKR2RPHJNJQGFWGDYXY0KM
        updated_at: 2006-01-02 15:04
        capture_date: 2000-01-23
        payment_id: c6056234-a3f9-42de-b944-3ed793fcb6bb
        force_3ds: true
        descriptive: Payment of Invoice Nº 1982652
        id: c6056234-a3f9-42de-b944-3ed793fcb6bb
        value: 15.32
        account:
          id: c6056234-a3f9-42de-b944-3ed793fcb6bb
        status: delayed
    inline_object_13:
      example:
        metadata:
          next_cursor: lL_j7ilk7rc
          count: 10
        data:
        - transaction_key: 01J1PKR2RPHJNJQGFWGDYXY0KM
          updated_at: 2006-01-02 15:04
          phone: phone
          account_holder: account_holder
          iban: iban
          capture:
            payment_type: single
            payment_id: c6056234-a3f9-42de-b944-3ed793fcb6bb
            id: c6056234-a3f9-42de-b944-3ed793fcb6bb
          created_at: 2006-01-02 15:04
          id: c6056234-a3f9-42de-b944-3ed793fcb6bb
          value: 15.32
          email: email
          status: success
        - transaction_key: 01J1PKR2RPHJNJQGFWGDYXY0KM
          updated_at: 2006-01-02 15:04
          phone: phone
          account_holder: account_holder
          iban: iban
          capture:
            payment_type: single
            payment_id: c6056234-a3f9-42de-b944-3ed793fcb6bb
            id: c6056234-a3f9-42de-b944-3ed793fcb6bb
          created_at: 2006-01-02 15:04
          id: c6056234-a3f9-42de-b944-3ed793fcb6bb
          value: 15.32
          email: email
          status: success
      properties:
        metadata:
          $ref: '#/components/schemas/Metadata'
        data:
          items:
            $ref: '#/components/schemas/ListRefundModel'
          type: array
          x-stoplight:
            id: ole7owky6m52k
    inline_object_14:
      example:
        metadata:
          next_cursor: lL_j7ilk7rc
          count: 10
        data:
        - amount: 15.32
          code: MD06
          created_at: 2006-01-02 15:04
          capture:
            payment_type: single
            payment_id: c6056234-a3f9-42de-b944-3ed793fcb6bb
            id: c6056234-a3f9-42de-b944-3ed793fcb6bb
          id: c6056234-a3f9-42de-b944-3ed793fcb6bb
          message: MD06 - Refund Request by End Customer
        - amount: 15.32
          code: MD06
          created_at: 2006-01-02 15:04
          capture:
            payment_type: single
            payment_id: c6056234-a3f9-42de-b944-3ed793fcb6bb
            id: c6056234-a3f9-42de-b944-3ed793fcb6bb
          id: c6056234-a3f9-42de-b944-3ed793fcb6bb
          message: MD06 - Refund Request by End Customer
      properties:
        data:
          items:
            $ref: '#/components/schemas/Chargeback'
          type: array
          x-stoplight:
            id: j1430zctse80g
        metadata:
          $ref: '#/components/schemas/Metadata'
  securitySchemes:
    accountId:
      description: This is the identification for the Easypay Client Account
      in: header
      name: AccountId
      type: apiKey
    apiKey:
      description: This is the counter key for the used Account Id
      in: header
      name: ApiKey
      type: apiKey
    signatureAuth:
      description: RSA signature Base64 generated with algorithm SHA256 using a account
        strong authentication private Key on the raw body or id.
      in: header
      name: Signature
      type: apiKey
    BasicAuth:
      scheme: basic
      type: http
x-stoplight:
  id: rlih0ddz8o2rm

